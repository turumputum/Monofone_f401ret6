
usb-i2s-3WORK_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f32c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800f4c4  0800f4c4  0001f4c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5a4  0800f5a4  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f5a4  0800f5a4  0001f5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5ac  0800f5ac  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5ac  0800f5ac  0001f5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5b0  0800f5b0  0001f5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800f5b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f80  200001fc  0800f7b0  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00009004  2000117c  0800f7b0  0002117c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027a88  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005317  00000000  00000000  00047cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bb0  00000000  00000000  0004cfd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001968  00000000  00000000  0004eb80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dfb0  00000000  00000000  000504e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001babc  00000000  00000000  0006e498  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099e1a  00000000  00000000  00089f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00123d6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007974  00000000  00000000  00123dec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001fc 	.word	0x200001fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800f4ac 	.word	0x0800f4ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000200 	.word	0x20000200
 80001d4:	0800f4ac 	.word	0x0800f4ac

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b972 	b.w	8000d10 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9e08      	ldr	r6, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	4688      	mov	r8, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14b      	bne.n	8000aea <__udivmoddi4+0xa6>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4615      	mov	r5, r2
 8000a56:	d967      	bls.n	8000b28 <__udivmoddi4+0xe4>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b14a      	cbz	r2, 8000a72 <__udivmoddi4+0x2e>
 8000a5e:	f1c2 0720 	rsb	r7, r2, #32
 8000a62:	fa01 f302 	lsl.w	r3, r1, r2
 8000a66:	fa20 f707 	lsr.w	r7, r0, r7
 8000a6a:	4095      	lsls	r5, r2
 8000a6c:	ea47 0803 	orr.w	r8, r7, r3
 8000a70:	4094      	lsls	r4, r2
 8000a72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a76:	0c23      	lsrs	r3, r4, #16
 8000a78:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a7c:	fa1f fc85 	uxth.w	ip, r5
 8000a80:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a88:	fb07 f10c 	mul.w	r1, r7, ip
 8000a8c:	4299      	cmp	r1, r3
 8000a8e:	d909      	bls.n	8000aa4 <__udivmoddi4+0x60>
 8000a90:	18eb      	adds	r3, r5, r3
 8000a92:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a96:	f080 811b 	bcs.w	8000cd0 <__udivmoddi4+0x28c>
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	f240 8118 	bls.w	8000cd0 <__udivmoddi4+0x28c>
 8000aa0:	3f02      	subs	r7, #2
 8000aa2:	442b      	add	r3, r5
 8000aa4:	1a5b      	subs	r3, r3, r1
 8000aa6:	b2a4      	uxth	r4, r4
 8000aa8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ab0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ab8:	45a4      	cmp	ip, r4
 8000aba:	d909      	bls.n	8000ad0 <__udivmoddi4+0x8c>
 8000abc:	192c      	adds	r4, r5, r4
 8000abe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac2:	f080 8107 	bcs.w	8000cd4 <__udivmoddi4+0x290>
 8000ac6:	45a4      	cmp	ip, r4
 8000ac8:	f240 8104 	bls.w	8000cd4 <__udivmoddi4+0x290>
 8000acc:	3802      	subs	r0, #2
 8000ace:	442c      	add	r4, r5
 8000ad0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ad4:	eba4 040c 	sub.w	r4, r4, ip
 8000ad8:	2700      	movs	r7, #0
 8000ada:	b11e      	cbz	r6, 8000ae4 <__udivmoddi4+0xa0>
 8000adc:	40d4      	lsrs	r4, r2
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ae4:	4639      	mov	r1, r7
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0xbe>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	f000 80eb 	beq.w	8000cca <__udivmoddi4+0x286>
 8000af4:	2700      	movs	r7, #0
 8000af6:	e9c6 0100 	strd	r0, r1, [r6]
 8000afa:	4638      	mov	r0, r7
 8000afc:	4639      	mov	r1, r7
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	fab3 f783 	clz	r7, r3
 8000b06:	2f00      	cmp	r7, #0
 8000b08:	d147      	bne.n	8000b9a <__udivmoddi4+0x156>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d302      	bcc.n	8000b14 <__udivmoddi4+0xd0>
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	f200 80fa 	bhi.w	8000d08 <__udivmoddi4+0x2c4>
 8000b14:	1a84      	subs	r4, r0, r2
 8000b16:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d0e0      	beq.n	8000ae4 <__udivmoddi4+0xa0>
 8000b22:	e9c6 4800 	strd	r4, r8, [r6]
 8000b26:	e7dd      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000b28:	b902      	cbnz	r2, 8000b2c <__udivmoddi4+0xe8>
 8000b2a:	deff      	udf	#255	; 0xff
 8000b2c:	fab2 f282 	clz	r2, r2
 8000b30:	2a00      	cmp	r2, #0
 8000b32:	f040 808f 	bne.w	8000c54 <__udivmoddi4+0x210>
 8000b36:	1b49      	subs	r1, r1, r5
 8000b38:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b3c:	fa1f f885 	uxth.w	r8, r5
 8000b40:	2701      	movs	r7, #1
 8000b42:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b46:	0c23      	lsrs	r3, r4, #16
 8000b48:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb08 f10c 	mul.w	r1, r8, ip
 8000b54:	4299      	cmp	r1, r3
 8000b56:	d907      	bls.n	8000b68 <__udivmoddi4+0x124>
 8000b58:	18eb      	adds	r3, r5, r3
 8000b5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x122>
 8000b60:	4299      	cmp	r1, r3
 8000b62:	f200 80cd 	bhi.w	8000d00 <__udivmoddi4+0x2bc>
 8000b66:	4684      	mov	ip, r0
 8000b68:	1a59      	subs	r1, r3, r1
 8000b6a:	b2a3      	uxth	r3, r4
 8000b6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b70:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b74:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b78:	fb08 f800 	mul.w	r8, r8, r0
 8000b7c:	45a0      	cmp	r8, r4
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0x14c>
 8000b80:	192c      	adds	r4, r5, r4
 8000b82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0x14a>
 8000b88:	45a0      	cmp	r8, r4
 8000b8a:	f200 80b6 	bhi.w	8000cfa <__udivmoddi4+0x2b6>
 8000b8e:	4618      	mov	r0, r3
 8000b90:	eba4 0408 	sub.w	r4, r4, r8
 8000b94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b98:	e79f      	b.n	8000ada <__udivmoddi4+0x96>
 8000b9a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b9e:	40bb      	lsls	r3, r7
 8000ba0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ba4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ba8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bac:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bb0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bb4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bb8:	4325      	orrs	r5, r4
 8000bba:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bbe:	0c2c      	lsrs	r4, r5, #16
 8000bc0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bc4:	fa1f fa8e 	uxth.w	sl, lr
 8000bc8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bcc:	fb09 f40a 	mul.w	r4, r9, sl
 8000bd0:	429c      	cmp	r4, r3
 8000bd2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bd6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b0>
 8000bdc:	eb1e 0303 	adds.w	r3, lr, r3
 8000be0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000be4:	f080 8087 	bcs.w	8000cf6 <__udivmoddi4+0x2b2>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f240 8084 	bls.w	8000cf6 <__udivmoddi4+0x2b2>
 8000bee:	f1a9 0902 	sub.w	r9, r9, #2
 8000bf2:	4473      	add	r3, lr
 8000bf4:	1b1b      	subs	r3, r3, r4
 8000bf6:	b2ad      	uxth	r5, r5
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000c00:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c04:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c08:	45a2      	cmp	sl, r4
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1da>
 8000c0c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c10:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c14:	d26b      	bcs.n	8000cee <__udivmoddi4+0x2aa>
 8000c16:	45a2      	cmp	sl, r4
 8000c18:	d969      	bls.n	8000cee <__udivmoddi4+0x2aa>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4474      	add	r4, lr
 8000c1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c22:	fba0 8902 	umull	r8, r9, r0, r2
 8000c26:	eba4 040a 	sub.w	r4, r4, sl
 8000c2a:	454c      	cmp	r4, r9
 8000c2c:	46c2      	mov	sl, r8
 8000c2e:	464b      	mov	r3, r9
 8000c30:	d354      	bcc.n	8000cdc <__udivmoddi4+0x298>
 8000c32:	d051      	beq.n	8000cd8 <__udivmoddi4+0x294>
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	d069      	beq.n	8000d0c <__udivmoddi4+0x2c8>
 8000c38:	ebb1 050a 	subs.w	r5, r1, sl
 8000c3c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c40:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c44:	40fd      	lsrs	r5, r7
 8000c46:	40fc      	lsrs	r4, r7
 8000c48:	ea4c 0505 	orr.w	r5, ip, r5
 8000c4c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c50:	2700      	movs	r7, #0
 8000c52:	e747      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000c54:	f1c2 0320 	rsb	r3, r2, #32
 8000c58:	fa20 f703 	lsr.w	r7, r0, r3
 8000c5c:	4095      	lsls	r5, r2
 8000c5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c62:	fa21 f303 	lsr.w	r3, r1, r3
 8000c66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6a:	4338      	orrs	r0, r7
 8000c6c:	0c01      	lsrs	r1, r0, #16
 8000c6e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c72:	fa1f f885 	uxth.w	r8, r5
 8000c76:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7e:	fb07 f308 	mul.w	r3, r7, r8
 8000c82:	428b      	cmp	r3, r1
 8000c84:	fa04 f402 	lsl.w	r4, r4, r2
 8000c88:	d907      	bls.n	8000c9a <__udivmoddi4+0x256>
 8000c8a:	1869      	adds	r1, r5, r1
 8000c8c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c90:	d22f      	bcs.n	8000cf2 <__udivmoddi4+0x2ae>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d92d      	bls.n	8000cf2 <__udivmoddi4+0x2ae>
 8000c96:	3f02      	subs	r7, #2
 8000c98:	4429      	add	r1, r5
 8000c9a:	1acb      	subs	r3, r1, r3
 8000c9c:	b281      	uxth	r1, r0
 8000c9e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000caa:	fb00 f308 	mul.w	r3, r0, r8
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d907      	bls.n	8000cc2 <__udivmoddi4+0x27e>
 8000cb2:	1869      	adds	r1, r5, r1
 8000cb4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cb8:	d217      	bcs.n	8000cea <__udivmoddi4+0x2a6>
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d915      	bls.n	8000cea <__udivmoddi4+0x2a6>
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	4429      	add	r1, r5
 8000cc2:	1ac9      	subs	r1, r1, r3
 8000cc4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cc8:	e73b      	b.n	8000b42 <__udivmoddi4+0xfe>
 8000cca:	4637      	mov	r7, r6
 8000ccc:	4630      	mov	r0, r6
 8000cce:	e709      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000cd0:	4607      	mov	r7, r0
 8000cd2:	e6e7      	b.n	8000aa4 <__udivmoddi4+0x60>
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	e6fb      	b.n	8000ad0 <__udivmoddi4+0x8c>
 8000cd8:	4541      	cmp	r1, r8
 8000cda:	d2ab      	bcs.n	8000c34 <__udivmoddi4+0x1f0>
 8000cdc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ce0:	eb69 020e 	sbc.w	r2, r9, lr
 8000ce4:	3801      	subs	r0, #1
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	e7a4      	b.n	8000c34 <__udivmoddi4+0x1f0>
 8000cea:	4660      	mov	r0, ip
 8000cec:	e7e9      	b.n	8000cc2 <__udivmoddi4+0x27e>
 8000cee:	4618      	mov	r0, r3
 8000cf0:	e795      	b.n	8000c1e <__udivmoddi4+0x1da>
 8000cf2:	4667      	mov	r7, ip
 8000cf4:	e7d1      	b.n	8000c9a <__udivmoddi4+0x256>
 8000cf6:	4681      	mov	r9, r0
 8000cf8:	e77c      	b.n	8000bf4 <__udivmoddi4+0x1b0>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	442c      	add	r4, r5
 8000cfe:	e747      	b.n	8000b90 <__udivmoddi4+0x14c>
 8000d00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d04:	442b      	add	r3, r5
 8000d06:	e72f      	b.n	8000b68 <__udivmoddi4+0x124>
 8000d08:	4638      	mov	r0, r7
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xda>
 8000d0c:	4637      	mov	r7, r6
 8000d0e:	e6e9      	b.n	8000ae4 <__udivmoddi4+0xa0>

08000d10 <__aeabi_idiv0>:
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f94d 	bl	8000fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f00c fdd4 	bl	800d8f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f965 	bl	8001046 <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f92d 	bl	8000ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000128 	.word	0x20000128
 8000db0:	20000004 	.word	0x20000004
 8000db4:	20000000 	.word	0x20000000

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000004 	.word	0x20000004
 8000ddc:	20000258 	.word	0x20000258

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000258 	.word	0x20000258

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_Delay+0x40>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000004 	.word	0x20000004

08000e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <__NVIC_GetPriorityGrouping+0x18>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	f003 0307 	and.w	r3, r3, #7
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db0b      	blt.n	8000eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	4907      	ldr	r1, [pc, #28]	; (8000ed8 <__NVIC_EnableIRQ+0x38>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4908      	ldr	r1, [pc, #32]	; (8000f2c <__NVIC_SetPriority+0x50>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	3b04      	subs	r3, #4
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4313      	orrs	r3, r2
         );
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3724      	adds	r7, #36	; 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa8:	d301      	bcc.n	8000fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00f      	b.n	8000fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <SysTick_Config+0x40>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f7ff ff8e 	bl	8000edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff29 	bl	8000e3c <__NVIC_SetPriorityGrouping>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001004:	f7ff ff3e 	bl	8000e84 <__NVIC_GetPriorityGrouping>
 8001008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	6978      	ldr	r0, [r7, #20]
 8001010:	f7ff ff8e 	bl	8000f30 <NVIC_EncodePriority>
 8001014:	4602      	mov	r2, r0
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff5d 	bl	8000edc <__NVIC_SetPriority>
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff31 	bl	8000ea0 <__NVIC_EnableIRQ>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffa2 	bl	8000f98 <SysTick_Config>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff feb8 	bl	8000de0 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e099      	b.n	80011b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2202      	movs	r2, #2
 8001088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0201 	bic.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800109c:	e00f      	b.n	80010be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800109e:	f7ff fe9f 	bl	8000de0 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b05      	cmp	r3, #5
 80010aa:	d908      	bls.n	80010be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2220      	movs	r2, #32
 80010b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2203      	movs	r2, #3
 80010b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e078      	b.n	80011b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1e8      	bne.n	800109e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	4b38      	ldr	r3, [pc, #224]	; (80011b8 <HAL_DMA_Init+0x158>)
 80010d8:	4013      	ands	r3, r2
 80010da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001102:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	4313      	orrs	r3, r2
 800110e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	2b04      	cmp	r3, #4
 8001116:	d107      	bne.n	8001128 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	4313      	orrs	r3, r2
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4313      	orrs	r3, r2
 8001126:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f023 0307 	bic.w	r3, r3, #7
 800113e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	4313      	orrs	r3, r2
 8001148:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	2b04      	cmp	r3, #4
 8001150:	d117      	bne.n	8001182 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4313      	orrs	r3, r2
 800115a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00e      	beq.n	8001182 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 fb0f 	bl	8001788 <DMA_CheckFifoParam>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d008      	beq.n	8001182 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2240      	movs	r2, #64	; 0x40
 8001174:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800117e:	2301      	movs	r3, #1
 8001180:	e016      	b.n	80011b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 fac6 	bl	800171c <DMA_CalcBaseAndBitshift>
 8001190:	4603      	mov	r3, r0
 8001192:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001198:	223f      	movs	r2, #63	; 0x3f
 800119a:	409a      	lsls	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	f010803f 	.word	0xf010803f

080011bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d101      	bne.n	80011e2 <HAL_DMA_Start_IT+0x26>
 80011de:	2302      	movs	r3, #2
 80011e0:	e040      	b.n	8001264 <HAL_DMA_Start_IT+0xa8>
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d12f      	bne.n	8001256 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2202      	movs	r2, #2
 80011fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2200      	movs	r2, #0
 8001202:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f000 fa58 	bl	80016c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001214:	223f      	movs	r2, #63	; 0x3f
 8001216:	409a      	lsls	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0216 	orr.w	r2, r2, #22
 800122a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	2b00      	cmp	r3, #0
 8001232:	d007      	beq.n	8001244 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0208 	orr.w	r2, r2, #8
 8001242:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 0201 	orr.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	e005      	b.n	8001262 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800125e:	2302      	movs	r3, #2
 8001260:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001262:	7dfb      	ldrb	r3, [r7, #23]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001278:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800127a:	f7ff fdb1 	bl	8000de0 <HAL_GetTick>
 800127e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d008      	beq.n	800129e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e052      	b.n	8001344 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0216 	bic.w	r2, r2, #22
 80012ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	695a      	ldr	r2, [r3, #20]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d103      	bne.n	80012ce <HAL_DMA_Abort+0x62>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d007      	beq.n	80012de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0208 	bic.w	r2, r2, #8
 80012dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0201 	bic.w	r2, r2, #1
 80012ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ee:	e013      	b.n	8001318 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012f0:	f7ff fd76 	bl	8000de0 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b05      	cmp	r3, #5
 80012fc:	d90c      	bls.n	8001318 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2220      	movs	r2, #32
 8001302:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2203      	movs	r2, #3
 8001310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e015      	b.n	8001344 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1e4      	bne.n	80012f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132a:	223f      	movs	r2, #63	; 0x3f
 800132c:	409a      	lsls	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d004      	beq.n	800136a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00c      	b.n	8001384 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2205      	movs	r2, #5
 800136e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0201 	bic.w	r2, r2, #1
 8001380:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800139c:	4b92      	ldr	r3, [pc, #584]	; (80015e8 <HAL_DMA_IRQHandler+0x258>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a92      	ldr	r2, [pc, #584]	; (80015ec <HAL_DMA_IRQHandler+0x25c>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	0a9b      	lsrs	r3, r3, #10
 80013a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ba:	2208      	movs	r2, #8
 80013bc:	409a      	lsls	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01a      	beq.n	80013fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d013      	beq.n	80013fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0204 	bic.w	r2, r2, #4
 80013e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e8:	2208      	movs	r2, #8
 80013ea:	409a      	lsls	r2, r3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f4:	f043 0201 	orr.w	r2, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001400:	2201      	movs	r2, #1
 8001402:	409a      	lsls	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d012      	beq.n	8001432 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141e:	2201      	movs	r2, #1
 8001420:	409a      	lsls	r2, r3
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142a:	f043 0202 	orr.w	r2, r3, #2
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001436:	2204      	movs	r2, #4
 8001438:	409a      	lsls	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4013      	ands	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d012      	beq.n	8001468 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00b      	beq.n	8001468 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001454:	2204      	movs	r2, #4
 8001456:	409a      	lsls	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001460:	f043 0204 	orr.w	r2, r3, #4
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146c:	2210      	movs	r2, #16
 800146e:	409a      	lsls	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d043      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d03c      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	2210      	movs	r2, #16
 800148c:	409a      	lsls	r2, r3
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d018      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d108      	bne.n	80014c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d024      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	4798      	blx	r3
 80014be:	e01f      	b.n	8001500 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d01b      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	4798      	blx	r3
 80014d0:	e016      	b.n	8001500 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d107      	bne.n	80014f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0208 	bic.w	r2, r2, #8
 80014ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001504:	2220      	movs	r2, #32
 8001506:	409a      	lsls	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4013      	ands	r3, r2
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 808e 	beq.w	800162e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 8086 	beq.w	800162e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001526:	2220      	movs	r2, #32
 8001528:	409a      	lsls	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b05      	cmp	r3, #5
 8001538:	d136      	bne.n	80015a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0216 	bic.w	r2, r2, #22
 8001548:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	695a      	ldr	r2, [r3, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001558:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	2b00      	cmp	r3, #0
 8001560:	d103      	bne.n	800156a <HAL_DMA_IRQHandler+0x1da>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0208 	bic.w	r2, r2, #8
 8001578:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	223f      	movs	r2, #63	; 0x3f
 8001580:	409a      	lsls	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800159a:	2b00      	cmp	r3, #0
 800159c:	d07d      	beq.n	800169a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
        }
        return;
 80015a6:	e078      	b.n	800169a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d01c      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d108      	bne.n	80015d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d030      	beq.n	800162e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	4798      	blx	r3
 80015d4:	e02b      	b.n	800162e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d027      	beq.n	800162e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	4798      	blx	r3
 80015e6:	e022      	b.n	800162e <HAL_DMA_IRQHandler+0x29e>
 80015e8:	20000128 	.word	0x20000128
 80015ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10f      	bne.n	800161e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0210 	bic.w	r2, r2, #16
 800160c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001632:	2b00      	cmp	r3, #0
 8001634:	d032      	beq.n	800169c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d022      	beq.n	8001688 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2205      	movs	r2, #5
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	3301      	adds	r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	429a      	cmp	r2, r3
 8001664:	d307      	bcc.n	8001676 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f2      	bne.n	800165a <HAL_DMA_IRQHandler+0x2ca>
 8001674:	e000      	b.n	8001678 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001676:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	4798      	blx	r3
 8001698:	e000      	b.n	800169c <HAL_DMA_IRQHandler+0x30c>
        return;
 800169a:	bf00      	nop
    }
  }
}
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop

080016a4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016b2:	b2db      	uxtb	r3, r3
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b40      	cmp	r3, #64	; 0x40
 80016ec:	d108      	bne.n	8001700 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016fe:	e007      	b.n	8001710 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	60da      	str	r2, [r3, #12]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	3b10      	subs	r3, #16
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <DMA_CalcBaseAndBitshift+0x64>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	091b      	lsrs	r3, r3, #4
 8001734:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001736:	4a13      	ldr	r2, [pc, #76]	; (8001784 <DMA_CalcBaseAndBitshift+0x68>)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d909      	bls.n	800175e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001752:	f023 0303 	bic.w	r3, r3, #3
 8001756:	1d1a      	adds	r2, r3, #4
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	659a      	str	r2, [r3, #88]	; 0x58
 800175c:	e007      	b.n	800176e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001766:	f023 0303 	bic.w	r3, r3, #3
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001772:	4618      	mov	r0, r3
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	aaaaaaab 	.word	0xaaaaaaab
 8001784:	0800f50c 	.word	0x0800f50c

08001788 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d11f      	bne.n	80017e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d855      	bhi.n	8001854 <DMA_CheckFifoParam+0xcc>
 80017a8:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <DMA_CheckFifoParam+0x28>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	080017c1 	.word	0x080017c1
 80017b4:	080017d3 	.word	0x080017d3
 80017b8:	080017c1 	.word	0x080017c1
 80017bc:	08001855 	.word	0x08001855
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d045      	beq.n	8001858 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017d0:	e042      	b.n	8001858 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017da:	d13f      	bne.n	800185c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017e0:	e03c      	b.n	800185c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ea:	d121      	bne.n	8001830 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d836      	bhi.n	8001860 <DMA_CheckFifoParam+0xd8>
 80017f2:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <DMA_CheckFifoParam+0x70>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	08001809 	.word	0x08001809
 80017fc:	0800180f 	.word	0x0800180f
 8001800:	08001809 	.word	0x08001809
 8001804:	08001821 	.word	0x08001821
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
      break;
 800180c:	e02f      	b.n	800186e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d024      	beq.n	8001864 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800181e:	e021      	b.n	8001864 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001828:	d11e      	bne.n	8001868 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800182e:	e01b      	b.n	8001868 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d902      	bls.n	800183c <DMA_CheckFifoParam+0xb4>
 8001836:	2b03      	cmp	r3, #3
 8001838:	d003      	beq.n	8001842 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800183a:	e018      	b.n	800186e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
      break;
 8001840:	e015      	b.n	800186e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00e      	beq.n	800186c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
      break;
 8001852:	e00b      	b.n	800186c <DMA_CheckFifoParam+0xe4>
      break;
 8001854:	bf00      	nop
 8001856:	e00a      	b.n	800186e <DMA_CheckFifoParam+0xe6>
      break;
 8001858:	bf00      	nop
 800185a:	e008      	b.n	800186e <DMA_CheckFifoParam+0xe6>
      break;
 800185c:	bf00      	nop
 800185e:	e006      	b.n	800186e <DMA_CheckFifoParam+0xe6>
      break;
 8001860:	bf00      	nop
 8001862:	e004      	b.n	800186e <DMA_CheckFifoParam+0xe6>
      break;
 8001864:	bf00      	nop
 8001866:	e002      	b.n	800186e <DMA_CheckFifoParam+0xe6>
      break;   
 8001868:	bf00      	nop
 800186a:	e000      	b.n	800186e <DMA_CheckFifoParam+0xe6>
      break;
 800186c:	bf00      	nop
    }
  } 
  
  return status; 
 800186e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	e159      	b.n	8001b4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001898:	2201      	movs	r2, #1
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	f040 8148 	bne.w	8001b46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d00b      	beq.n	80018d6 <HAL_GPIO_Init+0x5a>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d007      	beq.n	80018d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ca:	2b11      	cmp	r3, #17
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b12      	cmp	r3, #18
 80018d4:	d130      	bne.n	8001938 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2203      	movs	r2, #3
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800190c:	2201      	movs	r2, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 0201 	and.w	r2, r3, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0xfc>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b12      	cmp	r3, #18
 8001976:	d123      	bne.n	80019c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	08da      	lsrs	r2, r3, #3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3208      	adds	r2, #8
 8001980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	220f      	movs	r2, #15
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	691a      	ldr	r2, [r3, #16]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	08da      	lsrs	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3208      	adds	r2, #8
 80019ba:	69b9      	ldr	r1, [r7, #24]
 80019bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0203 	and.w	r2, r3, #3
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 80a2 	beq.w	8001b46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b56      	ldr	r3, [pc, #344]	; (8001b60 <HAL_GPIO_Init+0x2e4>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4a55      	ldr	r2, [pc, #340]	; (8001b60 <HAL_GPIO_Init+0x2e4>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	; 0x44
 8001a12:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_GPIO_Init+0x2e4>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a1e:	4a51      	ldr	r2, [pc, #324]	; (8001b64 <HAL_GPIO_Init+0x2e8>)
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	220f      	movs	r2, #15
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a48      	ldr	r2, [pc, #288]	; (8001b68 <HAL_GPIO_Init+0x2ec>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d019      	beq.n	8001a7e <HAL_GPIO_Init+0x202>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a47      	ldr	r2, [pc, #284]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0x1fe>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a46      	ldr	r2, [pc, #280]	; (8001b70 <HAL_GPIO_Init+0x2f4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_Init+0x1fa>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a45      	ldr	r2, [pc, #276]	; (8001b74 <HAL_GPIO_Init+0x2f8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_Init+0x1f6>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a44      	ldr	r2, [pc, #272]	; (8001b78 <HAL_GPIO_Init+0x2fc>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_Init+0x1f2>
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	e008      	b.n	8001a80 <HAL_GPIO_Init+0x204>
 8001a6e:	2307      	movs	r3, #7
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x204>
 8001a72:	2303      	movs	r3, #3
 8001a74:	e004      	b.n	8001a80 <HAL_GPIO_Init+0x204>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e002      	b.n	8001a80 <HAL_GPIO_Init+0x204>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_GPIO_Init+0x204>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	f002 0203 	and.w	r2, r2, #3
 8001a86:	0092      	lsls	r2, r2, #2
 8001a88:	4093      	lsls	r3, r2
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a90:	4934      	ldr	r1, [pc, #208]	; (8001b64 <HAL_GPIO_Init+0x2e8>)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	3302      	adds	r3, #2
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a9e:	4b37      	ldr	r3, [pc, #220]	; (8001b7c <HAL_GPIO_Init+0x300>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac2:	4a2e      	ldr	r2, [pc, #184]	; (8001b7c <HAL_GPIO_Init+0x300>)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ac8:	4b2c      	ldr	r3, [pc, #176]	; (8001b7c <HAL_GPIO_Init+0x300>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aec:	4a23      	ldr	r2, [pc, #140]	; (8001b7c <HAL_GPIO_Init+0x300>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af2:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <HAL_GPIO_Init+0x300>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b16:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <HAL_GPIO_Init+0x300>)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b1c:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <HAL_GPIO_Init+0x300>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b40:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <HAL_GPIO_Init+0x300>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2b0f      	cmp	r3, #15
 8001b50:	f67f aea2 	bls.w	8001898 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b54:	bf00      	nop
 8001b56:	3724      	adds	r7, #36	; 0x24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40013800 	.word	0x40013800
 8001b68:	40020000 	.word	0x40020000
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	40020800 	.word	0x40020800
 8001b74:	40020c00 	.word	0x40020c00
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40013c00 	.word	0x40013c00

08001b80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	887b      	ldrh	r3, [r7, #2]
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
 8001b9c:	e001      	b.n	8001ba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e11f      	b.n	8001e02 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d106      	bne.n	8001bdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f00b feb4 	bl	800d944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2224      	movs	r2, #36	; 0x24
 8001be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c14:	f005 f90e 	bl	8006e34 <HAL_RCC_GetPCLK1Freq>
 8001c18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4a7b      	ldr	r2, [pc, #492]	; (8001e0c <HAL_I2C_Init+0x25c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d807      	bhi.n	8001c34 <HAL_I2C_Init+0x84>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4a7a      	ldr	r2, [pc, #488]	; (8001e10 <HAL_I2C_Init+0x260>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	bf94      	ite	ls
 8001c2c:	2301      	movls	r3, #1
 8001c2e:	2300      	movhi	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	e006      	b.n	8001c42 <HAL_I2C_Init+0x92>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4a77      	ldr	r2, [pc, #476]	; (8001e14 <HAL_I2C_Init+0x264>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	bf94      	ite	ls
 8001c3c:	2301      	movls	r3, #1
 8001c3e:	2300      	movhi	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e0db      	b.n	8001e02 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4a72      	ldr	r2, [pc, #456]	; (8001e18 <HAL_I2C_Init+0x268>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	0c9b      	lsrs	r3, r3, #18
 8001c54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a64      	ldr	r2, [pc, #400]	; (8001e0c <HAL_I2C_Init+0x25c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d802      	bhi.n	8001c84 <HAL_I2C_Init+0xd4>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	3301      	adds	r3, #1
 8001c82:	e009      	b.n	8001c98 <HAL_I2C_Init+0xe8>
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	4a63      	ldr	r2, [pc, #396]	; (8001e1c <HAL_I2C_Init+0x26c>)
 8001c90:	fba2 2303 	umull	r2, r3, r2, r3
 8001c94:	099b      	lsrs	r3, r3, #6
 8001c96:	3301      	adds	r3, #1
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001caa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4956      	ldr	r1, [pc, #344]	; (8001e0c <HAL_I2C_Init+0x25c>)
 8001cb4:	428b      	cmp	r3, r1
 8001cb6:	d80d      	bhi.n	8001cd4 <HAL_I2C_Init+0x124>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1e59      	subs	r1, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	bf38      	it	cc
 8001cd0:	2304      	movcc	r3, #4
 8001cd2:	e04f      	b.n	8001d74 <HAL_I2C_Init+0x1c4>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d111      	bne.n	8001d00 <HAL_I2C_Init+0x150>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1e58      	subs	r0, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	440b      	add	r3, r1
 8001cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2301      	moveq	r3, #1
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	e012      	b.n	8001d26 <HAL_I2C_Init+0x176>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1e58      	subs	r0, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	0099      	lsls	r1, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d16:	3301      	adds	r3, #1
 8001d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_I2C_Init+0x17e>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e022      	b.n	8001d74 <HAL_I2C_Init+0x1c4>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10e      	bne.n	8001d54 <HAL_I2C_Init+0x1a4>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1e58      	subs	r0, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6859      	ldr	r1, [r3, #4]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	440b      	add	r3, r1
 8001d44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d52:	e00f      	b.n	8001d74 <HAL_I2C_Init+0x1c4>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1e58      	subs	r0, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	0099      	lsls	r1, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	6809      	ldr	r1, [r1, #0]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69da      	ldr	r2, [r3, #28]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001da2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6911      	ldr	r1, [r2, #16]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68d2      	ldr	r2, [r2, #12]
 8001dae:	4311      	orrs	r1, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	430b      	orrs	r3, r1
 8001db6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2220      	movs	r2, #32
 8001dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	000186a0 	.word	0x000186a0
 8001e10:	001e847f 	.word	0x001e847f
 8001e14:	003d08ff 	.word	0x003d08ff
 8001e18:	431bde83 	.word	0x431bde83
 8001e1c:	10624dd3 	.word	0x10624dd3

08001e20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	817b      	strh	r3, [r7, #10]
 8001e30:	4613      	mov	r3, r2
 8001e32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7fe ffd4 	bl	8000de0 <HAL_GetTick>
 8001e38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b20      	cmp	r3, #32
 8001e44:	f040 80e0 	bne.w	8002008 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2319      	movs	r3, #25
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4970      	ldr	r1, [pc, #448]	; (8002014 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f002 f87b 	bl	8003f4e <I2C_WaitOnFlagUntilTimeout>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e0d3      	b.n	800200a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_I2C_Master_Transmit+0x50>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e0cc      	b.n	800200a <HAL_I2C_Master_Transmit+0x1ea>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d007      	beq.n	8001e96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0201 	orr.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ea4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2221      	movs	r2, #33	; 0x21
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	893a      	ldrh	r2, [r7, #8]
 8001ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4a50      	ldr	r2, [pc, #320]	; (8002018 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ed8:	8979      	ldrh	r1, [r7, #10]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	6a3a      	ldr	r2, [r7, #32]
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f001 fe4e 	bl	8003b80 <I2C_MasterRequestWrite>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e08d      	b.n	800200a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f04:	e066      	b.n	8001fd4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	6a39      	ldr	r1, [r7, #32]
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f002 f8f5 	bl	80040fa <I2C_WaitOnTXEFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00d      	beq.n	8001f32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d107      	bne.n	8001f2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e06b      	b.n	800200a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	781a      	ldrb	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d11b      	bne.n	8001fa8 <HAL_I2C_Master_Transmit+0x188>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d017      	beq.n	8001fa8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	781a      	ldrb	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	6a39      	ldr	r1, [r7, #32]
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f002 f8e5 	bl	800417c <I2C_WaitOnBTFFlagUntilTimeout>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d107      	bne.n	8001fd0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e01a      	b.n	800200a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d194      	bne.n	8001f06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	e000      	b.n	800200a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002008:	2302      	movs	r3, #2
  }
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	00100002 	.word	0x00100002
 8002018:	ffff0000 	.word	0xffff0000

0800201c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08c      	sub	sp, #48	; 0x30
 8002020:	af02      	add	r7, sp, #8
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	4608      	mov	r0, r1
 8002026:	4611      	mov	r1, r2
 8002028:	461a      	mov	r2, r3
 800202a:	4603      	mov	r3, r0
 800202c:	817b      	strh	r3, [r7, #10]
 800202e:	460b      	mov	r3, r1
 8002030:	813b      	strh	r3, [r7, #8]
 8002032:	4613      	mov	r3, r2
 8002034:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002036:	f7fe fed3 	bl	8000de0 <HAL_GetTick>
 800203a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b20      	cmp	r3, #32
 8002046:	f040 8208 	bne.w	800245a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2319      	movs	r3, #25
 8002050:	2201      	movs	r2, #1
 8002052:	497b      	ldr	r1, [pc, #492]	; (8002240 <HAL_I2C_Mem_Read+0x224>)
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f001 ff7a 	bl	8003f4e <I2C_WaitOnFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002060:	2302      	movs	r3, #2
 8002062:	e1fb      	b.n	800245c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_I2C_Mem_Read+0x56>
 800206e:	2302      	movs	r3, #2
 8002070:	e1f4      	b.n	800245c <HAL_I2C_Mem_Read+0x440>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d007      	beq.n	8002098 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2222      	movs	r2, #34	; 0x22
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2240      	movs	r2, #64	; 0x40
 80020b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80020c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4a5b      	ldr	r2, [pc, #364]	; (8002244 <HAL_I2C_Mem_Read+0x228>)
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020da:	88f8      	ldrh	r0, [r7, #6]
 80020dc:	893a      	ldrh	r2, [r7, #8]
 80020de:	8979      	ldrh	r1, [r7, #10]
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	4603      	mov	r3, r0
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f001 fdca 	bl	8003c84 <I2C_RequestMemoryRead>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e1b0      	b.n	800245c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d113      	bne.n	800212a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002102:	2300      	movs	r3, #0
 8002104:	623b      	str	r3, [r7, #32]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	623b      	str	r3, [r7, #32]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	623b      	str	r3, [r7, #32]
 8002116:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e184      	b.n	8002434 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212e:	2b01      	cmp	r3, #1
 8002130:	d11b      	bne.n	800216a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002140:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e164      	b.n	8002434 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	2b02      	cmp	r3, #2
 8002170:	d11b      	bne.n	80021aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002180:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002190:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	e144      	b.n	8002434 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80021c0:	e138      	b.n	8002434 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	f200 80f1 	bhi.w	80023ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d123      	bne.n	800221c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f002 f810 	bl	80041fe <I2C_WaitOnRXNEFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e139      	b.n	800245c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691a      	ldr	r2, [r3, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002210:	b29b      	uxth	r3, r3
 8002212:	3b01      	subs	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	855a      	strh	r2, [r3, #42]	; 0x2a
 800221a:	e10b      	b.n	8002434 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002220:	2b02      	cmp	r3, #2
 8002222:	d14e      	bne.n	80022c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222a:	2200      	movs	r2, #0
 800222c:	4906      	ldr	r1, [pc, #24]	; (8002248 <HAL_I2C_Mem_Read+0x22c>)
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f001 fe8d 	bl	8003f4e <I2C_WaitOnFlagUntilTimeout>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e10e      	b.n	800245c <HAL_I2C_Mem_Read+0x440>
 800223e:	bf00      	nop
 8002240:	00100002 	.word	0x00100002
 8002244:	ffff0000 	.word	0xffff0000
 8002248:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800225a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022c0:	e0b8      	b.n	8002434 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c8:	2200      	movs	r2, #0
 80022ca:	4966      	ldr	r1, [pc, #408]	; (8002464 <HAL_I2C_Mem_Read+0x448>)
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f001 fe3e 	bl	8003f4e <I2C_WaitOnFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0bf      	b.n	800245c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002324:	2200      	movs	r2, #0
 8002326:	494f      	ldr	r1, [pc, #316]	; (8002464 <HAL_I2C_Mem_Read+0x448>)
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f001 fe10 	bl	8003f4e <I2C_WaitOnFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e091      	b.n	800245c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002346:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023ac:	e042      	b.n	8002434 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f001 ff23 	bl	80041fe <I2C_WaitOnRXNEFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e04c      	b.n	800245c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d118      	bne.n	8002434 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002438:	2b00      	cmp	r3, #0
 800243a:	f47f aec2 	bne.w	80021c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2220      	movs	r2, #32
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	e000      	b.n	800245c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800245a:	2302      	movs	r3, #2
  }
}
 800245c:	4618      	mov	r0, r3
 800245e:	3728      	adds	r7, #40	; 0x28
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	00010004 	.word	0x00010004

08002468 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08a      	sub	sp, #40	; 0x28
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	460b      	mov	r3, r1
 8002476:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7fe fcb2 	bl	8000de0 <HAL_GetTick>
 800247c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800247e:	2301      	movs	r3, #1
 8002480:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b20      	cmp	r3, #32
 800248c:	f040 8110 	bne.w	80026b0 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2319      	movs	r3, #25
 8002496:	2201      	movs	r2, #1
 8002498:	4988      	ldr	r1, [pc, #544]	; (80026bc <HAL_I2C_IsDeviceReady+0x254>)
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f001 fd57 	bl	8003f4e <I2C_WaitOnFlagUntilTimeout>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80024a6:	2302      	movs	r3, #2
 80024a8:	e103      	b.n	80026b2 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_I2C_IsDeviceReady+0x50>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e0fc      	b.n	80026b2 <HAL_I2C_IsDeviceReady+0x24a>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d007      	beq.n	80024de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0201 	orr.w	r2, r2, #1
 80024dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2224      	movs	r2, #36	; 0x24
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4a70      	ldr	r2, [pc, #448]	; (80026c0 <HAL_I2C_IsDeviceReady+0x258>)
 8002500:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002510:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2200      	movs	r2, #0
 800251a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f001 fd15 	bl	8003f4e <I2C_WaitOnFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00c      	beq.n	8002544 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800253e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e0b6      	b.n	80026b2 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002544:	897b      	ldrh	r3, [r7, #10]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002552:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002554:	f7fe fc44 	bl	8000de0 <HAL_GetTick>
 8002558:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b02      	cmp	r3, #2
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800257a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257e:	bf0c      	ite	eq
 8002580:	2301      	moveq	r3, #1
 8002582:	2300      	movne	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002588:	e025      	b.n	80025d6 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800258a:	f7fe fc29 	bl	8000de0 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d302      	bcc.n	80025a0 <HAL_I2C_IsDeviceReady+0x138>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d103      	bne.n	80025a8 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	22a0      	movs	r2, #160	; 0xa0
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	bf0c      	ite	eq
 80025b6:	2301      	moveq	r3, #1
 80025b8:	2300      	movne	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025cc:	bf0c      	ite	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	2300      	movne	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2ba0      	cmp	r3, #160	; 0xa0
 80025e0:	d005      	beq.n	80025ee <HAL_I2C_IsDeviceReady+0x186>
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <HAL_I2C_IsDeviceReady+0x186>
 80025e8:	7dbb      	ldrb	r3, [r7, #22]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0cd      	beq.n	800258a <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b02      	cmp	r3, #2
 8002602:	d129      	bne.n	8002658 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002612:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002614:	2300      	movs	r3, #0
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2319      	movs	r3, #25
 8002630:	2201      	movs	r2, #1
 8002632:	4922      	ldr	r1, [pc, #136]	; (80026bc <HAL_I2C_IsDeviceReady+0x254>)
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f001 fc8a 	bl	8003f4e <I2C_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e036      	b.n	80026b2 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	e02c      	b.n	80026b2 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002666:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002670:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2319      	movs	r3, #25
 8002678:	2201      	movs	r2, #1
 800267a:	4910      	ldr	r1, [pc, #64]	; (80026bc <HAL_I2C_IsDeviceReady+0x254>)
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f001 fc66 	bl	8003f4e <I2C_WaitOnFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e012      	b.n	80026b2 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	3301      	adds	r3, #1
 8002690:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	429a      	cmp	r2, r3
 8002698:	f4ff af33 	bcc.w	8002502 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2220      	movs	r2, #32
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 80026b0:	2302      	movs	r3, #2
  }
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	00100002 	.word	0x00100002
 80026c0:	ffff0000 	.word	0xffff0000

080026c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	2b10      	cmp	r3, #16
 80026f2:	d003      	beq.n	80026fc <HAL_I2C_EV_IRQHandler+0x38>
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	2b40      	cmp	r3, #64	; 0x40
 80026f8:	f040 80b6 	bne.w	8002868 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10d      	bne.n	8002732 <HAL_I2C_EV_IRQHandler+0x6e>
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800271c:	d003      	beq.n	8002726 <HAL_I2C_EV_IRQHandler+0x62>
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002724:	d101      	bne.n	800272a <HAL_I2C_EV_IRQHandler+0x66>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_I2C_EV_IRQHandler+0x68>
 800272a:	2300      	movs	r3, #0
 800272c:	2b01      	cmp	r3, #1
 800272e:	f000 8127 	beq.w	8002980 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00c      	beq.n	8002756 <HAL_I2C_EV_IRQHandler+0x92>
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	0a5b      	lsrs	r3, r3, #9
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d006      	beq.n	8002756 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f001 fddd 	bl	8004308 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fc75 	bl	800303e <I2C_Master_SB>
 8002754:	e087      	b.n	8002866 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	08db      	lsrs	r3, r3, #3
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_I2C_EV_IRQHandler+0xb2>
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	0a5b      	lsrs	r3, r3, #9
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fceb 	bl	800314a <I2C_Master_ADD10>
 8002774:	e077      	b.n	8002866 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	085b      	lsrs	r3, r3, #1
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d009      	beq.n	8002796 <HAL_I2C_EV_IRQHandler+0xd2>
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	0a5b      	lsrs	r3, r3, #9
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fd05 	bl	800319e <I2C_Master_ADDR>
 8002794:	e067      	b.n	8002866 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	089b      	lsrs	r3, r3, #2
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d030      	beq.n	8002804 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027b0:	f000 80e8 	beq.w	8002984 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	09db      	lsrs	r3, r3, #7
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00f      	beq.n	80027e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	0a9b      	lsrs	r3, r3, #10
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d009      	beq.n	80027e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d103      	bne.n	80027e0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f941 	bl	8002a60 <I2C_MasterTransmit_TXE>
 80027de:	e042      	b.n	8002866 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80cb 	beq.w	8002984 <HAL_I2C_EV_IRQHandler+0x2c0>
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	0a5b      	lsrs	r3, r3, #9
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80c4 	beq.w	8002984 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f9cb 	bl	8002b98 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002802:	e0bf      	b.n	8002984 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800280e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002812:	f000 80b7 	beq.w	8002984 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	099b      	lsrs	r3, r3, #6
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00f      	beq.n	8002842 <HAL_I2C_EV_IRQHandler+0x17e>
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	0a9b      	lsrs	r3, r3, #10
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <HAL_I2C_EV_IRQHandler+0x17e>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	089b      	lsrs	r3, r3, #2
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d103      	bne.n	8002842 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fa93 	bl	8002d66 <I2C_MasterReceive_RXNE>
 8002840:	e011      	b.n	8002866 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	089b      	lsrs	r3, r3, #2
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 809a 	beq.w	8002984 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	0a5b      	lsrs	r3, r3, #9
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8093 	beq.w	8002984 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fb03 	bl	8002e6a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002864:	e08e      	b.n	8002984 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002866:	e08d      	b.n	8002984 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	2b00      	cmp	r3, #0
 800286e:	d004      	beq.n	800287a <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	61fb      	str	r3, [r7, #28]
 8002878:	e007      	b.n	800288a <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	085b      	lsrs	r3, r3, #1
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d012      	beq.n	80028bc <HAL_I2C_EV_IRQHandler+0x1f8>
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	0a5b      	lsrs	r3, r3, #9
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00c      	beq.n	80028bc <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80028b2:	69b9      	ldr	r1, [r7, #24]
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fec1 	bl	800363c <I2C_Slave_ADDR>
 80028ba:	e066      	b.n	800298a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d009      	beq.n	80028dc <HAL_I2C_EV_IRQHandler+0x218>
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	0a5b      	lsrs	r3, r3, #9
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fef5 	bl	80036c4 <I2C_Slave_STOPF>
 80028da:	e056      	b.n	800298a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80028dc:	7bbb      	ldrb	r3, [r7, #14]
 80028de:	2b21      	cmp	r3, #33	; 0x21
 80028e0:	d002      	beq.n	80028e8 <HAL_I2C_EV_IRQHandler+0x224>
 80028e2:	7bbb      	ldrb	r3, [r7, #14]
 80028e4:	2b29      	cmp	r3, #41	; 0x29
 80028e6:	d125      	bne.n	8002934 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	09db      	lsrs	r3, r3, #7
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00f      	beq.n	8002914 <HAL_I2C_EV_IRQHandler+0x250>
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	0a9b      	lsrs	r3, r3, #10
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d009      	beq.n	8002914 <HAL_I2C_EV_IRQHandler+0x250>
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	089b      	lsrs	r3, r3, #2
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 fdd7 	bl	80034c0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002912:	e039      	b.n	8002988 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d033      	beq.n	8002988 <HAL_I2C_EV_IRQHandler+0x2c4>
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	0a5b      	lsrs	r3, r3, #9
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d02d      	beq.n	8002988 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fe04 	bl	800353a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002932:	e029      	b.n	8002988 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	099b      	lsrs	r3, r3, #6
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00f      	beq.n	8002960 <HAL_I2C_EV_IRQHandler+0x29c>
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	0a9b      	lsrs	r3, r3, #10
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d009      	beq.n	8002960 <HAL_I2C_EV_IRQHandler+0x29c>
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d103      	bne.n	8002960 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fe0f 	bl	800357c <I2C_SlaveReceive_RXNE>
 800295e:	e014      	b.n	800298a <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00e      	beq.n	800298a <HAL_I2C_EV_IRQHandler+0x2c6>
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	0a5b      	lsrs	r3, r3, #9
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fe3d 	bl	80035f8 <I2C_SlaveReceive_BTF>
 800297e:	e004      	b.n	800298a <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8002980:	bf00      	nop
 8002982:	e002      	b.n	800298a <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002984:	bf00      	nop
 8002986:	e000      	b.n	800298a <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002988:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	70fb      	strb	r3, [r7, #3]
 80029ec:	4613      	mov	r3, r2
 80029ee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a76:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d150      	bne.n	8002b28 <I2C_MasterTransmit_TXE+0xc8>
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	2b21      	cmp	r3, #33	; 0x21
 8002a8a:	d14d      	bne.n	8002b28 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d01d      	beq.n	8002ace <I2C_MasterTransmit_TXE+0x6e>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d01a      	beq.n	8002ace <I2C_MasterTransmit_TXE+0x6e>
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a9e:	d016      	beq.n	8002ace <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aae:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2211      	movs	r2, #17
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ff62 	bl	8002990 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002acc:	e060      	b.n	8002b90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002adc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aec:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b40      	cmp	r3, #64	; 0x40
 8002b06:	d107      	bne.n	8002b18 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff7d 	bl	8002a10 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b16:	e03b      	b.n	8002b90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff ff35 	bl	8002990 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b26:	e033      	b.n	8002b90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b21      	cmp	r3, #33	; 0x21
 8002b2c:	d005      	beq.n	8002b3a <I2C_MasterTransmit_TXE+0xda>
 8002b2e:	7bbb      	ldrb	r3, [r7, #14]
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d12d      	bne.n	8002b90 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	2b22      	cmp	r3, #34	; 0x22
 8002b38:	d12a      	bne.n	8002b90 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d108      	bne.n	8002b56 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b52:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002b54:	e01c      	b.n	8002b90 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b40      	cmp	r3, #64	; 0x40
 8002b60:	d103      	bne.n	8002b6a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f898 	bl	8002c98 <I2C_MemoryTransmit_TXE_BTF>
}
 8002b68:	e012      	b.n	8002b90 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	781a      	ldrb	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b8e:	e7ff      	b.n	8002b90 <I2C_MasterTransmit_TXE+0x130>
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b21      	cmp	r3, #33	; 0x21
 8002bb0:	d165      	bne.n	8002c7e <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d012      	beq.n	8002be2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002be0:	e056      	b.n	8002c90 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d01d      	beq.n	8002c24 <I2C_MasterTransmit_BTF+0x8c>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d01a      	beq.n	8002c24 <I2C_MasterTransmit_BTF+0x8c>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bf4:	d016      	beq.n	8002c24 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c04:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2211      	movs	r2, #17
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff feb7 	bl	8002990 <HAL_I2C_MasterTxCpltCallback>
}
 8002c22:	e035      	b.n	8002c90 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c32:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c42:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d107      	bne.n	8002c6e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff fed2 	bl	8002a10 <HAL_I2C_MemTxCpltCallback>
}
 8002c6c:	e010      	b.n	8002c90 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff fe8a 	bl	8002990 <HAL_I2C_MasterTxCpltCallback>
}
 8002c7c:	e008      	b.n	8002c90 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d102      	bne.n	8002c90 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f804 	bl	8002c98 <I2C_MemoryTransmit_TXE_BTF>
}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d11d      	bne.n	8002ce4 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d10b      	bne.n	8002cc8 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc0:	1c9a      	adds	r2, r3, #2
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002cc6:	e048      	b.n	8002d5a <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	121b      	asrs	r3, r3, #8
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ce2:	e03a      	b.n	8002d5a <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d10b      	bne.n	8002d04 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002d02:	e02a      	b.n	8002d5a <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d126      	bne.n	8002d5a <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b22      	cmp	r3, #34	; 0x22
 8002d16:	d108      	bne.n	8002d2a <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d26:	601a      	str	r2, [r3, #0]
}
 8002d28:	e017      	b.n	8002d5a <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b21      	cmp	r3, #33	; 0x21
 8002d34:	d111      	bne.n	8002d5a <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	781a      	ldrb	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b22      	cmp	r3, #34	; 0x22
 8002d78:	d173      	bne.n	8002e62 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d920      	bls.n	8002dca <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d154      	bne.n	8002e62 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002dc8:	e04b      	b.n	8002e62 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d047      	beq.n	8002e62 <I2C_MasterReceive_RXNE+0xfc>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d002      	beq.n	8002dde <I2C_MasterReceive_RXNE+0x78>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d141      	bne.n	8002e62 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dec:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dfc:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b40      	cmp	r3, #64	; 0x40
 8002e36:	d10a      	bne.n	8002e4e <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff fdec 	bl	8002a24 <HAL_I2C_MemRxCpltCallback>
}
 8002e4c:	e009      	b.n	8002e62 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2212      	movs	r2, #18
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fda1 	bl	80029a4 <HAL_I2C_MasterRxCpltCallback>
}
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d11b      	bne.n	8002eba <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e90:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002eb8:	e0bd      	b.n	8003036 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d129      	bne.n	8002f18 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d00a      	beq.n	8002ef0 <I2C_MasterReceive_BTF+0x86>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d007      	beq.n	8002ef0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f16:	e08e      	b.n	8003036 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d176      	bne.n	8003010 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d002      	beq.n	8002f2e <I2C_MasterReceive_BTF+0xc4>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b10      	cmp	r3, #16
 8002f2c:	d108      	bne.n	8002f40 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	e019      	b.n	8002f74 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d002      	beq.n	8002f4c <I2C_MasterReceive_BTF+0xe2>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d108      	bne.n	8002f5e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	e00a      	b.n	8002f74 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b10      	cmp	r3, #16
 8002f62:	d007      	beq.n	8002f74 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f72:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002fce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b40      	cmp	r3, #64	; 0x40
 8002fe2:	d10a      	bne.n	8002ffa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff fd16 	bl	8002a24 <HAL_I2C_MemRxCpltCallback>
}
 8002ff8:	e01d      	b.n	8003036 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2212      	movs	r2, #18
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff fccb 	bl	80029a4 <HAL_I2C_MasterRxCpltCallback>
}
 800300e:	e012      	b.n	8003036 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003036:	bf00      	nop
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b40      	cmp	r3, #64	; 0x40
 8003050:	d117      	bne.n	8003082 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	b2db      	uxtb	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800306a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800306c:	e067      	b.n	800313e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	b2da      	uxtb	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	611a      	str	r2, [r3, #16]
}
 8003080:	e05d      	b.n	800313e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800308a:	d133      	bne.n	80030f4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b21      	cmp	r3, #33	; 0x21
 8003096:	d109      	bne.n	80030ac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309c:	b2db      	uxtb	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030a8:	611a      	str	r2, [r3, #16]
 80030aa:	e008      	b.n	80030be <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d004      	beq.n	80030d0 <I2C_Master_SB+0x92>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d108      	bne.n	80030e2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d032      	beq.n	800313e <I2C_Master_SB+0x100>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d02d      	beq.n	800313e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f0:	605a      	str	r2, [r3, #4]
}
 80030f2:	e024      	b.n	800313e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10e      	bne.n	800311a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	b29b      	uxth	r3, r3
 8003102:	11db      	asrs	r3, r3, #7
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f003 0306 	and.w	r3, r3, #6
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f063 030f 	orn	r3, r3, #15
 8003110:	b2da      	uxtb	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	611a      	str	r2, [r3, #16]
}
 8003118:	e011      	b.n	800313e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311e:	2b01      	cmp	r3, #1
 8003120:	d10d      	bne.n	800313e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	b29b      	uxth	r3, r3
 8003128:	11db      	asrs	r3, r3, #7
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f003 0306 	and.w	r3, r3, #6
 8003130:	b2db      	uxtb	r3, r3
 8003132:	f063 030e 	orn	r3, r3, #14
 8003136:	b2da      	uxtb	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	611a      	str	r2, [r3, #16]
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	b2da      	uxtb	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003162:	2b00      	cmp	r3, #0
 8003164:	d103      	bne.n	800316e <I2C_Master_ADD10+0x24>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	2b00      	cmp	r3, #0
 800316c:	d011      	beq.n	8003192 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d104      	bne.n	8003182 <I2C_Master_ADD10+0x38>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003190:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800319e:	b480      	push	{r7}
 80031a0:	b091      	sub	sp, #68	; 0x44
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b22      	cmp	r3, #34	; 0x22
 80031c6:	f040 8169 	bne.w	800349c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10f      	bne.n	80031f2 <I2C_Master_ADDR+0x54>
 80031d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80031d6:	2b40      	cmp	r3, #64	; 0x40
 80031d8:	d10b      	bne.n	80031f2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031da:	2300      	movs	r3, #0
 80031dc:	633b      	str	r3, [r7, #48]	; 0x30
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	633b      	str	r3, [r7, #48]	; 0x30
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	633b      	str	r3, [r7, #48]	; 0x30
 80031ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f0:	e160      	b.n	80034b4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11d      	bne.n	8003236 <I2C_Master_ADDR+0x98>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003202:	d118      	bne.n	8003236 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003204:	2300      	movs	r3, #0
 8003206:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003218:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003228:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	651a      	str	r2, [r3, #80]	; 0x50
 8003234:	e13e      	b.n	80034b4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d113      	bne.n	8003268 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003240:	2300      	movs	r3, #0
 8003242:	62bb      	str	r3, [r7, #40]	; 0x28
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e115      	b.n	8003494 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b01      	cmp	r3, #1
 8003270:	f040 808a 	bne.w	8003388 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003276:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800327a:	d137      	bne.n	80032ec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800329a:	d113      	bne.n	80032c4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032aa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ac:	2300      	movs	r3, #0
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	e0e7      	b.n	8003494 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c4:	2300      	movs	r3, #0
 80032c6:	623b      	str	r3, [r7, #32]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	623b      	str	r3, [r7, #32]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	623b      	str	r3, [r7, #32]
 80032d8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	e0d3      	b.n	8003494 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80032ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d02e      	beq.n	8003350 <I2C_Master_ADDR+0x1b2>
 80032f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f4:	2b20      	cmp	r3, #32
 80032f6:	d02b      	beq.n	8003350 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80032f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fa:	2b12      	cmp	r3, #18
 80032fc:	d102      	bne.n	8003304 <I2C_Master_ADDR+0x166>
 80032fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003300:	2b01      	cmp	r3, #1
 8003302:	d125      	bne.n	8003350 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003306:	2b04      	cmp	r3, #4
 8003308:	d00e      	beq.n	8003328 <I2C_Master_ADDR+0x18a>
 800330a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330c:	2b02      	cmp	r3, #2
 800330e:	d00b      	beq.n	8003328 <I2C_Master_ADDR+0x18a>
 8003310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003312:	2b10      	cmp	r3, #16
 8003314:	d008      	beq.n	8003328 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	e007      	b.n	8003338 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003336:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003338:	2300      	movs	r3, #0
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	61fb      	str	r3, [r7, #28]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	61fb      	str	r3, [r7, #28]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	e0a1      	b.n	8003494 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003360:	2300      	movs	r3, #0
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	e085      	b.n	8003494 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d14d      	bne.n	800342e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003394:	2b04      	cmp	r3, #4
 8003396:	d016      	beq.n	80033c6 <I2C_Master_ADDR+0x228>
 8003398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339a:	2b02      	cmp	r3, #2
 800339c:	d013      	beq.n	80033c6 <I2C_Master_ADDR+0x228>
 800339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d010      	beq.n	80033c6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e007      	b.n	80033d6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033d4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e4:	d117      	bne.n	8003416 <I2C_Master_ADDR+0x278>
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033ec:	d00b      	beq.n	8003406 <I2C_Master_ADDR+0x268>
 80033ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d008      	beq.n	8003406 <I2C_Master_ADDR+0x268>
 80033f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d005      	beq.n	8003406 <I2C_Master_ADDR+0x268>
 80033fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	d002      	beq.n	8003406 <I2C_Master_ADDR+0x268>
 8003400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003402:	2b20      	cmp	r3, #32
 8003404:	d107      	bne.n	8003416 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003414:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	e032      	b.n	8003494 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800343c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800344c:	d117      	bne.n	800347e <I2C_Master_ADDR+0x2e0>
 800344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003450:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003454:	d00b      	beq.n	800346e <I2C_Master_ADDR+0x2d0>
 8003456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003458:	2b01      	cmp	r3, #1
 800345a:	d008      	beq.n	800346e <I2C_Master_ADDR+0x2d0>
 800345c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345e:	2b08      	cmp	r3, #8
 8003460:	d005      	beq.n	800346e <I2C_Master_ADDR+0x2d0>
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	2b10      	cmp	r3, #16
 8003466:	d002      	beq.n	800346e <I2C_Master_ADDR+0x2d0>
 8003468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346a:	2b20      	cmp	r3, #32
 800346c:	d107      	bne.n	800347e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800347c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347e:	2300      	movs	r3, #0
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800349a:	e00b      	b.n	80034b4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
}
 80034b2:	e7ff      	b.n	80034b4 <I2C_Master_ADDR+0x316>
 80034b4:	bf00      	nop
 80034b6:	3744      	adds	r7, #68	; 0x44
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d02b      	beq.n	8003532 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	781a      	ldrb	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d114      	bne.n	8003532 <I2C_SlaveTransmit_TXE+0x72>
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	2b29      	cmp	r3, #41	; 0x29
 800350c:	d111      	bne.n	8003532 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800351c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2221      	movs	r2, #33	; 0x21
 8003522:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2228      	movs	r2, #40	; 0x28
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff fa43 	bl	80029b8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d011      	beq.n	8003570 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d02c      	beq.n	80035f0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d114      	bne.n	80035f0 <I2C_SlaveReceive_RXNE+0x74>
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
 80035c8:	2b2a      	cmp	r3, #42	; 0x2a
 80035ca:	d111      	bne.n	80035f0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2222      	movs	r2, #34	; 0x22
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2228      	movs	r2, #40	; 0x28
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff f9ee 	bl	80029cc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80035f0:	bf00      	nop
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d012      	beq.n	8003630 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003656:	2b28      	cmp	r3, #40	; 0x28
 8003658:	d127      	bne.n	80036aa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003668:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	089b      	lsrs	r3, r3, #2
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	09db      	lsrs	r3, r3, #7
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d103      	bne.n	800368e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	81bb      	strh	r3, [r7, #12]
 800368c:	e002      	b.n	8003694 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800369c:	89ba      	ldrh	r2, [r7, #12]
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	4619      	mov	r1, r3
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff f99c 	bl	80029e0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80036a8:	e008      	b.n	80036bc <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f06f 0202 	mvn.w	r2, #2
 80036b2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80036bc:	bf00      	nop
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036e2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80036e4:	2300      	movs	r3, #0
 80036e6:	60bb      	str	r3, [r7, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003710:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800371c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003720:	d172      	bne.n	8003808 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	2b22      	cmp	r3, #34	; 0x22
 8003726:	d002      	beq.n	800372e <I2C_Slave_STOPF+0x6a>
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	2b2a      	cmp	r3, #42	; 0x2a
 800372c:	d135      	bne.n	800379a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	b29a      	uxth	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f043 0204 	orr.w	r2, r3, #4
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003760:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd ff9c 	bl	80016a4 <HAL_DMA_GetState>
 800376c:	4603      	mov	r3, r0
 800376e:	2b01      	cmp	r3, #1
 8003770:	d049      	beq.n	8003806 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	4a69      	ldr	r2, [pc, #420]	; (800391c <I2C_Slave_STOPF+0x258>)
 8003778:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	4618      	mov	r0, r3
 8003780:	f7fd fde4 	bl	800134c <HAL_DMA_Abort_IT>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d03d      	beq.n	8003806 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003794:	4610      	mov	r0, r2
 8003796:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003798:	e035      	b.n	8003806 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f043 0204 	orr.w	r2, r3, #4
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fd ff66 	bl	80016a4 <HAL_DMA_GetState>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d014      	beq.n	8003808 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e2:	4a4e      	ldr	r2, [pc, #312]	; (800391c <I2C_Slave_STOPF+0x258>)
 80037e4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fd fdae 	bl	800134c <HAL_DMA_Abort_IT>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d008      	beq.n	8003808 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003800:	4610      	mov	r0, r2
 8003802:	4798      	blx	r3
 8003804:	e000      	b.n	8003808 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003806:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d03e      	beq.n	8003890 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b04      	cmp	r3, #4
 800381e:	d112      	bne.n	8003846 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003850:	2b40      	cmp	r3, #64	; 0x40
 8003852:	d112      	bne.n	800387a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	f043 0204 	orr.w	r2, r3, #4
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f843 	bl	8003924 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800389e:	e039      	b.n	8003914 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b2a      	cmp	r3, #42	; 0x2a
 80038a4:	d109      	bne.n	80038ba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2228      	movs	r2, #40	; 0x28
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff f889 	bl	80029cc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b28      	cmp	r3, #40	; 0x28
 80038c4:	d111      	bne.n	80038ea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a15      	ldr	r2, [pc, #84]	; (8003920 <I2C_Slave_STOPF+0x25c>)
 80038ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff f88a 	bl	80029fc <HAL_I2C_ListenCpltCallback>
}
 80038e8:	e014      	b.n	8003914 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	2b22      	cmp	r3, #34	; 0x22
 80038f0:	d002      	beq.n	80038f8 <I2C_Slave_STOPF+0x234>
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	2b22      	cmp	r3, #34	; 0x22
 80038f6:	d10d      	bne.n	8003914 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff f85c 	bl	80029cc <HAL_I2C_SlaveRxCpltCallback>
}
 8003914:	bf00      	nop
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	08003e51 	.word	0x08003e51
 8003920:	ffff0000 	.word	0xffff0000

08003924 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003932:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b10      	cmp	r3, #16
 800393e:	d10a      	bne.n	8003956 <I2C_ITError+0x32>
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b22      	cmp	r3, #34	; 0x22
 8003944:	d107      	bne.n	8003956 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003954:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800395c:	2b28      	cmp	r3, #40	; 0x28
 800395e:	d107      	bne.n	8003970 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2228      	movs	r2, #40	; 0x28
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800396e:	e015      	b.n	800399c <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800397a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800397e:	d006      	beq.n	800398e <I2C_ITError+0x6a>
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	2b60      	cmp	r3, #96	; 0x60
 8003984:	d003      	beq.n	800398e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039aa:	d162      	bne.n	8003a72 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d020      	beq.n	8003a0c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ce:	4a6a      	ldr	r2, [pc, #424]	; (8003b78 <I2C_ITError+0x254>)
 80039d0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fd fcb8 	bl	800134c <HAL_DMA_Abort_IT>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 8089 	beq.w	8003af6 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0201 	bic.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a06:	4610      	mov	r0, r2
 8003a08:	4798      	blx	r3
 8003a0a:	e074      	b.n	8003af6 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a10:	4a59      	ldr	r2, [pc, #356]	; (8003b78 <I2C_ITError+0x254>)
 8003a12:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fd fc97 	bl	800134c <HAL_DMA_Abort_IT>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d068      	beq.n	8003af6 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	d10b      	bne.n	8003a4a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0201 	bic.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4798      	blx	r3
 8003a70:	e041      	b.n	8003af6 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b60      	cmp	r3, #96	; 0x60
 8003a7c:	d125      	bne.n	8003aca <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d10b      	bne.n	8003ab2 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0201 	bic.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fe ffc2 	bl	8002a4c <HAL_I2C_AbortCpltCallback>
 8003ac8:	e015      	b.n	8003af6 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	2b40      	cmp	r3, #64	; 0x40
 8003ad6:	d10b      	bne.n	8003af0 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7fe ffa1 	bl	8002a38 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10e      	bne.n	8003b24 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d104      	bne.n	8003b24 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b32:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d113      	bne.n	8003b70 <I2C_ITError+0x24c>
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	2b28      	cmp	r3, #40	; 0x28
 8003b4c:	d110      	bne.n	8003b70 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <I2C_ITError+0x258>)
 8003b52:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fe ff46 	bl	80029fc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b70:	bf00      	nop
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	08003e51 	.word	0x08003e51
 8003b7c:	ffff0000 	.word	0xffff0000

08003b80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d006      	beq.n	8003baa <I2C_MasterRequestWrite+0x2a>
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d003      	beq.n	8003baa <I2C_MasterRequestWrite+0x2a>
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ba8:	d108      	bne.n	8003bbc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e00b      	b.n	8003bd4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	2b12      	cmp	r3, #18
 8003bc2:	d107      	bne.n	8003bd4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f9b4 	bl	8003f4e <I2C_WaitOnFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00c      	beq.n	8003c06 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e035      	b.n	8003c72 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c0e:	d108      	bne.n	8003c22 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c10:	897b      	ldrh	r3, [r7, #10]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c1e:	611a      	str	r2, [r3, #16]
 8003c20:	e01b      	b.n	8003c5a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c22:	897b      	ldrh	r3, [r7, #10]
 8003c24:	11db      	asrs	r3, r3, #7
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f003 0306 	and.w	r3, r3, #6
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f063 030f 	orn	r3, r3, #15
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	490f      	ldr	r1, [pc, #60]	; (8003c7c <I2C_MasterRequestWrite+0xfc>)
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f9db 	bl	8003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e010      	b.n	8003c72 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c50:	897b      	ldrh	r3, [r7, #10]
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	4908      	ldr	r1, [pc, #32]	; (8003c80 <I2C_MasterRequestWrite+0x100>)
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f9cb 	bl	8003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	00010008 	.word	0x00010008
 8003c80:	00010002 	.word	0x00010002

08003c84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	4608      	mov	r0, r1
 8003c8e:	4611      	mov	r1, r2
 8003c90:	461a      	mov	r2, r3
 8003c92:	4603      	mov	r3, r0
 8003c94:	817b      	strh	r3, [r7, #10]
 8003c96:	460b      	mov	r3, r1
 8003c98:	813b      	strh	r3, [r7, #8]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f93f 	bl	8003f4e <I2C_WaitOnFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00c      	beq.n	8003cf0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e0a9      	b.n	8003e44 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cf0:	897b      	ldrh	r3, [r7, #10]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cfe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	6a3a      	ldr	r2, [r7, #32]
 8003d04:	4951      	ldr	r1, [pc, #324]	; (8003e4c <I2C_RequestMemoryRead+0x1c8>)
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f978 	bl	8003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e096      	b.n	8003e44 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2e:	6a39      	ldr	r1, [r7, #32]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f9e2 	bl	80040fa <I2C_WaitOnTXEFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00d      	beq.n	8003d58 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d107      	bne.n	8003d54 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e075      	b.n	8003e44 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d105      	bne.n	8003d6a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d5e:	893b      	ldrh	r3, [r7, #8]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	611a      	str	r2, [r3, #16]
 8003d68:	e021      	b.n	8003dae <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d6a:	893b      	ldrh	r3, [r7, #8]
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	6a39      	ldr	r1, [r7, #32]
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f9bc 	bl	80040fa <I2C_WaitOnTXEFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00d      	beq.n	8003da4 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d107      	bne.n	8003da0 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e04f      	b.n	8003e44 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003da4:	893b      	ldrh	r3, [r7, #8]
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db0:	6a39      	ldr	r1, [r7, #32]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f9a1 	bl	80040fa <I2C_WaitOnTXEFlagUntilTimeout>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00d      	beq.n	8003dda <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d107      	bne.n	8003dd6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e034      	b.n	8003e44 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003de8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f8a9 	bl	8003f4e <I2C_WaitOnFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00c      	beq.n	8003e1c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e013      	b.n	8003e44 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e1c:	897b      	ldrh	r3, [r7, #10]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	6a3a      	ldr	r2, [r7, #32]
 8003e30:	4906      	ldr	r1, [pc, #24]	; (8003e4c <I2C_RequestMemoryRead+0x1c8>)
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f8e2 	bl	8003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	00010002 	.word	0x00010002

08003e50 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e64:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e72:	2200      	movs	r2, #0
 8003e74:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	2200      	movs	r2, #0
 8003e84:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e94:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	2200      	movs	r2, #0
 8003eba:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0201 	bic.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b60      	cmp	r3, #96	; 0x60
 8003ed6:	d10e      	bne.n	8003ef6 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f7fe fdac 	bl	8002a4c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ef4:	e027      	b.n	8003f46 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ef6:	7afb      	ldrb	r3, [r7, #11]
 8003ef8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003efc:	2b28      	cmp	r3, #40	; 0x28
 8003efe:	d117      	bne.n	8003f30 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f1e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2228      	movs	r2, #40	; 0x28
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f2e:	e007      	b.n	8003f40 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7fe fd79 	bl	8002a38 <HAL_I2C_ErrorCallback>
}
 8003f46:	bf00      	nop
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f5e:	e025      	b.n	8003fac <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d021      	beq.n	8003fac <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f68:	f7fc ff3a 	bl	8000de0 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d302      	bcc.n	8003f7e <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d116      	bne.n	8003fac <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f043 0220 	orr.w	r2, r3, #32
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e023      	b.n	8003ff4 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	0c1b      	lsrs	r3, r3, #16
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d10d      	bne.n	8003fd2 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	43da      	mvns	r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	e00c      	b.n	8003fec <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	43da      	mvns	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bf0c      	ite	eq
 8003fe4:	2301      	moveq	r3, #1
 8003fe6:	2300      	movne	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d0b6      	beq.n	8003f60 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800400a:	e051      	b.n	80040b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401a:	d123      	bne.n	8004064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004034:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	f043 0204 	orr.w	r2, r3, #4
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e046      	b.n	80040f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406a:	d021      	beq.n	80040b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800406c:	f7fc feb8 	bl	8000de0 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	429a      	cmp	r2, r3
 800407a:	d302      	bcc.n	8004082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d116      	bne.n	80040b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e020      	b.n	80040f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	0c1b      	lsrs	r3, r3, #16
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d10c      	bne.n	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	43da      	mvns	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4013      	ands	r3, r2
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf14      	ite	ne
 80040cc:	2301      	movne	r3, #1
 80040ce:	2300      	moveq	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	e00b      	b.n	80040ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	43da      	mvns	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	4013      	ands	r3, r2
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bf14      	ite	ne
 80040e6:	2301      	movne	r3, #1
 80040e8:	2300      	moveq	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d18d      	bne.n	800400c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004106:	e02d      	b.n	8004164 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f8ce 	bl	80042aa <I2C_IsAcknowledgeFailed>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e02d      	b.n	8004174 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411e:	d021      	beq.n	8004164 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004120:	f7fc fe5e 	bl	8000de0 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	429a      	cmp	r2, r3
 800412e:	d302      	bcc.n	8004136 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d116      	bne.n	8004164 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	f043 0220 	orr.w	r2, r3, #32
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e007      	b.n	8004174 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416e:	2b80      	cmp	r3, #128	; 0x80
 8004170:	d1ca      	bne.n	8004108 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004188:	e02d      	b.n	80041e6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f88d 	bl	80042aa <I2C_IsAcknowledgeFailed>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e02d      	b.n	80041f6 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d021      	beq.n	80041e6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a2:	f7fc fe1d 	bl	8000de0 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d302      	bcc.n	80041b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d116      	bne.n	80041e6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f043 0220 	orr.w	r2, r3, #32
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e007      	b.n	80041f6 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d1ca      	bne.n	800418a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800420a:	e042      	b.n	8004292 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b10      	cmp	r3, #16
 8004218:	d119      	bne.n	800424e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f06f 0210 	mvn.w	r2, #16
 8004222:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e029      	b.n	80042a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424e:	f7fc fdc7 	bl	8000de0 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	429a      	cmp	r2, r3
 800425c:	d302      	bcc.n	8004264 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d116      	bne.n	8004292 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	f043 0220 	orr.w	r2, r3, #32
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e007      	b.n	80042a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d1b5      	bne.n	800420c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c0:	d11b      	bne.n	80042fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f043 0204 	orr.w	r2, r3, #4
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004318:	d103      	bne.n	8004322 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004320:	e007      	b.n	8004332 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800432a:	d102      	bne.n	8004332 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2208      	movs	r2, #8
 8004330:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
	...

08004340 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e128      	b.n	80045a4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d109      	bne.n	8004372 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a90      	ldr	r2, [pc, #576]	; (80045ac <HAL_I2S_Init+0x26c>)
 800436a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f009 fb39 	bl	800d9e4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004388:	f023 030f 	bic.w	r3, r3, #15
 800438c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2202      	movs	r2, #2
 8004394:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d060      	beq.n	8004460 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d102      	bne.n	80043ac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80043a6:	2310      	movs	r3, #16
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	e001      	b.n	80043b0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80043ac:	2320      	movs	r3, #32
 80043ae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d802      	bhi.n	80043be <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80043be:	2001      	movs	r0, #1
 80043c0:	f002 fe3a 	bl	8007038 <HAL_RCCEx_GetPeriphCLKFreq>
 80043c4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ce:	d125      	bne.n	800441c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d010      	beq.n	80043fa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	461a      	mov	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f4:	3305      	adds	r3, #5
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	e01f      	b.n	800443a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	fbb2 f2f3 	udiv	r2, r2, r3
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	461a      	mov	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	fbb2 f3f3 	udiv	r3, r2, r3
 8004416:	3305      	adds	r3, #5
 8004418:	613b      	str	r3, [r7, #16]
 800441a:	e00e      	b.n	800443a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	fbb2 f2f3 	udiv	r2, r2, r3
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	461a      	mov	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	fbb2 f3f3 	udiv	r3, r2, r3
 8004436:	3305      	adds	r3, #5
 8004438:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4a5c      	ldr	r2, [pc, #368]	; (80045b0 <HAL_I2S_Init+0x270>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	08db      	lsrs	r3, r3, #3
 8004444:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	e003      	b.n	8004468 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004460:	2302      	movs	r3, #2
 8004462:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d902      	bls.n	8004474 <HAL_I2S_Init+0x134>
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	2bff      	cmp	r3, #255	; 0xff
 8004472:	d907      	bls.n	8004484 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	f043 0210 	orr.w	r2, r3, #16
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e08f      	b.n	80045a4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	ea42 0103 	orr.w	r1, r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	430a      	orrs	r2, r1
 8004496:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80044a2:	f023 030f 	bic.w	r3, r3, #15
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6851      	ldr	r1, [r2, #4]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6892      	ldr	r2, [r2, #8]
 80044ae:	4311      	orrs	r1, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	68d2      	ldr	r2, [r2, #12]
 80044b4:	4311      	orrs	r1, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6992      	ldr	r2, [r2, #24]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044c6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d161      	bne.n	8004594 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a38      	ldr	r2, [pc, #224]	; (80045b4 <HAL_I2S_Init+0x274>)
 80044d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a37      	ldr	r2, [pc, #220]	; (80045b8 <HAL_I2S_Init+0x278>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d101      	bne.n	80044e4 <HAL_I2S_Init+0x1a4>
 80044e0:	4b36      	ldr	r3, [pc, #216]	; (80045bc <HAL_I2S_Init+0x27c>)
 80044e2:	e001      	b.n	80044e8 <HAL_I2S_Init+0x1a8>
 80044e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6812      	ldr	r2, [r2, #0]
 80044ee:	4932      	ldr	r1, [pc, #200]	; (80045b8 <HAL_I2S_Init+0x278>)
 80044f0:	428a      	cmp	r2, r1
 80044f2:	d101      	bne.n	80044f8 <HAL_I2S_Init+0x1b8>
 80044f4:	4a31      	ldr	r2, [pc, #196]	; (80045bc <HAL_I2S_Init+0x27c>)
 80044f6:	e001      	b.n	80044fc <HAL_I2S_Init+0x1bc>
 80044f8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80044fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004500:	f023 030f 	bic.w	r3, r3, #15
 8004504:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a2b      	ldr	r2, [pc, #172]	; (80045b8 <HAL_I2S_Init+0x278>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d101      	bne.n	8004514 <HAL_I2S_Init+0x1d4>
 8004510:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <HAL_I2S_Init+0x27c>)
 8004512:	e001      	b.n	8004518 <HAL_I2S_Init+0x1d8>
 8004514:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004518:	2202      	movs	r2, #2
 800451a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a25      	ldr	r2, [pc, #148]	; (80045b8 <HAL_I2S_Init+0x278>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d101      	bne.n	800452a <HAL_I2S_Init+0x1ea>
 8004526:	4b25      	ldr	r3, [pc, #148]	; (80045bc <HAL_I2S_Init+0x27c>)
 8004528:	e001      	b.n	800452e <HAL_I2S_Init+0x1ee>
 800452a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800453a:	d003      	beq.n	8004544 <HAL_I2S_Init+0x204>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d103      	bne.n	800454c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004544:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	e001      	b.n	8004550 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800454c:	2300      	movs	r3, #0
 800454e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	b299      	uxth	r1, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004566:	4303      	orrs	r3, r0
 8004568:	b29b      	uxth	r3, r3
 800456a:	430b      	orrs	r3, r1
 800456c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800456e:	4313      	orrs	r3, r2
 8004570:	b29a      	uxth	r2, r3
 8004572:	897b      	ldrh	r3, [r7, #10]
 8004574:	4313      	orrs	r3, r2
 8004576:	b29b      	uxth	r3, r3
 8004578:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800457c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a0d      	ldr	r2, [pc, #52]	; (80045b8 <HAL_I2S_Init+0x278>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d101      	bne.n	800458c <HAL_I2S_Init+0x24c>
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <HAL_I2S_Init+0x27c>)
 800458a:	e001      	b.n	8004590 <HAL_I2S_Init+0x250>
 800458c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004590:	897a      	ldrh	r2, [r7, #10]
 8004592:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3720      	adds	r7, #32
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	08004c69 	.word	0x08004c69
 80045b0:	cccccccd 	.word	0xcccccccd
 80045b4:	08004df1 	.word	0x08004df1
 80045b8:	40003800 	.word	0x40003800
 80045bc:	40003400 	.word	0x40003400

080045c0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	4613      	mov	r3, r2
 80045cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_I2S_Transmit_DMA+0x1a>
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e08e      	b.n	80046fc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_I2S_Transmit_DMA+0x2e>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e086      	b.n	80046fc <HAL_I2S_Transmit_DMA+0x13c>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d005      	beq.n	800460e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800460a:	2302      	movs	r3, #2
 800460c:	e076      	b.n	80046fc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2203      	movs	r2, #3
 8004612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b03      	cmp	r3, #3
 8004632:	d002      	beq.n	800463a <HAL_I2S_Transmit_DMA+0x7a>
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2b05      	cmp	r3, #5
 8004638:	d10a      	bne.n	8004650 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800463a:	88fb      	ldrh	r3, [r7, #6]
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004644:	88fb      	ldrh	r3, [r7, #6]
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800464e:	e005      	b.n	800465c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	88fa      	ldrh	r2, [r7, #6]
 8004654:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	88fa      	ldrh	r2, [r7, #6]
 800465a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	4a28      	ldr	r2, [pc, #160]	; (8004704 <HAL_I2S_Transmit_DMA+0x144>)
 8004662:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	4a27      	ldr	r2, [pc, #156]	; (8004708 <HAL_I2S_Transmit_DMA+0x148>)
 800466a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	4a26      	ldr	r2, [pc, #152]	; (800470c <HAL_I2S_Transmit_DMA+0x14c>)
 8004672:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800467c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004684:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800468c:	f7fc fd96 	bl	80011bc <HAL_DMA_Start_IT>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00f      	beq.n	80046b6 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	f043 0208 	orr.w	r2, r3, #8
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e022      	b.n	80046fc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d107      	bne.n	80046d4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69da      	ldr	r2, [r3, #28]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046d2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d107      	bne.n	80046f2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0202 	orr.w	r2, r2, #2
 80046f0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	08004b47 	.word	0x08004b47
 8004708:	08004b05 	.word	0x08004b05
 800470c:	08004b63 	.word	0x08004b63

08004710 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004724:	d004      	beq.n	8004730 <HAL_I2S_DMAStop+0x20>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	f040 80d1 	bne.w	80048d2 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00f      	beq.n	8004758 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	4618      	mov	r0, r3
 800473e:	f7fc fd95 	bl	800126c <HAL_DMA_Abort>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474c:	f043 0208 	orr.w	r2, r3, #8
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8004758:	2364      	movs	r3, #100	; 0x64
 800475a:	2201      	movs	r2, #1
 800475c:	2102      	movs	r1, #2
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fb0c 	bl	8004d7c <I2S_WaitFlagStateUntilTimeout>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00b      	beq.n	8004782 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476e:	f043 0201 	orr.w	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8004782:	2364      	movs	r3, #100	; 0x64
 8004784:	2200      	movs	r2, #0
 8004786:	2180      	movs	r1, #128	; 0x80
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 faf7 	bl	8004d7c <I2S_WaitFlagStateUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00b      	beq.n	80047ac <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004798:	f043 0201 	orr.w	r2, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	69da      	ldr	r2, [r3, #28]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ba:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0202 	bic.w	r2, r2, #2
 80047d8:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b05      	cmp	r3, #5
 80047e4:	f040 8165 	bne.w	8004ab2 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00f      	beq.n	8004810 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fc fd39 	bl	800126c <HAL_DMA_Abort>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d007      	beq.n	8004810 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004804:	f043 0208 	orr.w	r2, r3, #8
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a8a      	ldr	r2, [pc, #552]	; (8004a40 <HAL_I2S_DMAStop+0x330>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d101      	bne.n	800481e <HAL_I2S_DMAStop+0x10e>
 800481a:	4b8a      	ldr	r3, [pc, #552]	; (8004a44 <HAL_I2S_DMAStop+0x334>)
 800481c:	e001      	b.n	8004822 <HAL_I2S_DMAStop+0x112>
 800481e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4985      	ldr	r1, [pc, #532]	; (8004a40 <HAL_I2S_DMAStop+0x330>)
 800482a:	428b      	cmp	r3, r1
 800482c:	d101      	bne.n	8004832 <HAL_I2S_DMAStop+0x122>
 800482e:	4b85      	ldr	r3, [pc, #532]	; (8004a44 <HAL_I2S_DMAStop+0x334>)
 8004830:	e001      	b.n	8004836 <HAL_I2S_DMAStop+0x126>
 8004832:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 800483c:	2300      	movs	r3, #0
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a7e      	ldr	r2, [pc, #504]	; (8004a40 <HAL_I2S_DMAStop+0x330>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d101      	bne.n	800484e <HAL_I2S_DMAStop+0x13e>
 800484a:	4b7e      	ldr	r3, [pc, #504]	; (8004a44 <HAL_I2S_DMAStop+0x334>)
 800484c:	e001      	b.n	8004852 <HAL_I2S_DMAStop+0x142>
 800484e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a79      	ldr	r2, [pc, #484]	; (8004a40 <HAL_I2S_DMAStop+0x330>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d101      	bne.n	8004864 <HAL_I2S_DMAStop+0x154>
 8004860:	4b78      	ldr	r3, [pc, #480]	; (8004a44 <HAL_I2S_DMAStop+0x334>)
 8004862:	e001      	b.n	8004868 <HAL_I2S_DMAStop+0x158>
 8004864:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a73      	ldr	r2, [pc, #460]	; (8004a40 <HAL_I2S_DMAStop+0x330>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d101      	bne.n	800487c <HAL_I2S_DMAStop+0x16c>
 8004878:	4b72      	ldr	r3, [pc, #456]	; (8004a44 <HAL_I2S_DMAStop+0x334>)
 800487a:	e001      	b.n	8004880 <HAL_I2S_DMAStop+0x170>
 800487c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	496e      	ldr	r1, [pc, #440]	; (8004a40 <HAL_I2S_DMAStop+0x330>)
 8004888:	428b      	cmp	r3, r1
 800488a:	d101      	bne.n	8004890 <HAL_I2S_DMAStop+0x180>
 800488c:	4b6d      	ldr	r3, [pc, #436]	; (8004a44 <HAL_I2S_DMAStop+0x334>)
 800488e:	e001      	b.n	8004894 <HAL_I2S_DMAStop+0x184>
 8004890:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004894:	f022 0201 	bic.w	r2, r2, #1
 8004898:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10c      	bne.n	80048bc <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80048ba:	e0fa      	b.n	8004ab2 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a5f      	ldr	r2, [pc, #380]	; (8004a40 <HAL_I2S_DMAStop+0x330>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d101      	bne.n	80048ca <HAL_I2S_DMAStop+0x1ba>
 80048c6:	4b5f      	ldr	r3, [pc, #380]	; (8004a44 <HAL_I2S_DMAStop+0x334>)
 80048c8:	e001      	b.n	80048ce <HAL_I2S_DMAStop+0x1be>
 80048ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048ce:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80048d0:	e0ef      	b.n	8004ab2 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048da:	d005      	beq.n	80048e8 <HAL_I2S_DMAStop+0x1d8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e4:	f040 80e5 	bne.w	8004ab2 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00f      	beq.n	8004910 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fc fcb9 	bl	800126c <HAL_DMA_Abort>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d007      	beq.n	8004910 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004904:	f043 0208 	orr.w	r2, r3, #8
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b05      	cmp	r3, #5
 800491a:	f040 809a 	bne.w	8004a52 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00f      	beq.n	8004946 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	4618      	mov	r0, r3
 800492c:	f7fc fc9e 	bl	800126c <HAL_DMA_Abort>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d007      	beq.n	8004946 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	f043 0208 	orr.w	r2, r3, #8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8004946:	f7fc fa4b 	bl	8000de0 <HAL_GetTick>
 800494a:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800494c:	e012      	b.n	8004974 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800494e:	f7fc fa47 	bl	8000de0 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b64      	cmp	r3, #100	; 0x64
 800495a:	d90b      	bls.n	8004974 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004960:	f043 0201 	orr.w	r2, r3, #1
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a31      	ldr	r2, [pc, #196]	; (8004a40 <HAL_I2S_DMAStop+0x330>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d101      	bne.n	8004982 <HAL_I2S_DMAStop+0x272>
 800497e:	4b31      	ldr	r3, [pc, #196]	; (8004a44 <HAL_I2S_DMAStop+0x334>)
 8004980:	e001      	b.n	8004986 <HAL_I2S_DMAStop+0x276>
 8004982:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b02      	cmp	r3, #2
 800498e:	d1de      	bne.n	800494e <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004990:	e012      	b.n	80049b8 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8004992:	f7fc fa25 	bl	8000de0 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b64      	cmp	r3, #100	; 0x64
 800499e:	d90b      	bls.n	80049b8 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a4:	f043 0201 	orr.w	r2, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a20      	ldr	r2, [pc, #128]	; (8004a40 <HAL_I2S_DMAStop+0x330>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d101      	bne.n	80049c6 <HAL_I2S_DMAStop+0x2b6>
 80049c2:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <HAL_I2S_DMAStop+0x334>)
 80049c4:	e001      	b.n	80049ca <HAL_I2S_DMAStop+0x2ba>
 80049c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d0:	2b80      	cmp	r3, #128	; 0x80
 80049d2:	d0de      	beq.n	8004992 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a19      	ldr	r2, [pc, #100]	; (8004a40 <HAL_I2S_DMAStop+0x330>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d101      	bne.n	80049e2 <HAL_I2S_DMAStop+0x2d2>
 80049de:	4b19      	ldr	r3, [pc, #100]	; (8004a44 <HAL_I2S_DMAStop+0x334>)
 80049e0:	e001      	b.n	80049e6 <HAL_I2S_DMAStop+0x2d6>
 80049e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049e6:	69da      	ldr	r2, [r3, #28]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4914      	ldr	r1, [pc, #80]	; (8004a40 <HAL_I2S_DMAStop+0x330>)
 80049ee:	428b      	cmp	r3, r1
 80049f0:	d101      	bne.n	80049f6 <HAL_I2S_DMAStop+0x2e6>
 80049f2:	4b14      	ldr	r3, [pc, #80]	; (8004a44 <HAL_I2S_DMAStop+0x334>)
 80049f4:	e001      	b.n	80049fa <HAL_I2S_DMAStop+0x2ea>
 80049f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fe:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a0d      	ldr	r2, [pc, #52]	; (8004a40 <HAL_I2S_DMAStop+0x330>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d101      	bne.n	8004a12 <HAL_I2S_DMAStop+0x302>
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <HAL_I2S_DMAStop+0x334>)
 8004a10:	e001      	b.n	8004a16 <HAL_I2S_DMAStop+0x306>
 8004a12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a07      	ldr	r2, [pc, #28]	; (8004a40 <HAL_I2S_DMAStop+0x330>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d101      	bne.n	8004a2a <HAL_I2S_DMAStop+0x31a>
 8004a26:	4b07      	ldr	r3, [pc, #28]	; (8004a44 <HAL_I2S_DMAStop+0x334>)
 8004a28:	e001      	b.n	8004a2e <HAL_I2S_DMAStop+0x31e>
 8004a2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4902      	ldr	r1, [pc, #8]	; (8004a40 <HAL_I2S_DMAStop+0x330>)
 8004a36:	428b      	cmp	r3, r1
 8004a38:	d106      	bne.n	8004a48 <HAL_I2S_DMAStop+0x338>
 8004a3a:	4b02      	ldr	r3, [pc, #8]	; (8004a44 <HAL_I2S_DMAStop+0x334>)
 8004a3c:	e006      	b.n	8004a4c <HAL_I2S_DMAStop+0x33c>
 8004a3e:	bf00      	nop
 8004a40:	40003800 	.word	0x40003800
 8004a44:	40003400 	.word	0x40003400
 8004a48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a4c:	f022 0202 	bic.w	r2, r2, #2
 8004a50:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a60:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004a62:	2300      	movs	r3, #0
 8004a64:	60bb      	str	r3, [r7, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	60bb      	str	r3, [r7, #8]
 8004a76:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0201 	bic.w	r2, r2, #1
 8004a86:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a90:	d10c      	bne.n	8004aac <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	77fb      	strb	r3, [r7, #31]
 8004aaa:	e002      	b.n	8004ab2 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8004aba:	7ffb      	ldrb	r3, [r7, #31]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	4798      	blx	r3
}
 8004ad4:	bf00      	nop
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10e      	bne.n	8004b38 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0202 	bic.w	r2, r2, #2
 8004b28:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f008 fdcb 	bl	800d6d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004b3e:	bf00      	nop
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f008 fdcf 	bl	800d6f8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0203 	bic.w	r2, r2, #3
 8004b7e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b98:	f043 0208 	orr.w	r2, r3, #8
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f7ff ffa5 	bl	8004af0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004ba6:	bf00      	nop
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b082      	sub	sp, #8
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	881a      	ldrh	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	1c9a      	adds	r2, r3, #2
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10e      	bne.n	8004c02 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bf2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f008 fd69 	bl	800d6d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b082      	sub	sp, #8
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	b292      	uxth	r2, r2
 8004c1e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c24:	1c9a      	adds	r2, r3, #2
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10e      	bne.n	8004c60 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c50:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff ff3e 	bl	8004adc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c60:	bf00      	nop
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d13a      	bne.n	8004cfa <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d109      	bne.n	8004ca2 <I2S_IRQHandler+0x3a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c98:	2b40      	cmp	r3, #64	; 0x40
 8004c9a:	d102      	bne.n	8004ca2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff ffb4 	bl	8004c0a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca8:	2b40      	cmp	r3, #64	; 0x40
 8004caa:	d126      	bne.n	8004cfa <I2S_IRQHandler+0x92>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	d11f      	bne.n	8004cfa <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cc8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	613b      	str	r3, [r7, #16]
 8004cde:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cec:	f043 0202 	orr.w	r2, r3, #2
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff fefb 	bl	8004af0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d136      	bne.n	8004d74 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d109      	bne.n	8004d24 <I2S_IRQHandler+0xbc>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1a:	2b80      	cmp	r3, #128	; 0x80
 8004d1c:	d102      	bne.n	8004d24 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff ff45 	bl	8004bae <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d122      	bne.n	8004d74 <I2S_IRQHandler+0x10c>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	d11b      	bne.n	8004d74 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d4a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d66:	f043 0204 	orr.w	r2, r3, #4
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff febe 	bl	8004af0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d74:	bf00      	nop
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d8c:	f7fc f828 	bl	8000de0 <HAL_GetTick>
 8004d90:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004d92:	e018      	b.n	8004dc6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d014      	beq.n	8004dc6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8004d9c:	f7fc f820 	bl	8000de0 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d902      	bls.n	8004db2 <I2S_WaitFlagStateUntilTimeout+0x36>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d109      	bne.n	8004dc6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e00f      	b.n	8004de6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	bf0c      	ite	eq
 8004dd6:	2301      	moveq	r3, #1
 8004dd8:	2300      	movne	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	461a      	mov	r2, r3
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d1d7      	bne.n	8004d94 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4aa2      	ldr	r2, [pc, #648]	; (8005090 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d101      	bne.n	8004e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004e0a:	4ba2      	ldr	r3, [pc, #648]	; (8005094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e0c:	e001      	b.n	8004e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004e0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a9b      	ldr	r2, [pc, #620]	; (8005090 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d101      	bne.n	8004e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004e28:	4b9a      	ldr	r3, [pc, #616]	; (8005094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e2a:	e001      	b.n	8004e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004e2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e3c:	d004      	beq.n	8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f040 8099 	bne.w	8004f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d107      	bne.n	8004e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f925 	bl	80050ac <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d107      	bne.n	8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f9c8 	bl	800520c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e82:	2b40      	cmp	r3, #64	; 0x40
 8004e84:	d13a      	bne.n	8004efc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f003 0320 	and.w	r3, r3, #32
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d035      	beq.n	8004efc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a7e      	ldr	r2, [pc, #504]	; (8005090 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d101      	bne.n	8004e9e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004e9a:	4b7e      	ldr	r3, [pc, #504]	; (8005094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e9c:	e001      	b.n	8004ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004e9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4979      	ldr	r1, [pc, #484]	; (8005090 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004eaa:	428b      	cmp	r3, r1
 8004eac:	d101      	bne.n	8004eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004eae:	4b79      	ldr	r3, [pc, #484]	; (8005094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004eb0:	e001      	b.n	8004eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004eb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eb6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004eba:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004eca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eee:	f043 0202 	orr.w	r2, r3, #2
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff fdfa 	bl	8004af0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	f040 80be 	bne.w	8005084 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 80b8 	beq.w	8005084 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f22:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a59      	ldr	r2, [pc, #356]	; (8005090 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d101      	bne.n	8004f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004f2e:	4b59      	ldr	r3, [pc, #356]	; (8005094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f30:	e001      	b.n	8004f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004f32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4954      	ldr	r1, [pc, #336]	; (8005090 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f3e:	428b      	cmp	r3, r1
 8004f40:	d101      	bne.n	8004f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004f42:	4b54      	ldr	r3, [pc, #336]	; (8005094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f44:	e001      	b.n	8004f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004f46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f4e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f50:	2300      	movs	r3, #0
 8004f52:	60bb      	str	r3, [r7, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	60bb      	str	r3, [r7, #8]
 8004f5c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	f043 0204 	orr.w	r2, r3, #4
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7ff fdbc 	bl	8004af0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f78:	e084      	b.n	8005084 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d107      	bne.n	8004f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f8be 	bl	8005110 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d107      	bne.n	8004fae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f8fd 	bl	80051a8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb4:	2b40      	cmp	r3, #64	; 0x40
 8004fb6:	d12f      	bne.n	8005018 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f003 0320 	and.w	r3, r3, #32
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d02a      	beq.n	8005018 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fd0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a2e      	ldr	r2, [pc, #184]	; (8005090 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d101      	bne.n	8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004fdc:	4b2d      	ldr	r3, [pc, #180]	; (8005094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004fde:	e001      	b.n	8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004fe0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4929      	ldr	r1, [pc, #164]	; (8005090 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004fec:	428b      	cmp	r3, r1
 8004fee:	d101      	bne.n	8004ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004ff0:	4b28      	ldr	r3, [pc, #160]	; (8005094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ff2:	e001      	b.n	8004ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004ff4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ff8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ffc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500a:	f043 0202 	orr.w	r2, r3, #2
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff fd6c 	bl	8004af0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b08      	cmp	r3, #8
 8005020:	d131      	bne.n	8005086 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d02c      	beq.n	8005086 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a17      	ldr	r2, [pc, #92]	; (8005090 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d101      	bne.n	800503a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005036:	4b17      	ldr	r3, [pc, #92]	; (8005094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005038:	e001      	b.n	800503e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800503a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4912      	ldr	r1, [pc, #72]	; (8005090 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005046:	428b      	cmp	r3, r1
 8005048:	d101      	bne.n	800504e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800504a:	4b12      	ldr	r3, [pc, #72]	; (8005094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800504c:	e001      	b.n	8005052 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800504e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005052:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005056:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005066:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005074:	f043 0204 	orr.w	r2, r3, #4
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff fd37 	bl	8004af0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005082:	e000      	b.n	8005086 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005084:	bf00      	nop
}
 8005086:	bf00      	nop
 8005088:	3720      	adds	r7, #32
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	40003800 	.word	0x40003800
 8005094:	40003400 	.word	0x40003400

08005098 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	1c99      	adds	r1, r3, #2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6251      	str	r1, [r2, #36]	; 0x24
 80050be:	881a      	ldrh	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d113      	bne.n	8005106 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d106      	bne.n	8005106 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff ffc9 	bl	8005098 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005106:	bf00      	nop
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	1c99      	adds	r1, r3, #2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6251      	str	r1, [r2, #36]	; 0x24
 8005122:	8819      	ldrh	r1, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1d      	ldr	r2, [pc, #116]	; (80051a0 <I2SEx_TxISR_I2SExt+0x90>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d101      	bne.n	8005132 <I2SEx_TxISR_I2SExt+0x22>
 800512e:	4b1d      	ldr	r3, [pc, #116]	; (80051a4 <I2SEx_TxISR_I2SExt+0x94>)
 8005130:	e001      	b.n	8005136 <I2SEx_TxISR_I2SExt+0x26>
 8005132:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005136:	460a      	mov	r2, r1
 8005138:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513e:	b29b      	uxth	r3, r3
 8005140:	3b01      	subs	r3, #1
 8005142:	b29a      	uxth	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d121      	bne.n	8005196 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a12      	ldr	r2, [pc, #72]	; (80051a0 <I2SEx_TxISR_I2SExt+0x90>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d101      	bne.n	8005160 <I2SEx_TxISR_I2SExt+0x50>
 800515c:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <I2SEx_TxISR_I2SExt+0x94>)
 800515e:	e001      	b.n	8005164 <I2SEx_TxISR_I2SExt+0x54>
 8005160:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	490d      	ldr	r1, [pc, #52]	; (80051a0 <I2SEx_TxISR_I2SExt+0x90>)
 800516c:	428b      	cmp	r3, r1
 800516e:	d101      	bne.n	8005174 <I2SEx_TxISR_I2SExt+0x64>
 8005170:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <I2SEx_TxISR_I2SExt+0x94>)
 8005172:	e001      	b.n	8005178 <I2SEx_TxISR_I2SExt+0x68>
 8005174:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005178:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800517c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005182:	b29b      	uxth	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d106      	bne.n	8005196 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff ff81 	bl	8005098 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005196:	bf00      	nop
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40003800 	.word	0x40003800
 80051a4:	40003400 	.word	0x40003400

080051a8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68d8      	ldr	r0, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	1c99      	adds	r1, r3, #2
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	62d1      	str	r1, [r2, #44]	; 0x2c
 80051c0:	b282      	uxth	r2, r0
 80051c2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d113      	bne.n	8005204 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051ea:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff ff4a 	bl	8005098 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005204:	bf00      	nop
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a20      	ldr	r2, [pc, #128]	; (800529c <I2SEx_RxISR_I2SExt+0x90>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d101      	bne.n	8005222 <I2SEx_RxISR_I2SExt+0x16>
 800521e:	4b20      	ldr	r3, [pc, #128]	; (80052a0 <I2SEx_RxISR_I2SExt+0x94>)
 8005220:	e001      	b.n	8005226 <I2SEx_RxISR_I2SExt+0x1a>
 8005222:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005226:	68d8      	ldr	r0, [r3, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	1c99      	adds	r1, r3, #2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005232:	b282      	uxth	r2, r0
 8005234:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d121      	bne.n	8005292 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a12      	ldr	r2, [pc, #72]	; (800529c <I2SEx_RxISR_I2SExt+0x90>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d101      	bne.n	800525c <I2SEx_RxISR_I2SExt+0x50>
 8005258:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <I2SEx_RxISR_I2SExt+0x94>)
 800525a:	e001      	b.n	8005260 <I2SEx_RxISR_I2SExt+0x54>
 800525c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	490d      	ldr	r1, [pc, #52]	; (800529c <I2SEx_RxISR_I2SExt+0x90>)
 8005268:	428b      	cmp	r3, r1
 800526a:	d101      	bne.n	8005270 <I2SEx_RxISR_I2SExt+0x64>
 800526c:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <I2SEx_RxISR_I2SExt+0x94>)
 800526e:	e001      	b.n	8005274 <I2SEx_RxISR_I2SExt+0x68>
 8005270:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005274:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005278:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527e:	b29b      	uxth	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d106      	bne.n	8005292 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff ff03 	bl	8005098 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40003800 	.word	0x40003800
 80052a0:	40003400 	.word	0x40003400

080052a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80052a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052a6:	b08f      	sub	sp, #60	; 0x3c
 80052a8:	af0a      	add	r7, sp, #40	; 0x28
 80052aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e10f      	b.n	80054d6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d106      	bne.n	80052d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f009 f80d 	bl	800e2f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2203      	movs	r2, #3
 80052da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d102      	bne.n	80052f0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f004 fc4a 	bl	8009b8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	687e      	ldr	r6, [r7, #4]
 8005302:	466d      	mov	r5, sp
 8005304:	f106 0410 	add.w	r4, r6, #16
 8005308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800530a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800530c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800530e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005310:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005314:	e885 0003 	stmia.w	r5, {r0, r1}
 8005318:	1d33      	adds	r3, r6, #4
 800531a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800531c:	6838      	ldr	r0, [r7, #0]
 800531e:	f004 fb21 	bl	8009964 <USB_CoreInit>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d005      	beq.n	8005334 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0d0      	b.n	80054d6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2100      	movs	r1, #0
 800533a:	4618      	mov	r0, r3
 800533c:	f004 fc38 	bl	8009bb0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005340:	2300      	movs	r3, #0
 8005342:	73fb      	strb	r3, [r7, #15]
 8005344:	e04a      	b.n	80053dc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005346:	7bfa      	ldrb	r2, [r7, #15]
 8005348:	6879      	ldr	r1, [r7, #4]
 800534a:	4613      	mov	r3, r2
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	440b      	add	r3, r1
 8005354:	333d      	adds	r3, #61	; 0x3d
 8005356:	2201      	movs	r2, #1
 8005358:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800535a:	7bfa      	ldrb	r2, [r7, #15]
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	4613      	mov	r3, r2
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	1a9b      	subs	r3, r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	440b      	add	r3, r1
 8005368:	333c      	adds	r3, #60	; 0x3c
 800536a:	7bfa      	ldrb	r2, [r7, #15]
 800536c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800536e:	7bfa      	ldrb	r2, [r7, #15]
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	b298      	uxth	r0, r3
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	1a9b      	subs	r3, r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	3342      	adds	r3, #66	; 0x42
 8005382:	4602      	mov	r2, r0
 8005384:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005386:	7bfa      	ldrb	r2, [r7, #15]
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	1a9b      	subs	r3, r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	440b      	add	r3, r1
 8005394:	333f      	adds	r3, #63	; 0x3f
 8005396:	2200      	movs	r2, #0
 8005398:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800539a:	7bfa      	ldrb	r2, [r7, #15]
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	3344      	adds	r3, #68	; 0x44
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80053ae:	7bfa      	ldrb	r2, [r7, #15]
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	4613      	mov	r3, r2
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	1a9b      	subs	r3, r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	440b      	add	r3, r1
 80053bc:	3348      	adds	r3, #72	; 0x48
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80053c2:	7bfa      	ldrb	r2, [r7, #15]
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	4613      	mov	r3, r2
 80053c8:	00db      	lsls	r3, r3, #3
 80053ca:	1a9b      	subs	r3, r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	440b      	add	r3, r1
 80053d0:	3350      	adds	r3, #80	; 0x50
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	3301      	adds	r3, #1
 80053da:	73fb      	strb	r3, [r7, #15]
 80053dc:	7bfa      	ldrb	r2, [r7, #15]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d3af      	bcc.n	8005346 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053e6:	2300      	movs	r3, #0
 80053e8:	73fb      	strb	r3, [r7, #15]
 80053ea:	e044      	b.n	8005476 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80053ec:	7bfa      	ldrb	r2, [r7, #15]
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	4613      	mov	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80053fe:	2200      	movs	r2, #0
 8005400:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005402:	7bfa      	ldrb	r2, [r7, #15]
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	1a9b      	subs	r3, r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005414:	7bfa      	ldrb	r2, [r7, #15]
 8005416:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005418:	7bfa      	ldrb	r2, [r7, #15]
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	4613      	mov	r3, r2
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800542e:	7bfa      	ldrb	r2, [r7, #15]
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	4613      	mov	r3, r2
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	1a9b      	subs	r3, r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005444:	7bfa      	ldrb	r2, [r7, #15]
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	1a9b      	subs	r3, r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800545a:	7bfa      	ldrb	r2, [r7, #15]
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005470:	7bfb      	ldrb	r3, [r7, #15]
 8005472:	3301      	adds	r3, #1
 8005474:	73fb      	strb	r3, [r7, #15]
 8005476:	7bfa      	ldrb	r2, [r7, #15]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	429a      	cmp	r2, r3
 800547e:	d3b5      	bcc.n	80053ec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	603b      	str	r3, [r7, #0]
 8005486:	687e      	ldr	r6, [r7, #4]
 8005488:	466d      	mov	r5, sp
 800548a:	f106 0410 	add.w	r4, r6, #16
 800548e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005496:	e894 0003 	ldmia.w	r4, {r0, r1}
 800549a:	e885 0003 	stmia.w	r5, {r0, r1}
 800549e:	1d33      	adds	r3, r6, #4
 80054a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054a2:	6838      	ldr	r0, [r7, #0]
 80054a4:	f004 fbae 	bl	8009c04 <USB_DevInit>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d005      	beq.n	80054ba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e00d      	b.n	80054d6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f005 fbed 	bl	800acae <USB_DevDisconnect>

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_PCD_Start+0x1c>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e020      	b.n	800553c <HAL_PCD_Start+0x5e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005506:	2b01      	cmp	r3, #1
 8005508:	d109      	bne.n	800551e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800550e:	2b01      	cmp	r3, #1
 8005510:	d005      	beq.n	800551e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f005 fbab 	bl	800ac7e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4618      	mov	r0, r3
 800552e:	f004 fb1d 	bl	8009b6c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005544:	b590      	push	{r4, r7, lr}
 8005546:	b08d      	sub	sp, #52	; 0x34
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f005 fc52 	bl	800ae04 <USB_GetMode>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	f040 839d 	bne.w	8005ca2 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4618      	mov	r0, r3
 800556e:	f005 fbb6 	bl	800acde <USB_ReadInterrupts>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 8393 	beq.w	8005ca0 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f005 fbad 	bl	800acde <USB_ReadInterrupts>
 8005584:	4603      	mov	r3, r0
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b02      	cmp	r3, #2
 800558c:	d107      	bne.n	800559e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695a      	ldr	r2, [r3, #20]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f002 0202 	and.w	r2, r2, #2
 800559c:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f005 fb9b 	bl	800acde <USB_ReadInterrupts>
 80055a8:	4603      	mov	r3, r0
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b10      	cmp	r3, #16
 80055b0:	d161      	bne.n	8005676 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699a      	ldr	r2, [r3, #24]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0210 	bic.w	r2, r2, #16
 80055c0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	f003 020f 	and.w	r2, r3, #15
 80055ce:	4613      	mov	r3, r2
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	4413      	add	r3, r2
 80055de:	3304      	adds	r3, #4
 80055e0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	0c5b      	lsrs	r3, r3, #17
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d124      	bne.n	8005638 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80055f4:	4013      	ands	r3, r2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d035      	beq.n	8005666 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	091b      	lsrs	r3, r3, #4
 8005602:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005604:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005608:	b29b      	uxth	r3, r3
 800560a:	461a      	mov	r2, r3
 800560c:	6a38      	ldr	r0, [r7, #32]
 800560e:	f005 fa13 	bl	800aa38 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	091b      	lsrs	r3, r3, #4
 800561a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800561e:	441a      	add	r2, r3
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	699a      	ldr	r2, [r3, #24]
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	091b      	lsrs	r3, r3, #4
 800562c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005630:	441a      	add	r2, r3
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	619a      	str	r2, [r3, #24]
 8005636:	e016      	b.n	8005666 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	0c5b      	lsrs	r3, r3, #17
 800563c:	f003 030f 	and.w	r3, r3, #15
 8005640:	2b06      	cmp	r3, #6
 8005642:	d110      	bne.n	8005666 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800564a:	2208      	movs	r2, #8
 800564c:	4619      	mov	r1, r3
 800564e:	6a38      	ldr	r0, [r7, #32]
 8005650:	f005 f9f2 	bl	800aa38 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	699a      	ldr	r2, [r3, #24]
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	091b      	lsrs	r3, r3, #4
 800565c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005660:	441a      	add	r2, r3
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	699a      	ldr	r2, [r3, #24]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0210 	orr.w	r2, r2, #16
 8005674:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4618      	mov	r0, r3
 800567c:	f005 fb2f 	bl	800acde <USB_ReadInterrupts>
 8005680:	4603      	mov	r3, r0
 8005682:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005686:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800568a:	d16e      	bne.n	800576a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f005 fb35 	bl	800ad04 <USB_ReadDevAllOutEpInterrupt>
 800569a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800569c:	e062      	b.n	8005764 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d057      	beq.n	8005758 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	4611      	mov	r1, r2
 80056b2:	4618      	mov	r0, r3
 80056b4:	f005 fb5a 	bl	800ad6c <USB_ReadDevOutEPInterrupt>
 80056b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00c      	beq.n	80056de <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d0:	461a      	mov	r2, r3
 80056d2:	2301      	movs	r3, #1
 80056d4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80056d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fdb1 	bl	8006240 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00c      	beq.n	8005702 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f4:	461a      	mov	r2, r3
 80056f6:	2308      	movs	r3, #8
 80056f8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80056fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 feab 	bl	8006458 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	2b00      	cmp	r3, #0
 800570a:	d008      	beq.n	800571e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	461a      	mov	r2, r3
 800571a:	2310      	movs	r3, #16
 800571c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b00      	cmp	r3, #0
 8005726:	d008      	beq.n	800573a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005734:	461a      	mov	r2, r3
 8005736:	2320      	movs	r3, #32
 8005738:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d009      	beq.n	8005758 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005750:	461a      	mov	r2, r3
 8005752:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005756:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	3301      	adds	r3, #1
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	085b      	lsrs	r3, r3, #1
 8005762:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	2b00      	cmp	r3, #0
 8005768:	d199      	bne.n	800569e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f005 fab5 	bl	800acde <USB_ReadInterrupts>
 8005774:	4603      	mov	r3, r0
 8005776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800577a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800577e:	f040 80c0 	bne.w	8005902 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f005 fad6 	bl	800ad38 <USB_ReadDevAllInEpInterrupt>
 800578c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005792:	e0b2      	b.n	80058fa <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 80a7 	beq.w	80058ee <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	4611      	mov	r1, r2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f005 fafc 	bl	800ada8 <USB_ReadDevInEPInterrupt>
 80057b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d057      	beq.n	800586c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	2201      	movs	r2, #1
 80057c4:	fa02 f303 	lsl.w	r3, r2, r3
 80057c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	43db      	mvns	r3, r3
 80057d6:	69f9      	ldr	r1, [r7, #28]
 80057d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057dc:	4013      	ands	r3, r2
 80057de:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ec:	461a      	mov	r2, r3
 80057ee:	2301      	movs	r3, #1
 80057f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d132      	bne.n	8005860 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057fe:	4613      	mov	r3, r2
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	1a9b      	subs	r3, r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	3348      	adds	r3, #72	; 0x48
 800580a:	6819      	ldr	r1, [r3, #0]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005810:	4613      	mov	r3, r2
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4403      	add	r3, r0
 800581a:	3344      	adds	r3, #68	; 0x44
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4419      	add	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005824:	4613      	mov	r3, r2
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	1a9b      	subs	r3, r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4403      	add	r3, r0
 800582e:	3348      	adds	r3, #72	; 0x48
 8005830:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	2b00      	cmp	r3, #0
 8005836:	d113      	bne.n	8005860 <HAL_PCD_IRQHandler+0x31c>
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583c:	4613      	mov	r3, r2
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	440b      	add	r3, r1
 8005846:	3350      	adds	r3, #80	; 0x50
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d108      	bne.n	8005860 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6818      	ldr	r0, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005858:	461a      	mov	r2, r3
 800585a:	2101      	movs	r1, #1
 800585c:	f005 fb04 	bl	800ae68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	b2db      	uxtb	r3, r3
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f008 fdc3 	bl	800e3f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d008      	beq.n	8005888 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005882:	461a      	mov	r2, r3
 8005884:	2308      	movs	r3, #8
 8005886:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f003 0310 	and.w	r3, r3, #16
 800588e:	2b00      	cmp	r3, #0
 8005890:	d008      	beq.n	80058a4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589e:	461a      	mov	r2, r3
 80058a0:	2310      	movs	r3, #16
 80058a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d008      	beq.n	80058c0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ba:	461a      	mov	r2, r3
 80058bc:	2340      	movs	r3, #64	; 0x40
 80058be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d008      	beq.n	80058dc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d6:	461a      	mov	r2, r3
 80058d8:	2302      	movs	r3, #2
 80058da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80058e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fc1b 	bl	8006124 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	3301      	adds	r3, #1
 80058f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	085b      	lsrs	r3, r3, #1
 80058f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f47f af49 	bne.w	8005794 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f005 f9e9 	bl	800acde <USB_ReadInterrupts>
 800590c:	4603      	mov	r3, r0
 800590e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005912:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005916:	d122      	bne.n	800595e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005926:	f023 0301 	bic.w	r3, r3, #1
 800592a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005932:	2b01      	cmp	r3, #1
 8005934:	d108      	bne.n	8005948 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800593e:	2100      	movs	r1, #0
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fe27 	bl	8006594 <HAL_PCDEx_LPM_Callback>
 8005946:	e002      	b.n	800594e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f008 fdc9 	bl	800e4e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695a      	ldr	r2, [r3, #20]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800595c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f005 f9bb 	bl	800acde <USB_ReadInterrupts>
 8005968:	4603      	mov	r3, r0
 800596a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800596e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005972:	d112      	bne.n	800599a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b01      	cmp	r3, #1
 8005982:	d102      	bne.n	800598a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f008 fd85 	bl	800e494 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695a      	ldr	r2, [r3, #20]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005998:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4618      	mov	r0, r3
 80059a0:	f005 f99d 	bl	800acde <USB_ReadInterrupts>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ae:	f040 80c7 	bne.w	8005b40 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059c0:	f023 0301 	bic.w	r3, r3, #1
 80059c4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2110      	movs	r1, #16
 80059cc:	4618      	mov	r0, r3
 80059ce:	f004 fa7d 	bl	8009ecc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059d2:	2300      	movs	r3, #0
 80059d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059d6:	e056      	b.n	8005a86 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e4:	461a      	mov	r2, r3
 80059e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059ea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a0a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a3e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	69fa      	ldr	r2, [r7, #28]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a7e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a82:	3301      	adds	r3, #1
 8005a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d3a3      	bcc.n	80059d8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a9e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005aa2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d016      	beq.n	8005ada <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005abc:	f043 030b 	orr.w	r3, r3, #11
 8005ac0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ad2:	f043 030b 	orr.w	r3, r3, #11
 8005ad6:	6453      	str	r3, [r2, #68]	; 0x44
 8005ad8:	e015      	b.n	8005b06 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ae8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005aec:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005af0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b00:	f043 030b 	orr.w	r3, r3, #11
 8005b04:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69fa      	ldr	r2, [r7, #28]
 8005b10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b14:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b18:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f005 f99c 	bl	800ae68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695a      	ldr	r2, [r3, #20]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f005 f8ca 	bl	800acde <USB_ReadInterrupts>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b54:	d124      	bne.n	8005ba0 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f005 f960 	bl	800ae20 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f004 fa12 	bl	8009f8e <USB_GetDevSpeed>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681c      	ldr	r4, [r3, #0]
 8005b76:	f001 f951 	bl	8006e1c <HAL_RCC_GetHCLKFreq>
 8005b7a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	461a      	mov	r2, r3
 8005b84:	4620      	mov	r0, r4
 8005b86:	f003 ff4f 	bl	8009a28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f008 fc59 	bl	800e442 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695a      	ldr	r2, [r3, #20]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f005 f89a 	bl	800acde <USB_ReadInterrupts>
 8005baa:	4603      	mov	r3, r0
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d10a      	bne.n	8005bca <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f008 fc36 	bl	800e426 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695a      	ldr	r2, [r3, #20]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f002 0208 	and.w	r2, r2, #8
 8005bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f005 f885 	bl	800acde <USB_ReadInterrupts>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bde:	d10f      	bne.n	8005c00 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f008 fc98 	bl	800e520 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695a      	ldr	r2, [r3, #20]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f005 f86a 	bl	800acde <USB_ReadInterrupts>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c14:	d10f      	bne.n	8005c36 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f008 fc6b 	bl	800e4fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695a      	ldr	r2, [r3, #20]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005c34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f005 f84f 	bl	800acde <USB_ReadInterrupts>
 8005c40:	4603      	mov	r3, r0
 8005c42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4a:	d10a      	bne.n	8005c62 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f008 fc79 	bl	800e544 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	695a      	ldr	r2, [r3, #20]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005c60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f005 f839 	bl	800acde <USB_ReadInterrupts>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d115      	bne.n	8005ca2 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f008 fc69 	bl	800e560 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6859      	ldr	r1, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]
 8005c9e:	e000      	b.n	8005ca2 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005ca0:	bf00      	nop
    }
  }
}
 8005ca2:	3734      	adds	r7, #52	; 0x34
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd90      	pop	{r4, r7, pc}

08005ca8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_PCD_SetAddress+0x1a>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e013      	b.n	8005cea <HAL_PCD_SetAddress+0x42>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	78fa      	ldrb	r2, [r7, #3]
 8005cce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	78fa      	ldrb	r2, [r7, #3]
 8005cd8:	4611      	mov	r1, r2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f004 ffa9 	bl	800ac32 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	4608      	mov	r0, r1
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	461a      	mov	r2, r3
 8005d00:	4603      	mov	r3, r0
 8005d02:	70fb      	strb	r3, [r7, #3]
 8005d04:	460b      	mov	r3, r1
 8005d06:	803b      	strh	r3, [r7, #0]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	da0f      	bge.n	8005d38 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	f003 020f 	and.w	r2, r3, #15
 8005d1e:	4613      	mov	r3, r2
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	1a9b      	subs	r3, r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	3338      	adds	r3, #56	; 0x38
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	705a      	strb	r2, [r3, #1]
 8005d36:	e00f      	b.n	8005d58 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	f003 020f 	and.w	r2, r3, #15
 8005d3e:	4613      	mov	r3, r2
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	1a9b      	subs	r3, r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	3304      	adds	r3, #4
 8005d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005d64:	883a      	ldrh	r2, [r7, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	78ba      	ldrb	r2, [r7, #2]
 8005d6e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	785b      	ldrb	r3, [r3, #1]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d004      	beq.n	8005d82 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d82:	78bb      	ldrb	r3, [r7, #2]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d102      	bne.n	8005d8e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <HAL_PCD_EP_Open+0xaa>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e00e      	b.n	8005dba <HAL_PCD_EP_Open+0xc8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68f9      	ldr	r1, [r7, #12]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f004 f914 	bl	8009fd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005db8:	7afb      	ldrb	r3, [r7, #11]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005dce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	da0f      	bge.n	8005df6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dd6:	78fb      	ldrb	r3, [r7, #3]
 8005dd8:	f003 020f 	and.w	r2, r3, #15
 8005ddc:	4613      	mov	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	1a9b      	subs	r3, r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	3338      	adds	r3, #56	; 0x38
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	4413      	add	r3, r2
 8005dea:	3304      	adds	r3, #4
 8005dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	705a      	strb	r2, [r3, #1]
 8005df4:	e00f      	b.n	8005e16 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005df6:	78fb      	ldrb	r3, [r7, #3]
 8005df8:	f003 020f 	and.w	r2, r3, #15
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	1a9b      	subs	r3, r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d101      	bne.n	8005e30 <HAL_PCD_EP_Close+0x6e>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e00e      	b.n	8005e4e <HAL_PCD_EP_Close+0x8c>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68f9      	ldr	r1, [r7, #12]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f004 f952 	bl	800a0e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b086      	sub	sp, #24
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
 8005e62:	460b      	mov	r3, r1
 8005e64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e66:	7afb      	ldrb	r3, [r7, #11]
 8005e68:	f003 020f 	and.w	r2, r3, #15
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	1a9b      	subs	r3, r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2200      	movs	r2, #0
 8005e96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e98:	7afb      	ldrb	r3, [r7, #11]
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d102      	bne.n	8005eb2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005eb2:	7afb      	ldrb	r3, [r7, #11]
 8005eb4:	f003 030f 	and.w	r3, r3, #15
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d109      	bne.n	8005ed0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	6979      	ldr	r1, [r7, #20]
 8005eca:	f004 fc2d 	bl	800a728 <USB_EP0StartXfer>
 8005ece:	e008      	b.n	8005ee2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	461a      	mov	r2, r3
 8005edc:	6979      	ldr	r1, [r7, #20]
 8005ede:	f004 f9df 	bl	800a2a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005ef8:	78fb      	ldrb	r3, [r7, #3]
 8005efa:	f003 020f 	and.w	r2, r3, #15
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	4613      	mov	r3, r2
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	1a9b      	subs	r3, r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	440b      	add	r3, r1
 8005f0a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005f0e:	681b      	ldr	r3, [r3, #0]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	607a      	str	r2, [r7, #4]
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f2c:	7afb      	ldrb	r3, [r7, #11]
 8005f2e:	f003 020f 	and.w	r2, r3, #15
 8005f32:	4613      	mov	r3, r2
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	1a9b      	subs	r3, r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	3338      	adds	r3, #56	; 0x38
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	3304      	adds	r3, #4
 8005f42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2200      	movs	r2, #0
 8005f54:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f5c:	7afb      	ldrb	r3, [r7, #11]
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d102      	bne.n	8005f76 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f76:	7afb      	ldrb	r3, [r7, #11]
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d109      	bne.n	8005f94 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6818      	ldr	r0, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	6979      	ldr	r1, [r7, #20]
 8005f8e:	f004 fbcb 	bl	800a728 <USB_EP0StartXfer>
 8005f92:	e008      	b.n	8005fa6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6818      	ldr	r0, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	6979      	ldr	r1, [r7, #20]
 8005fa2:	f004 f97d 	bl	800a2a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	f003 020f 	and.w	r2, r3, #15
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d901      	bls.n	8005fce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e050      	b.n	8006070 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	da0f      	bge.n	8005ff6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fd6:	78fb      	ldrb	r3, [r7, #3]
 8005fd8:	f003 020f 	and.w	r2, r3, #15
 8005fdc:	4613      	mov	r3, r2
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	1a9b      	subs	r3, r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	3338      	adds	r3, #56	; 0x38
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	4413      	add	r3, r2
 8005fea:	3304      	adds	r3, #4
 8005fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	705a      	strb	r2, [r3, #1]
 8005ff4:	e00d      	b.n	8006012 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ff6:	78fa      	ldrb	r2, [r7, #3]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	1a9b      	subs	r3, r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	4413      	add	r3, r2
 8006008:	3304      	adds	r3, #4
 800600a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2201      	movs	r2, #1
 8006016:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006018:	78fb      	ldrb	r3, [r7, #3]
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	b2da      	uxtb	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800602a:	2b01      	cmp	r3, #1
 800602c:	d101      	bne.n	8006032 <HAL_PCD_EP_SetStall+0x82>
 800602e:	2302      	movs	r3, #2
 8006030:	e01e      	b.n	8006070 <HAL_PCD_EP_SetStall+0xc0>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68f9      	ldr	r1, [r7, #12]
 8006040:	4618      	mov	r0, r3
 8006042:	f004 fd22 	bl	800aa8a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006046:	78fb      	ldrb	r3, [r7, #3]
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10a      	bne.n	8006066 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	b2d9      	uxtb	r1, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006060:	461a      	mov	r2, r3
 8006062:	f004 ff01 	bl	800ae68 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	f003 020f 	and.w	r2, r3, #15
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	429a      	cmp	r2, r3
 8006090:	d901      	bls.n	8006096 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e042      	b.n	800611c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800609a:	2b00      	cmp	r3, #0
 800609c:	da0f      	bge.n	80060be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	f003 020f 	and.w	r2, r3, #15
 80060a4:	4613      	mov	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	1a9b      	subs	r3, r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	3338      	adds	r3, #56	; 0x38
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	4413      	add	r3, r2
 80060b2:	3304      	adds	r3, #4
 80060b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	705a      	strb	r2, [r3, #1]
 80060bc:	e00f      	b.n	80060de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	f003 020f 	and.w	r2, r3, #15
 80060c4:	4613      	mov	r3, r2
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	1a9b      	subs	r3, r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	4413      	add	r3, r2
 80060d4:	3304      	adds	r3, #4
 80060d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d101      	bne.n	80060fe <HAL_PCD_EP_ClrStall+0x86>
 80060fa:	2302      	movs	r3, #2
 80060fc:	e00e      	b.n	800611c <HAL_PCD_EP_ClrStall+0xa4>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68f9      	ldr	r1, [r7, #12]
 800610c:	4618      	mov	r0, r3
 800610e:	f004 fd2a 	bl	800ab66 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b08a      	sub	sp, #40	; 0x28
 8006128:	af02      	add	r7, sp, #8
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	4613      	mov	r3, r2
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	1a9b      	subs	r3, r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	3338      	adds	r3, #56	; 0x38
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	4413      	add	r3, r2
 8006148:	3304      	adds	r3, #4
 800614a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	699a      	ldr	r2, [r3, #24]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	429a      	cmp	r2, r3
 8006156:	d901      	bls.n	800615c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e06c      	b.n	8006236 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	695a      	ldr	r2, [r3, #20]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	429a      	cmp	r2, r3
 8006170:	d902      	bls.n	8006178 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	3303      	adds	r3, #3
 800617c:	089b      	lsrs	r3, r3, #2
 800617e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006180:	e02b      	b.n	80061da <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	695a      	ldr	r2, [r3, #20]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	429a      	cmp	r2, r3
 8006196:	d902      	bls.n	800619e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	3303      	adds	r3, #3
 80061a2:	089b      	lsrs	r3, r3, #2
 80061a4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	68d9      	ldr	r1, [r3, #12]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	4603      	mov	r3, r0
 80061bc:	6978      	ldr	r0, [r7, #20]
 80061be:	f004 fc06 	bl	800a9ce <USB_WritePacket>

    ep->xfer_buff  += len;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	441a      	add	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	699a      	ldr	r2, [r3, #24]
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	441a      	add	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d809      	bhi.n	8006204 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	699a      	ldr	r2, [r3, #24]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d203      	bcs.n	8006204 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1be      	bne.n	8006182 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	695a      	ldr	r2, [r3, #20]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	429a      	cmp	r2, r3
 800620e:	d811      	bhi.n	8006234 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	2201      	movs	r2, #1
 8006218:	fa02 f303 	lsl.w	r3, r2, r3
 800621c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	43db      	mvns	r3, r3
 800622a:	6939      	ldr	r1, [r7, #16]
 800622c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006230:	4013      	ands	r3, r2
 8006232:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	333c      	adds	r3, #60	; 0x3c
 8006258:	3304      	adds	r3, #4
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b01      	cmp	r3, #1
 8006274:	f040 80a0 	bne.w	80063b8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f003 0308 	and.w	r3, r3, #8
 800627e:	2b00      	cmp	r3, #0
 8006280:	d015      	beq.n	80062ae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4a72      	ldr	r2, [pc, #456]	; (8006450 <PCD_EP_OutXfrComplete_int+0x210>)
 8006286:	4293      	cmp	r3, r2
 8006288:	f240 80dd 	bls.w	8006446 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 80d7 	beq.w	8006446 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a4:	461a      	mov	r2, r3
 80062a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062aa:	6093      	str	r3, [r2, #8]
 80062ac:	e0cb      	b.n	8006446 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d009      	beq.n	80062cc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c4:	461a      	mov	r2, r3
 80062c6:	2320      	movs	r3, #32
 80062c8:	6093      	str	r3, [r2, #8]
 80062ca:	e0bc      	b.n	8006446 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f040 80b7 	bne.w	8006446 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4a5d      	ldr	r2, [pc, #372]	; (8006450 <PCD_EP_OutXfrComplete_int+0x210>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d90f      	bls.n	8006300 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f6:	461a      	mov	r2, r3
 80062f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062fc:	6093      	str	r3, [r2, #8]
 80062fe:	e0a2      	b.n	8006446 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	4613      	mov	r3, r2
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	1a9b      	subs	r3, r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006312:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	0159      	lsls	r1, r3, #5
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	440b      	add	r3, r1
 800631c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006326:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	4613      	mov	r3, r2
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	1a9b      	subs	r3, r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4403      	add	r3, r0
 8006336:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800633a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	4613      	mov	r3, r2
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	1a9b      	subs	r3, r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	440b      	add	r3, r1
 800634a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800634e:	6819      	ldr	r1, [r3, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	4613      	mov	r3, r2
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4403      	add	r3, r0
 800635e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4419      	add	r1, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	4613      	mov	r3, r2
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	1a9b      	subs	r3, r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4403      	add	r3, r0
 8006374:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006378:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d114      	bne.n	80063aa <PCD_EP_OutXfrComplete_int+0x16a>
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	4613      	mov	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	1a9b      	subs	r3, r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	440b      	add	r3, r1
 800638e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d108      	bne.n	80063aa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80063a2:	461a      	mov	r2, r3
 80063a4:	2101      	movs	r1, #1
 80063a6:	f004 fd5f 	bl	800ae68 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f008 f803 	bl	800e3bc <HAL_PCD_DataOutStageCallback>
 80063b6:	e046      	b.n	8006446 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4a26      	ldr	r2, [pc, #152]	; (8006454 <PCD_EP_OutXfrComplete_int+0x214>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d124      	bne.n	800640a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d6:	461a      	mov	r2, r3
 80063d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063dc:	6093      	str	r3, [r2, #8]
 80063de:	e032      	b.n	8006446 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d008      	beq.n	80063fc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f6:	461a      	mov	r2, r3
 80063f8:	2320      	movs	r3, #32
 80063fa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f007 ffda 	bl	800e3bc <HAL_PCD_DataOutStageCallback>
 8006408:	e01d      	b.n	8006446 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d114      	bne.n	800643a <PCD_EP_OutXfrComplete_int+0x1fa>
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	4613      	mov	r3, r2
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	1a9b      	subs	r3, r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d108      	bne.n	800643a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006432:	461a      	mov	r2, r3
 8006434:	2100      	movs	r1, #0
 8006436:	f004 fd17 	bl	800ae68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	b2db      	uxtb	r3, r3
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f007 ffbb 	bl	800e3bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	4f54300a 	.word	0x4f54300a
 8006454:	4f54310a 	.word	0x4f54310a

08006458 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	333c      	adds	r3, #60	; 0x3c
 8006470:	3304      	adds	r3, #4
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	4a15      	ldr	r2, [pc, #84]	; (80064e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d90e      	bls.n	80064ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006494:	2b00      	cmp	r3, #0
 8006496:	d009      	beq.n	80064ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a4:	461a      	mov	r2, r3
 80064a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f007 ff73 	bl	800e398 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4a0a      	ldr	r2, [pc, #40]	; (80064e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d90c      	bls.n	80064d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d108      	bne.n	80064d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80064cc:	461a      	mov	r2, r3
 80064ce:	2101      	movs	r1, #1
 80064d0:	f004 fcca 	bl	800ae68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	4f54300a 	.word	0x4f54300a

080064e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	70fb      	strb	r3, [r7, #3]
 80064f0:	4613      	mov	r3, r2
 80064f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d107      	bne.n	8006512 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006502:	883b      	ldrh	r3, [r7, #0]
 8006504:	0419      	lsls	r1, r3, #16
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	430a      	orrs	r2, r1
 800650e:	629a      	str	r2, [r3, #40]	; 0x28
 8006510:	e028      	b.n	8006564 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006518:	0c1b      	lsrs	r3, r3, #16
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	4413      	add	r3, r2
 800651e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006520:	2300      	movs	r3, #0
 8006522:	73fb      	strb	r3, [r7, #15]
 8006524:	e00d      	b.n	8006542 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	3340      	adds	r3, #64	; 0x40
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	0c1b      	lsrs	r3, r3, #16
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	4413      	add	r3, r2
 800653a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	3301      	adds	r3, #1
 8006540:	73fb      	strb	r3, [r7, #15]
 8006542:	7bfa      	ldrb	r2, [r7, #15]
 8006544:	78fb      	ldrb	r3, [r7, #3]
 8006546:	3b01      	subs	r3, #1
 8006548:	429a      	cmp	r2, r3
 800654a:	d3ec      	bcc.n	8006526 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800654c:	883b      	ldrh	r3, [r7, #0]
 800654e:	0418      	lsls	r0, r3, #16
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6819      	ldr	r1, [r3, #0]
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	3b01      	subs	r3, #1
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	4302      	orrs	r2, r0
 800655c:	3340      	adds	r3, #64	; 0x40
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	440b      	add	r3, r1
 8006562:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	460b      	mov	r3, r1
 800657c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	887a      	ldrh	r2, [r7, #2]
 8006584:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e25b      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d075      	beq.n	80066b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065ca:	4ba3      	ldr	r3, [pc, #652]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 030c 	and.w	r3, r3, #12
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d00c      	beq.n	80065f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065d6:	4ba0      	ldr	r3, [pc, #640]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d112      	bne.n	8006608 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065e2:	4b9d      	ldr	r3, [pc, #628]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065ee:	d10b      	bne.n	8006608 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f0:	4b99      	ldr	r3, [pc, #612]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d05b      	beq.n	80066b4 <HAL_RCC_OscConfig+0x108>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d157      	bne.n	80066b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e236      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006610:	d106      	bne.n	8006620 <HAL_RCC_OscConfig+0x74>
 8006612:	4b91      	ldr	r3, [pc, #580]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a90      	ldr	r2, [pc, #576]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 8006618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	e01d      	b.n	800665c <HAL_RCC_OscConfig+0xb0>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006628:	d10c      	bne.n	8006644 <HAL_RCC_OscConfig+0x98>
 800662a:	4b8b      	ldr	r3, [pc, #556]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a8a      	ldr	r2, [pc, #552]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 8006630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	4b88      	ldr	r3, [pc, #544]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a87      	ldr	r2, [pc, #540]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 800663c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	e00b      	b.n	800665c <HAL_RCC_OscConfig+0xb0>
 8006644:	4b84      	ldr	r3, [pc, #528]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a83      	ldr	r2, [pc, #524]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 800664a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	4b81      	ldr	r3, [pc, #516]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a80      	ldr	r2, [pc, #512]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 8006656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800665a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d013      	beq.n	800668c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006664:	f7fa fbbc 	bl	8000de0 <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800666c:	f7fa fbb8 	bl	8000de0 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b64      	cmp	r3, #100	; 0x64
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e1fb      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800667e:	4b76      	ldr	r3, [pc, #472]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0f0      	beq.n	800666c <HAL_RCC_OscConfig+0xc0>
 800668a:	e014      	b.n	80066b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800668c:	f7fa fba8 	bl	8000de0 <HAL_GetTick>
 8006690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006694:	f7fa fba4 	bl	8000de0 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b64      	cmp	r3, #100	; 0x64
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e1e7      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066a6:	4b6c      	ldr	r3, [pc, #432]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1f0      	bne.n	8006694 <HAL_RCC_OscConfig+0xe8>
 80066b2:	e000      	b.n	80066b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d063      	beq.n	800678a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066c2:	4b65      	ldr	r3, [pc, #404]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 030c 	and.w	r3, r3, #12
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00b      	beq.n	80066e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066ce:	4b62      	ldr	r3, [pc, #392]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066d6:	2b08      	cmp	r3, #8
 80066d8:	d11c      	bne.n	8006714 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066da:	4b5f      	ldr	r3, [pc, #380]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d116      	bne.n	8006714 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066e6:	4b5c      	ldr	r3, [pc, #368]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <HAL_RCC_OscConfig+0x152>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d001      	beq.n	80066fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e1bb      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066fe:	4b56      	ldr	r3, [pc, #344]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	4952      	ldr	r1, [pc, #328]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 800670e:	4313      	orrs	r3, r2
 8006710:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006712:	e03a      	b.n	800678a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d020      	beq.n	800675e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800671c:	4b4f      	ldr	r3, [pc, #316]	; (800685c <HAL_RCC_OscConfig+0x2b0>)
 800671e:	2201      	movs	r2, #1
 8006720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006722:	f7fa fb5d 	bl	8000de0 <HAL_GetTick>
 8006726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006728:	e008      	b.n	800673c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800672a:	f7fa fb59 	bl	8000de0 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d901      	bls.n	800673c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e19c      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800673c:	4b46      	ldr	r3, [pc, #280]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0f0      	beq.n	800672a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006748:	4b43      	ldr	r3, [pc, #268]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	4940      	ldr	r1, [pc, #256]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 8006758:	4313      	orrs	r3, r2
 800675a:	600b      	str	r3, [r1, #0]
 800675c:	e015      	b.n	800678a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800675e:	4b3f      	ldr	r3, [pc, #252]	; (800685c <HAL_RCC_OscConfig+0x2b0>)
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006764:	f7fa fb3c 	bl	8000de0 <HAL_GetTick>
 8006768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800676c:	f7fa fb38 	bl	8000de0 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e17b      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800677e:	4b36      	ldr	r3, [pc, #216]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1f0      	bne.n	800676c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d030      	beq.n	80067f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d016      	beq.n	80067cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800679e:	4b30      	ldr	r3, [pc, #192]	; (8006860 <HAL_RCC_OscConfig+0x2b4>)
 80067a0:	2201      	movs	r2, #1
 80067a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a4:	f7fa fb1c 	bl	8000de0 <HAL_GetTick>
 80067a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067aa:	e008      	b.n	80067be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067ac:	f7fa fb18 	bl	8000de0 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e15b      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067be:	4b26      	ldr	r3, [pc, #152]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 80067c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0f0      	beq.n	80067ac <HAL_RCC_OscConfig+0x200>
 80067ca:	e015      	b.n	80067f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067cc:	4b24      	ldr	r3, [pc, #144]	; (8006860 <HAL_RCC_OscConfig+0x2b4>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067d2:	f7fa fb05 	bl	8000de0 <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067d8:	e008      	b.n	80067ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067da:	f7fa fb01 	bl	8000de0 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d901      	bls.n	80067ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e144      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067ec:	4b1a      	ldr	r3, [pc, #104]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 80067ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1f0      	bne.n	80067da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 80a0 	beq.w	8006946 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006806:	2300      	movs	r3, #0
 8006808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800680a:	4b13      	ldr	r3, [pc, #76]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10f      	bne.n	8006836 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006816:	2300      	movs	r3, #0
 8006818:	60bb      	str	r3, [r7, #8]
 800681a:	4b0f      	ldr	r3, [pc, #60]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	4a0e      	ldr	r2, [pc, #56]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 8006820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006824:	6413      	str	r3, [r2, #64]	; 0x40
 8006826:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <HAL_RCC_OscConfig+0x2ac>)
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682e:	60bb      	str	r3, [r7, #8]
 8006830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006832:	2301      	movs	r3, #1
 8006834:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006836:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <HAL_RCC_OscConfig+0x2b8>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683e:	2b00      	cmp	r3, #0
 8006840:	d121      	bne.n	8006886 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006842:	4b08      	ldr	r3, [pc, #32]	; (8006864 <HAL_RCC_OscConfig+0x2b8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a07      	ldr	r2, [pc, #28]	; (8006864 <HAL_RCC_OscConfig+0x2b8>)
 8006848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800684c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800684e:	f7fa fac7 	bl	8000de0 <HAL_GetTick>
 8006852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006854:	e011      	b.n	800687a <HAL_RCC_OscConfig+0x2ce>
 8006856:	bf00      	nop
 8006858:	40023800 	.word	0x40023800
 800685c:	42470000 	.word	0x42470000
 8006860:	42470e80 	.word	0x42470e80
 8006864:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006868:	f7fa faba 	bl	8000de0 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e0fd      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800687a:	4b81      	ldr	r3, [pc, #516]	; (8006a80 <HAL_RCC_OscConfig+0x4d4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0f0      	beq.n	8006868 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d106      	bne.n	800689c <HAL_RCC_OscConfig+0x2f0>
 800688e:	4b7d      	ldr	r3, [pc, #500]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 8006890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006892:	4a7c      	ldr	r2, [pc, #496]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 8006894:	f043 0301 	orr.w	r3, r3, #1
 8006898:	6713      	str	r3, [r2, #112]	; 0x70
 800689a:	e01c      	b.n	80068d6 <HAL_RCC_OscConfig+0x32a>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	2b05      	cmp	r3, #5
 80068a2:	d10c      	bne.n	80068be <HAL_RCC_OscConfig+0x312>
 80068a4:	4b77      	ldr	r3, [pc, #476]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 80068a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a8:	4a76      	ldr	r2, [pc, #472]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 80068aa:	f043 0304 	orr.w	r3, r3, #4
 80068ae:	6713      	str	r3, [r2, #112]	; 0x70
 80068b0:	4b74      	ldr	r3, [pc, #464]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 80068b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b4:	4a73      	ldr	r2, [pc, #460]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 80068b6:	f043 0301 	orr.w	r3, r3, #1
 80068ba:	6713      	str	r3, [r2, #112]	; 0x70
 80068bc:	e00b      	b.n	80068d6 <HAL_RCC_OscConfig+0x32a>
 80068be:	4b71      	ldr	r3, [pc, #452]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 80068c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c2:	4a70      	ldr	r2, [pc, #448]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 80068c4:	f023 0301 	bic.w	r3, r3, #1
 80068c8:	6713      	str	r3, [r2, #112]	; 0x70
 80068ca:	4b6e      	ldr	r3, [pc, #440]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 80068cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ce:	4a6d      	ldr	r2, [pc, #436]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 80068d0:	f023 0304 	bic.w	r3, r3, #4
 80068d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d015      	beq.n	800690a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068de:	f7fa fa7f 	bl	8000de0 <HAL_GetTick>
 80068e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068e4:	e00a      	b.n	80068fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068e6:	f7fa fa7b 	bl	8000de0 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d901      	bls.n	80068fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e0bc      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068fc:	4b61      	ldr	r3, [pc, #388]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 80068fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0ee      	beq.n	80068e6 <HAL_RCC_OscConfig+0x33a>
 8006908:	e014      	b.n	8006934 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800690a:	f7fa fa69 	bl	8000de0 <HAL_GetTick>
 800690e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006910:	e00a      	b.n	8006928 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006912:	f7fa fa65 	bl	8000de0 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006920:	4293      	cmp	r3, r2
 8006922:	d901      	bls.n	8006928 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e0a6      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006928:	4b56      	ldr	r3, [pc, #344]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 800692a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1ee      	bne.n	8006912 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006934:	7dfb      	ldrb	r3, [r7, #23]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d105      	bne.n	8006946 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800693a:	4b52      	ldr	r3, [pc, #328]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 800693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693e:	4a51      	ldr	r2, [pc, #324]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 8006940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006944:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 8092 	beq.w	8006a74 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006950:	4b4c      	ldr	r3, [pc, #304]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f003 030c 	and.w	r3, r3, #12
 8006958:	2b08      	cmp	r3, #8
 800695a:	d05c      	beq.n	8006a16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	2b02      	cmp	r3, #2
 8006962:	d141      	bne.n	80069e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006964:	4b48      	ldr	r3, [pc, #288]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800696a:	f7fa fa39 	bl	8000de0 <HAL_GetTick>
 800696e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006970:	e008      	b.n	8006984 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006972:	f7fa fa35 	bl	8000de0 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e078      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006984:	4b3f      	ldr	r3, [pc, #252]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1f0      	bne.n	8006972 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	69da      	ldr	r2, [r3, #28]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	019b      	lsls	r3, r3, #6
 80069a0:	431a      	orrs	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	085b      	lsrs	r3, r3, #1
 80069a8:	3b01      	subs	r3, #1
 80069aa:	041b      	lsls	r3, r3, #16
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b2:	061b      	lsls	r3, r3, #24
 80069b4:	4933      	ldr	r1, [pc, #204]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069ba:	4b33      	ldr	r3, [pc, #204]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 80069bc:	2201      	movs	r2, #1
 80069be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c0:	f7fa fa0e 	bl	8000de0 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069c8:	f7fa fa0a 	bl	8000de0 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e04d      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069da:	4b2a      	ldr	r3, [pc, #168]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0f0      	beq.n	80069c8 <HAL_RCC_OscConfig+0x41c>
 80069e6:	e045      	b.n	8006a74 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069e8:	4b27      	ldr	r3, [pc, #156]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ee:	f7fa f9f7 	bl	8000de0 <HAL_GetTick>
 80069f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069f4:	e008      	b.n	8006a08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069f6:	f7fa f9f3 	bl	8000de0 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d901      	bls.n	8006a08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e036      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a08:	4b1e      	ldr	r3, [pc, #120]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1f0      	bne.n	80069f6 <HAL_RCC_OscConfig+0x44a>
 8006a14:	e02e      	b.n	8006a74 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d101      	bne.n	8006a22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e029      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a22:	4b18      	ldr	r3, [pc, #96]	; (8006a84 <HAL_RCC_OscConfig+0x4d8>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d11c      	bne.n	8006a70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d115      	bne.n	8006a70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d10d      	bne.n	8006a70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d106      	bne.n	8006a70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d001      	beq.n	8006a74 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e000      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	40007000 	.word	0x40007000
 8006a84:	40023800 	.word	0x40023800
 8006a88:	42470060 	.word	0x42470060

08006a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e0cc      	b.n	8006c3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006aa0:	4b68      	ldr	r3, [pc, #416]	; (8006c44 <HAL_RCC_ClockConfig+0x1b8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 030f 	and.w	r3, r3, #15
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d90c      	bls.n	8006ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aae:	4b65      	ldr	r3, [pc, #404]	; (8006c44 <HAL_RCC_ClockConfig+0x1b8>)
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ab6:	4b63      	ldr	r3, [pc, #396]	; (8006c44 <HAL_RCC_ClockConfig+0x1b8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 030f 	and.w	r3, r3, #15
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d001      	beq.n	8006ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e0b8      	b.n	8006c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d020      	beq.n	8006b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d005      	beq.n	8006aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ae0:	4b59      	ldr	r3, [pc, #356]	; (8006c48 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	4a58      	ldr	r2, [pc, #352]	; (8006c48 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006aea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0308 	and.w	r3, r3, #8
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d005      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006af8:	4b53      	ldr	r3, [pc, #332]	; (8006c48 <HAL_RCC_ClockConfig+0x1bc>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	4a52      	ldr	r2, [pc, #328]	; (8006c48 <HAL_RCC_ClockConfig+0x1bc>)
 8006afe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b04:	4b50      	ldr	r3, [pc, #320]	; (8006c48 <HAL_RCC_ClockConfig+0x1bc>)
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	494d      	ldr	r1, [pc, #308]	; (8006c48 <HAL_RCC_ClockConfig+0x1bc>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d044      	beq.n	8006bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d107      	bne.n	8006b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b2a:	4b47      	ldr	r3, [pc, #284]	; (8006c48 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d119      	bne.n	8006b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e07f      	b.n	8006c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d003      	beq.n	8006b4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	d107      	bne.n	8006b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b4a:	4b3f      	ldr	r3, [pc, #252]	; (8006c48 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d109      	bne.n	8006b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e06f      	b.n	8006c3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b5a:	4b3b      	ldr	r3, [pc, #236]	; (8006c48 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e067      	b.n	8006c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b6a:	4b37      	ldr	r3, [pc, #220]	; (8006c48 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f023 0203 	bic.w	r2, r3, #3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	4934      	ldr	r1, [pc, #208]	; (8006c48 <HAL_RCC_ClockConfig+0x1bc>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b7c:	f7fa f930 	bl	8000de0 <HAL_GetTick>
 8006b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b82:	e00a      	b.n	8006b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b84:	f7fa f92c 	bl	8000de0 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e04f      	b.n	8006c3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b9a:	4b2b      	ldr	r3, [pc, #172]	; (8006c48 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f003 020c 	and.w	r2, r3, #12
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d1eb      	bne.n	8006b84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bac:	4b25      	ldr	r3, [pc, #148]	; (8006c44 <HAL_RCC_ClockConfig+0x1b8>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 030f 	and.w	r3, r3, #15
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d20c      	bcs.n	8006bd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bba:	4b22      	ldr	r3, [pc, #136]	; (8006c44 <HAL_RCC_ClockConfig+0x1b8>)
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bc2:	4b20      	ldr	r3, [pc, #128]	; (8006c44 <HAL_RCC_ClockConfig+0x1b8>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 030f 	and.w	r3, r3, #15
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d001      	beq.n	8006bd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e032      	b.n	8006c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0304 	and.w	r3, r3, #4
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d008      	beq.n	8006bf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006be0:	4b19      	ldr	r3, [pc, #100]	; (8006c48 <HAL_RCC_ClockConfig+0x1bc>)
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	4916      	ldr	r1, [pc, #88]	; (8006c48 <HAL_RCC_ClockConfig+0x1bc>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0308 	and.w	r3, r3, #8
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d009      	beq.n	8006c12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bfe:	4b12      	ldr	r3, [pc, #72]	; (8006c48 <HAL_RCC_ClockConfig+0x1bc>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	490e      	ldr	r1, [pc, #56]	; (8006c48 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c12:	f000 f821 	bl	8006c58 <HAL_RCC_GetSysClockFreq>
 8006c16:	4601      	mov	r1, r0
 8006c18:	4b0b      	ldr	r3, [pc, #44]	; (8006c48 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	091b      	lsrs	r3, r3, #4
 8006c1e:	f003 030f 	and.w	r3, r3, #15
 8006c22:	4a0a      	ldr	r2, [pc, #40]	; (8006c4c <HAL_RCC_ClockConfig+0x1c0>)
 8006c24:	5cd3      	ldrb	r3, [r2, r3]
 8006c26:	fa21 f303 	lsr.w	r3, r1, r3
 8006c2a:	4a09      	ldr	r2, [pc, #36]	; (8006c50 <HAL_RCC_ClockConfig+0x1c4>)
 8006c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c2e:	4b09      	ldr	r3, [pc, #36]	; (8006c54 <HAL_RCC_ClockConfig+0x1c8>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fa f890 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	40023c00 	.word	0x40023c00
 8006c48:	40023800 	.word	0x40023800
 8006c4c:	0800f528 	.word	0x0800f528
 8006c50:	20000128 	.word	0x20000128
 8006c54:	20000000 	.word	0x20000000

08006c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c58:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	607b      	str	r3, [r7, #4]
 8006c64:	2300      	movs	r3, #0
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c70:	4b67      	ldr	r3, [pc, #412]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f003 030c 	and.w	r3, r3, #12
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d007      	beq.n	8006c8c <HAL_RCC_GetSysClockFreq+0x34>
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d008      	beq.n	8006c92 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f040 80bb 	bne.w	8006dfc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c86:	4b63      	ldr	r3, [pc, #396]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006c88:	60bb      	str	r3, [r7, #8]
       break;
 8006c8a:	e0ba      	b.n	8006e02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c8c:	4b62      	ldr	r3, [pc, #392]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006c8e:	60bb      	str	r3, [r7, #8]
      break;
 8006c90:	e0b7      	b.n	8006e02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c92:	4b5f      	ldr	r3, [pc, #380]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c9a:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c9c:	4b5c      	ldr	r3, [pc, #368]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d051      	beq.n	8006d4c <HAL_RCC_GetSysClockFreq+0xf4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ca8:	4b59      	ldr	r3, [pc, #356]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	099b      	lsrs	r3, r3, #6
 8006cae:	f04f 0400 	mov.w	r4, #0
 8006cb2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006cb6:	f04f 0200 	mov.w	r2, #0
 8006cba:	ea03 0501 	and.w	r5, r3, r1
 8006cbe:	ea04 0602 	and.w	r6, r4, r2
 8006cc2:	46ab      	mov	fp, r5
 8006cc4:	46b4      	mov	ip, r6
 8006cc6:	eb1b 030b 	adds.w	r3, fp, fp
 8006cca:	eb4c 040c 	adc.w	r4, ip, ip
 8006cce:	469b      	mov	fp, r3
 8006cd0:	46a4      	mov	ip, r4
 8006cd2:	eb1b 0b05 	adds.w	fp, fp, r5
 8006cd6:	eb4c 0c06 	adc.w	ip, ip, r6
 8006cda:	f04f 0100 	mov.w	r1, #0
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	ea4f 120c 	mov.w	r2, ip, lsl #4
 8006ce6:	ea42 721b 	orr.w	r2, r2, fp, lsr #28
 8006cea:	ea4f 110b 	mov.w	r1, fp, lsl #4
 8006cee:	468b      	mov	fp, r1
 8006cf0:	4694      	mov	ip, r2
 8006cf2:	ebbb 0b05 	subs.w	fp, fp, r5
 8006cf6:	eb6c 0c06 	sbc.w	ip, ip, r6
 8006cfa:	f04f 0100 	mov.w	r1, #0
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8006d06:	ea42 725b 	orr.w	r2, r2, fp, lsr #29
 8006d0a:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 8006d0e:	468b      	mov	fp, r1
 8006d10:	4694      	mov	ip, r2
 8006d12:	ebbb 0b05 	subs.w	fp, fp, r5
 8006d16:	eb6c 0c06 	sbc.w	ip, ip, r6
 8006d1a:	f04f 0100 	mov.w	r1, #0
 8006d1e:	f04f 0200 	mov.w	r2, #0
 8006d22:	ea4f 32cc 	mov.w	r2, ip, lsl #15
 8006d26:	ea42 425b 	orr.w	r2, r2, fp, lsr #17
 8006d2a:	ea4f 31cb 	mov.w	r1, fp, lsl #15
 8006d2e:	468b      	mov	fp, r1
 8006d30:	4694      	mov	ip, r2
 8006d32:	4658      	mov	r0, fp
 8006d34:	4661      	mov	r1, ip
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f04f 0400 	mov.w	r4, #0
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4623      	mov	r3, r4
 8006d40:	f7f9 fe68 	bl	8000a14 <__aeabi_uldivmod>
 8006d44:	4603      	mov	r3, r0
 8006d46:	460c      	mov	r4, r1
 8006d48:	60fb      	str	r3, [r7, #12]
 8006d4a:	e049      	b.n	8006de0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d4c:	4b30      	ldr	r3, [pc, #192]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	099b      	lsrs	r3, r3, #6
 8006d52:	f04f 0400 	mov.w	r4, #0
 8006d56:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006d5a:	f04f 0200 	mov.w	r2, #0
 8006d5e:	ea03 0501 	and.w	r5, r3, r1
 8006d62:	ea04 0602 	and.w	r6, r4, r2
 8006d66:	4629      	mov	r1, r5
 8006d68:	4632      	mov	r2, r6
 8006d6a:	f04f 0300 	mov.w	r3, #0
 8006d6e:	f04f 0400 	mov.w	r4, #0
 8006d72:	0154      	lsls	r4, r2, #5
 8006d74:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006d78:	014b      	lsls	r3, r1, #5
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	4622      	mov	r2, r4
 8006d7e:	1b49      	subs	r1, r1, r5
 8006d80:	eb62 0206 	sbc.w	r2, r2, r6
 8006d84:	f04f 0300 	mov.w	r3, #0
 8006d88:	f04f 0400 	mov.w	r4, #0
 8006d8c:	0194      	lsls	r4, r2, #6
 8006d8e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006d92:	018b      	lsls	r3, r1, #6
 8006d94:	1a5b      	subs	r3, r3, r1
 8006d96:	eb64 0402 	sbc.w	r4, r4, r2
 8006d9a:	f04f 0100 	mov.w	r1, #0
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	00e2      	lsls	r2, r4, #3
 8006da4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006da8:	00d9      	lsls	r1, r3, #3
 8006daa:	460b      	mov	r3, r1
 8006dac:	4614      	mov	r4, r2
 8006dae:	195b      	adds	r3, r3, r5
 8006db0:	eb44 0406 	adc.w	r4, r4, r6
 8006db4:	f04f 0100 	mov.w	r1, #0
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	02a2      	lsls	r2, r4, #10
 8006dbe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006dc2:	0299      	lsls	r1, r3, #10
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4614      	mov	r4, r2
 8006dc8:	4618      	mov	r0, r3
 8006dca:	4621      	mov	r1, r4
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f04f 0400 	mov.w	r4, #0
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	4623      	mov	r3, r4
 8006dd6:	f7f9 fe1d 	bl	8000a14 <__aeabi_uldivmod>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	460c      	mov	r4, r1
 8006dde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	0c1b      	lsrs	r3, r3, #16
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	3301      	adds	r3, #1
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df8:	60bb      	str	r3, [r7, #8]
      break;
 8006dfa:	e002      	b.n	8006e02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006dfc:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006dfe:	60bb      	str	r3, [r7, #8]
      break;
 8006e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e02:	68bb      	ldr	r3, [r7, #8]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8006e0e:	bf00      	nop
 8006e10:	40023800 	.word	0x40023800
 8006e14:	00f42400 	.word	0x00f42400
 8006e18:	00bb8000 	.word	0x00bb8000

08006e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e20:	4b03      	ldr	r3, [pc, #12]	; (8006e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e22:	681b      	ldr	r3, [r3, #0]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	20000128 	.word	0x20000128

08006e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e38:	f7ff fff0 	bl	8006e1c <HAL_RCC_GetHCLKFreq>
 8006e3c:	4601      	mov	r1, r0
 8006e3e:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	0a9b      	lsrs	r3, r3, #10
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	4a03      	ldr	r2, [pc, #12]	; (8006e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e4a:	5cd3      	ldrb	r3, [r2, r3]
 8006e4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	40023800 	.word	0x40023800
 8006e58:	0800f538 	.word	0x0800f538

08006e5c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d105      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d035      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e84:	4b67      	ldr	r3, [pc, #412]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e8a:	f7f9 ffa9 	bl	8000de0 <HAL_GetTick>
 8006e8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e90:	e008      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e92:	f7f9 ffa5 	bl	8000de0 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d901      	bls.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e0ba      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ea4:	4b60      	ldr	r3, [pc, #384]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1f0      	bne.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	019a      	lsls	r2, r3, #6
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	071b      	lsls	r3, r3, #28
 8006ebc:	495a      	ldr	r1, [pc, #360]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ec4:	4b57      	ldr	r3, [pc, #348]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006eca:	f7f9 ff89 	bl	8000de0 <HAL_GetTick>
 8006ece:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ed0:	e008      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ed2:	f7f9 ff85 	bl	8000de0 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d901      	bls.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e09a      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ee4:	4b50      	ldr	r3, [pc, #320]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0f0      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 8083 	beq.w	8007004 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	4b49      	ldr	r3, [pc, #292]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	4a48      	ldr	r2, [pc, #288]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f0e:	4b46      	ldr	r3, [pc, #280]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006f1a:	4b44      	ldr	r3, [pc, #272]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a43      	ldr	r2, [pc, #268]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f26:	f7f9 ff5b 	bl	8000de0 <HAL_GetTick>
 8006f2a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f2c:	e008      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006f2e:	f7f9 ff57 	bl	8000de0 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d901      	bls.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e06c      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f40:	4b3a      	ldr	r3, [pc, #232]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0f0      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f4c:	4b36      	ldr	r3, [pc, #216]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f54:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d02f      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d028      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f6a:	4b2f      	ldr	r3, [pc, #188]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f72:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f74:	4b2e      	ldr	r3, [pc, #184]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f7a:	4b2d      	ldr	r3, [pc, #180]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006f80:	4a29      	ldr	r2, [pc, #164]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f86:	4b28      	ldr	r3, [pc, #160]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d114      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006f92:	f7f9 ff25 	bl	8000de0 <HAL_GetTick>
 8006f96:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f98:	e00a      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f9a:	f7f9 ff21 	bl	8000de0 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d901      	bls.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e034      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fb0:	4b1d      	ldr	r3, [pc, #116]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb4:	f003 0302 	and.w	r3, r3, #2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d0ee      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fc8:	d10d      	bne.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006fca:	4b17      	ldr	r3, [pc, #92]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fde:	4912      	ldr	r1, [pc, #72]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	608b      	str	r3, [r1, #8]
 8006fe4:	e005      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006fe6:	4b10      	ldr	r3, [pc, #64]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	4a0f      	ldr	r2, [pc, #60]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006fec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006ff0:	6093      	str	r3, [r2, #8]
 8006ff2:	4b0d      	ldr	r3, [pc, #52]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006ff4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ffe:	490a      	ldr	r1, [pc, #40]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007000:	4313      	orrs	r3, r2
 8007002:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	7c1a      	ldrb	r2, [r3, #16]
 8007014:	4b07      	ldr	r3, [pc, #28]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007016:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	42470068 	.word	0x42470068
 8007028:	40023800 	.word	0x40023800
 800702c:	40007000 	.word	0x40007000
 8007030:	42470e40 	.word	0x42470e40
 8007034:	424711e0 	.word	0x424711e0

08007038 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d13d      	bne.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007056:	4b22      	ldr	r3, [pc, #136]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800705e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d004      	beq.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007066:	2b01      	cmp	r3, #1
 8007068:	d12f      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800706a:	4b1e      	ldr	r3, [pc, #120]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800706c:	617b      	str	r3, [r7, #20]
          break;
 800706e:	e02f      	b.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007070:	4b1b      	ldr	r3, [pc, #108]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800707c:	d108      	bne.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800707e:	4b18      	ldr	r3, [pc, #96]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007086:	4a17      	ldr	r2, [pc, #92]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007088:	fbb2 f3f3 	udiv	r3, r2, r3
 800708c:	613b      	str	r3, [r7, #16]
 800708e:	e007      	b.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007090:	4b13      	ldr	r3, [pc, #76]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007098:	4a13      	ldr	r2, [pc, #76]	; (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800709a:	fbb2 f3f3 	udiv	r3, r2, r3
 800709e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80070a0:	4b0f      	ldr	r3, [pc, #60]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80070a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070a6:	099b      	lsrs	r3, r3, #6
 80070a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	fb02 f303 	mul.w	r3, r2, r3
 80070b2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80070b4:	4b0a      	ldr	r3, [pc, #40]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80070b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ba:	0f1b      	lsrs	r3, r3, #28
 80070bc:	f003 0307 	and.w	r3, r3, #7
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c6:	617b      	str	r3, [r7, #20]
          break;
 80070c8:	e002      	b.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	617b      	str	r3, [r7, #20]
          break;
 80070ce:	bf00      	nop
        }
      }
      break;
 80070d0:	bf00      	nop
    }
  }
  return frequency;
 80070d2:	697b      	ldr	r3, [r7, #20]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	371c      	adds	r7, #28
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	40023800 	.word	0x40023800
 80070e4:	00bb8000 	.word	0x00bb8000
 80070e8:	00f42400 	.word	0x00f42400

080070ec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e022      	b.n	8007144 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d105      	bne.n	8007116 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f006 fd27 	bl	800db64 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2203      	movs	r2, #3
 800711a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f814 	bl	800714c <HAL_SD_InitCard>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e00a      	b.n	8007144 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800714c:	b5b0      	push	{r4, r5, r7, lr}
 800714e:	b08e      	sub	sp, #56	; 0x38
 8007150:	af04      	add	r7, sp, #16
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007154:	2300      	movs	r3, #0
 8007156:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800715c:	2300      	movs	r3, #0
 800715e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007160:	2300      	movs	r3, #0
 8007162:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007164:	2300      	movs	r3, #0
 8007166:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007168:	2376      	movs	r3, #118	; 0x76
 800716a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681d      	ldr	r5, [r3, #0]
 8007170:	466c      	mov	r4, sp
 8007172:	f107 0314 	add.w	r3, r7, #20
 8007176:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800717a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800717e:	f107 0308 	add.w	r3, r7, #8
 8007182:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007184:	4628      	mov	r0, r5
 8007186:	f001 fe88 	bl	8008e9a <SDIO_Init>
 800718a:	4603      	mov	r3, r0
 800718c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e031      	b.n	8007200 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800719c:	4b1a      	ldr	r3, [pc, #104]	; (8007208 <HAL_SD_InitCard+0xbc>)
 800719e:	2200      	movs	r2, #0
 80071a0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f001 fec0 	bl	8008f2c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80071ac:	4b16      	ldr	r3, [pc, #88]	; (8007208 <HAL_SD_InitCard+0xbc>)
 80071ae:	2201      	movs	r2, #1
 80071b0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 ff00 	bl	8007fb8 <SD_PowerON>
 80071b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e013      	b.n	8007200 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fe1f 	bl	8007e1c <SD_InitCard>
 80071de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00b      	beq.n	80071fe <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	431a      	orrs	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e000      	b.n	8007200 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3728      	adds	r7, #40	; 0x28
 8007204:	46bd      	mov	sp, r7
 8007206:	bdb0      	pop	{r4, r5, r7, pc}
 8007208:	422580a0 	.word	0x422580a0

0800720c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b092      	sub	sp, #72	; 0x48
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800721a:	f7f9 fde1 	bl	8000de0 <HAL_GetTick>
 800721e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d107      	bne.n	800723e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e1d9      	b.n	80075f2 <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b01      	cmp	r3, #1
 8007248:	f040 81cc 	bne.w	80075e4 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	441a      	add	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800725c:	429a      	cmp	r2, r3
 800725e:	d907      	bls.n	8007270 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007264:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e1c0      	b.n	80075f2 <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2203      	movs	r2, #3
 8007274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2200      	movs	r2, #0
 800727e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007284:	2b01      	cmp	r3, #1
 8007286:	d002      	beq.n	800728e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728a:	025b      	lsls	r3, r3, #9
 800728c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007296:	4618      	mov	r0, r3
 8007298:	f001 fedb 	bl	8009052 <SDMMC_CmdBlockLength>
 800729c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800729e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00f      	beq.n	80072c4 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a9b      	ldr	r2, [pc, #620]	; (8007518 <HAL_SD_ReadBlocks+0x30c>)
 80072aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072b2:	431a      	orrs	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e196      	b.n	80075f2 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80072c4:	f04f 33ff 	mov.w	r3, #4294967295
 80072c8:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	025b      	lsls	r3, r3, #9
 80072ce:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80072d0:	2390      	movs	r3, #144	; 0x90
 80072d2:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80072d4:	2302      	movs	r3, #2
 80072d6:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80072d8:	2300      	movs	r3, #0
 80072da:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80072dc:	2301      	movs	r3, #1
 80072de:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f107 0214 	add.w	r2, r7, #20
 80072e8:	4611      	mov	r1, r2
 80072ea:	4618      	mov	r0, r3
 80072ec:	f001 fe85 	bl	8008ffa <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d90a      	bls.n	800730c <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2202      	movs	r2, #2
 80072fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007302:	4618      	mov	r0, r3
 8007304:	f001 fee9 	bl	80090da <SDMMC_CmdReadMultiBlock>
 8007308:	6478      	str	r0, [r7, #68]	; 0x44
 800730a:	e009      	b.n	8007320 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007318:	4618      	mov	r0, r3
 800731a:	f001 febc 	bl	8009096 <SDMMC_CmdReadSingleBlock>
 800731e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007322:	2b00      	cmp	r3, #0
 8007324:	d012      	beq.n	800734c <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a7b      	ldr	r2, [pc, #492]	; (8007518 <HAL_SD_ReadBlocks+0x30c>)
 800732c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007334:	431a      	orrs	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e152      	b.n	80075f2 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007350:	e061      	b.n	8007416 <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d03c      	beq.n	80073da <HAL_SD_ReadBlocks+0x1ce>
 8007360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007362:	2b00      	cmp	r3, #0
 8007364:	d039      	beq.n	80073da <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007366:	2300      	movs	r3, #0
 8007368:	643b      	str	r3, [r7, #64]	; 0x40
 800736a:	e033      	b.n	80073d4 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4618      	mov	r0, r3
 8007372:	f001 fdbd 	bl	8008ef0 <SDIO_ReadFIFO>
 8007376:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737a:	b2da      	uxtb	r2, r3
 800737c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007382:	3301      	adds	r3, #1
 8007384:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007388:	3b01      	subs	r3, #1
 800738a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738e:	0a1b      	lsrs	r3, r3, #8
 8007390:	b2da      	uxtb	r2, r3
 8007392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007394:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007398:	3301      	adds	r3, #1
 800739a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800739c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800739e:	3b01      	subs	r3, #1
 80073a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80073a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a4:	0c1b      	lsrs	r3, r3, #16
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073aa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80073ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ae:	3301      	adds	r3, #1
 80073b0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80073b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b4:	3b01      	subs	r3, #1
 80073b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80073b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ba:	0e1b      	lsrs	r3, r3, #24
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80073c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c4:	3301      	adds	r3, #1
 80073c6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80073c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ca:	3b01      	subs	r3, #1
 80073cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80073ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d0:	3301      	adds	r3, #1
 80073d2:	643b      	str	r3, [r7, #64]	; 0x40
 80073d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d6:	2b07      	cmp	r3, #7
 80073d8:	d9c8      	bls.n	800736c <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80073da:	f7f9 fd01 	bl	8000de0 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d902      	bls.n	80073f0 <HAL_SD_ReadBlocks+0x1e4>
 80073ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d112      	bne.n	8007416 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a48      	ldr	r2, [pc, #288]	; (8007518 <HAL_SD_ReadBlocks+0x30c>)
 80073f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e0ed      	b.n	80075f2 <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800741c:	f240 332a 	movw	r3, #810	; 0x32a
 8007420:	4013      	ands	r3, r2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d095      	beq.n	8007352 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800742c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007430:	2b00      	cmp	r3, #0
 8007432:	d022      	beq.n	800747a <HAL_SD_ReadBlocks+0x26e>
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d91f      	bls.n	800747a <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743e:	2b03      	cmp	r3, #3
 8007440:	d01b      	beq.n	800747a <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4618      	mov	r0, r3
 8007448:	f001 feae 	bl	80091a8 <SDMMC_CmdStopTransfer>
 800744c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800744e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007450:	2b00      	cmp	r3, #0
 8007452:	d012      	beq.n	800747a <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a2f      	ldr	r2, [pc, #188]	; (8007518 <HAL_SD_ReadBlocks+0x30c>)
 800745a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007462:	431a      	orrs	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e0bb      	b.n	80075f2 <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007480:	f003 0308 	and.w	r3, r3, #8
 8007484:	2b00      	cmp	r3, #0
 8007486:	d012      	beq.n	80074ae <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a22      	ldr	r2, [pc, #136]	; (8007518 <HAL_SD_ReadBlocks+0x30c>)
 800748e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007494:	f043 0208 	orr.w	r2, r3, #8
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e0a1      	b.n	80075f2 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b4:	f003 0302 	and.w	r3, r3, #2
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d012      	beq.n	80074e2 <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a15      	ldr	r2, [pc, #84]	; (8007518 <HAL_SD_ReadBlocks+0x30c>)
 80074c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c8:	f043 0202 	orr.w	r2, r3, #2
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e087      	b.n	80075f2 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e8:	f003 0320 	and.w	r3, r3, #32
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d064      	beq.n	80075ba <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a08      	ldr	r2, [pc, #32]	; (8007518 <HAL_SD_ReadBlocks+0x30c>)
 80074f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fc:	f043 0220 	orr.w	r2, r3, #32
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e06d      	b.n	80075f2 <HAL_SD_ReadBlocks+0x3e6>
 8007516:	bf00      	nop
 8007518:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4618      	mov	r0, r3
 8007522:	f001 fce5 	bl	8008ef0 <SDIO_ReadFIFO>
 8007526:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752a:	b2da      	uxtb	r2, r3
 800752c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007532:	3301      	adds	r3, #1
 8007534:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007538:	3b01      	subs	r3, #1
 800753a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800753c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753e:	0a1b      	lsrs	r3, r3, #8
 8007540:	b2da      	uxtb	r2, r3
 8007542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007544:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007548:	3301      	adds	r3, #1
 800754a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800754c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754e:	3b01      	subs	r3, #1
 8007550:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007554:	0c1b      	lsrs	r3, r3, #16
 8007556:	b2da      	uxtb	r2, r3
 8007558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800755c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755e:	3301      	adds	r3, #1
 8007560:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007564:	3b01      	subs	r3, #1
 8007566:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	0e1b      	lsrs	r3, r3, #24
 800756c:	b2da      	uxtb	r2, r3
 800756e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007570:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007574:	3301      	adds	r3, #1
 8007576:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800757a:	3b01      	subs	r3, #1
 800757c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800757e:	f7f9 fc2f 	bl	8000de0 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800758a:	429a      	cmp	r2, r3
 800758c:	d902      	bls.n	8007594 <HAL_SD_ReadBlocks+0x388>
 800758e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007590:	2b00      	cmp	r3, #0
 8007592:	d112      	bne.n	80075ba <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a18      	ldr	r2, [pc, #96]	; (80075fc <HAL_SD_ReadBlocks+0x3f0>)
 800759a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e01b      	b.n	80075f2 <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <HAL_SD_ReadBlocks+0x3c2>
 80075c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1a6      	bne.n	800751c <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80075d6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	e006      	b.n	80075f2 <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
  }
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3748      	adds	r7, #72	; 0x48
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	004005ff 	.word	0x004005ff

08007600 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b092      	sub	sp, #72	; 0x48
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
 800760c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800760e:	f7f9 fbe7 	bl	8000de0 <HAL_GetTick>
 8007612:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d107      	bne.n	8007632 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007626:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e184      	b.n	800793c <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b01      	cmp	r3, #1
 800763c:	f040 8177 	bne.w	800792e <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	441a      	add	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007650:	429a      	cmp	r2, r3
 8007652:	d907      	bls.n	8007664 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e16b      	b.n	800793c <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2203      	movs	r2, #3
 8007668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2200      	movs	r2, #0
 8007672:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007678:	2b01      	cmp	r3, #1
 800767a:	d002      	beq.n	8007682 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800767c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767e:	025b      	lsls	r3, r3, #9
 8007680:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f44f 7100 	mov.w	r1, #512	; 0x200
 800768a:	4618      	mov	r0, r3
 800768c:	f001 fce1 	bl	8009052 <SDMMC_CmdBlockLength>
 8007690:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8007692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00f      	beq.n	80076b8 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a9d      	ldr	r2, [pc, #628]	; (8007914 <HAL_SD_WriteBlocks+0x314>)
 800769e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076a6:	431a      	orrs	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e141      	b.n	800793c <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80076b8:	f04f 33ff 	mov.w	r3, #4294967295
 80076bc:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	025b      	lsls	r3, r3, #9
 80076c2:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80076c4:	2390      	movs	r3, #144	; 0x90
 80076c6:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80076c8:	2300      	movs	r3, #0
 80076ca:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80076d0:	2301      	movs	r3, #1
 80076d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f107 0218 	add.w	r2, r7, #24
 80076dc:	4611      	mov	r1, r2
 80076de:	4618      	mov	r0, r3
 80076e0:	f001 fc8b 	bl	8008ffa <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d90a      	bls.n	8007700 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2220      	movs	r2, #32
 80076ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80076f6:	4618      	mov	r0, r3
 80076f8:	f001 fd33 	bl	8009162 <SDMMC_CmdWriteMultiBlock>
 80076fc:	6478      	str	r0, [r7, #68]	; 0x44
 80076fe:	e009      	b.n	8007714 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2210      	movs	r2, #16
 8007704:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800770c:	4618      	mov	r0, r3
 800770e:	f001 fd06 	bl	800911e <SDMMC_CmdWriteSingleBlock>
 8007712:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007716:	2b00      	cmp	r3, #0
 8007718:	d012      	beq.n	8007740 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a7d      	ldr	r2, [pc, #500]	; (8007914 <HAL_SD_WriteBlocks+0x314>)
 8007720:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007728:	431a      	orrs	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e0fd      	b.n	800793c <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007744:	e065      	b.n	8007812 <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d040      	beq.n	80077d6 <HAL_SD_WriteBlocks+0x1d6>
 8007754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d03d      	beq.n	80077d6 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800775a:	2300      	movs	r3, #0
 800775c:	643b      	str	r3, [r7, #64]	; 0x40
 800775e:	e037      	b.n	80077d0 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8007760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007768:	3301      	adds	r3, #1
 800776a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800776c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776e:	3b01      	subs	r3, #1
 8007770:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	021a      	lsls	r2, r3, #8
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	4313      	orrs	r3, r2
 800777c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800777e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007780:	3301      	adds	r3, #1
 8007782:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007786:	3b01      	subs	r3, #1
 8007788:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800778a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	041a      	lsls	r2, r3, #16
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007798:	3301      	adds	r3, #1
 800779a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800779c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779e:	3b01      	subs	r3, #1
 80077a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80077a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	061a      	lsls	r2, r3, #24
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80077ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b0:	3301      	adds	r3, #1
 80077b2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80077b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b6:	3b01      	subs	r3, #1
 80077b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f107 0214 	add.w	r2, r7, #20
 80077c2:	4611      	mov	r1, r2
 80077c4:	4618      	mov	r0, r3
 80077c6:	f001 fba0 	bl	8008f0a <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80077ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077cc:	3301      	adds	r3, #1
 80077ce:	643b      	str	r3, [r7, #64]	; 0x40
 80077d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077d2:	2b07      	cmp	r3, #7
 80077d4:	d9c4      	bls.n	8007760 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80077d6:	f7f9 fb03 	bl	8000de0 <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d902      	bls.n	80077ec <HAL_SD_WriteBlocks+0x1ec>
 80077e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d112      	bne.n	8007812 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a48      	ldr	r2, [pc, #288]	; (8007914 <HAL_SD_WriteBlocks+0x314>)
 80077f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077fa:	431a      	orrs	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e094      	b.n	800793c <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007818:	f240 331a 	movw	r3, #794	; 0x31a
 800781c:	4013      	ands	r3, r2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d091      	beq.n	8007746 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800782c:	2b00      	cmp	r3, #0
 800782e:	d022      	beq.n	8007876 <HAL_SD_WriteBlocks+0x276>
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d91f      	bls.n	8007876 <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783a:	2b03      	cmp	r3, #3
 800783c:	d01b      	beq.n	8007876 <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4618      	mov	r0, r3
 8007844:	f001 fcb0 	bl	80091a8 <SDMMC_CmdStopTransfer>
 8007848:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800784a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800784c:	2b00      	cmp	r3, #0
 800784e:	d012      	beq.n	8007876 <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a2f      	ldr	r2, [pc, #188]	; (8007914 <HAL_SD_WriteBlocks+0x314>)
 8007856:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800785c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800785e:	431a      	orrs	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e062      	b.n	800793c <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787c:	f003 0308 	and.w	r3, r3, #8
 8007880:	2b00      	cmp	r3, #0
 8007882:	d012      	beq.n	80078aa <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a22      	ldr	r2, [pc, #136]	; (8007914 <HAL_SD_WriteBlocks+0x314>)
 800788a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007890:	f043 0208 	orr.w	r2, r3, #8
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e048      	b.n	800793c <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d012      	beq.n	80078de <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a15      	ldr	r2, [pc, #84]	; (8007914 <HAL_SD_WriteBlocks+0x314>)
 80078be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c4:	f043 0202 	orr.w	r2, r3, #2
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e02e      	b.n	800793c <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e4:	f003 0310 	and.w	r3, r3, #16
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d015      	beq.n	8007918 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a08      	ldr	r2, [pc, #32]	; (8007914 <HAL_SD_WriteBlocks+0x314>)
 80078f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	f043 0210 	orr.w	r2, r3, #16
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e014      	b.n	800793c <HAL_SD_WriteBlocks+0x33c>
 8007912:	bf00      	nop
 8007914:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007920:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	e006      	b.n	800793c <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007932:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
  }
}
 800793c:	4618      	mov	r0, r3
 800793e:	3748      	adds	r7, #72	; 0x48
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007952:	0f9b      	lsrs	r3, r3, #30
 8007954:	b2da      	uxtb	r2, r3
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800795e:	0e9b      	lsrs	r3, r3, #26
 8007960:	b2db      	uxtb	r3, r3
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	b2da      	uxtb	r2, r3
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007970:	0e1b      	lsrs	r3, r3, #24
 8007972:	b2db      	uxtb	r3, r3
 8007974:	f003 0303 	and.w	r3, r3, #3
 8007978:	b2da      	uxtb	r2, r3
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007982:	0c1b      	lsrs	r3, r3, #16
 8007984:	b2da      	uxtb	r2, r3
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800798e:	0a1b      	lsrs	r3, r3, #8
 8007990:	b2da      	uxtb	r2, r3
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800799a:	b2da      	uxtb	r2, r3
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079a4:	0d1b      	lsrs	r3, r3, #20
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079b0:	0c1b      	lsrs	r3, r3, #16
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	f003 030f 	and.w	r3, r3, #15
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079c2:	0bdb      	lsrs	r3, r3, #15
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079d4:	0b9b      	lsrs	r3, r3, #14
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079e6:	0b5b      	lsrs	r3, r3, #13
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079f8:	0b1b      	lsrs	r3, r3, #12
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d163      	bne.n	8007adc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a18:	009a      	lsls	r2, r3, #2
 8007a1a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007a1e:	4013      	ands	r3, r2
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007a24:	0f92      	lsrs	r2, r2, #30
 8007a26:	431a      	orrs	r2, r3
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a30:	0edb      	lsrs	r3, r3, #27
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a42:	0e1b      	lsrs	r3, r3, #24
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a54:	0d5b      	lsrs	r3, r3, #21
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	f003 0307 	and.w	r3, r3, #7
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a66:	0c9b      	lsrs	r3, r3, #18
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	f003 0307 	and.w	r3, r3, #7
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a78:	0bdb      	lsrs	r3, r3, #15
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	7e1b      	ldrb	r3, [r3, #24]
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	3302      	adds	r3, #2
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007aa6:	fb02 f203 	mul.w	r2, r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	7a1b      	ldrb	r3, [r3, #8]
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	f003 030f 	and.w	r3, r3, #15
 8007ab8:	2201      	movs	r2, #1
 8007aba:	409a      	lsls	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007ac8:	0a52      	lsrs	r2, r2, #9
 8007aca:	fb02 f203 	mul.w	r2, r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ad8:	661a      	str	r2, [r3, #96]	; 0x60
 8007ada:	e031      	b.n	8007b40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d11d      	bne.n	8007b20 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ae8:	041b      	lsls	r3, r3, #16
 8007aea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007af2:	0c1b      	lsrs	r3, r3, #16
 8007af4:	431a      	orrs	r2, r3
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	3301      	adds	r3, #1
 8007b00:	029a      	lsls	r2, r3, #10
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b14:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	661a      	str	r2, [r3, #96]	; 0x60
 8007b1e:	e00f      	b.n	8007b40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a58      	ldr	r2, [pc, #352]	; (8007c88 <HAL_SD_GetCardCSD+0x344>)
 8007b26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e09d      	b.n	8007c7c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b44:	0b9b      	lsrs	r3, r3, #14
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b56:	09db      	lsrs	r3, r3, #7
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b5e:	b2da      	uxtb	r2, r3
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b78:	0fdb      	lsrs	r3, r3, #31
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b84:	0f5b      	lsrs	r3, r3, #29
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	f003 0303 	and.w	r3, r3, #3
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b96:	0e9b      	lsrs	r3, r3, #26
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	f003 0307 	and.w	r3, r3, #7
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba8:	0d9b      	lsrs	r3, r3, #22
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	f003 030f 	and.w	r3, r3, #15
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bba:	0d5b      	lsrs	r3, r3, #21
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd6:	0c1b      	lsrs	r3, r3, #16
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bea:	0bdb      	lsrs	r3, r3, #15
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfe:	0b9b      	lsrs	r3, r3, #14
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c12:	0b5b      	lsrs	r3, r3, #13
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	b2da      	uxtb	r2, r3
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c26:	0b1b      	lsrs	r3, r3, #12
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	f003 0301 	and.w	r3, r3, #1
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c3a:	0a9b      	lsrs	r3, r3, #10
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	f003 0303 	and.w	r3, r3, #3
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c4e:	0a1b      	lsrs	r3, r3, #8
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	f003 0303 	and.w	r3, r3, #3
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c62:	085b      	lsrs	r3, r3, #1
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	004005ff 	.word	0x004005ff

08007c8c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007ce4:	b5b0      	push	{r4, r5, r7, lr}
 8007ce6:	b08e      	sub	sp, #56	; 0x38
 8007ce8:	af04      	add	r7, sp, #16
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2203      	movs	r2, #3
 8007cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d02e      	beq.n	8007d5c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d04:	d106      	bne.n	8007d14 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	639a      	str	r2, [r3, #56]	; 0x38
 8007d12:	e029      	b.n	8007d68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d1a:	d10a      	bne.n	8007d32 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fa01 	bl	8008124 <SD_WideBus_Enable>
 8007d22:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	639a      	str	r2, [r3, #56]	; 0x38
 8007d30:	e01a      	b.n	8007d68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10a      	bne.n	8007d4e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fa3e 	bl	80081ba <SD_WideBus_Disable>
 8007d3e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	431a      	orrs	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	639a      	str	r2, [r3, #56]	; 0x38
 8007d4c:	e00c      	b.n	8007d68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	639a      	str	r2, [r3, #56]	; 0x38
 8007d5a:	e005      	b.n	8007d68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d009      	beq.n	8007d84 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a18      	ldr	r2, [pc, #96]	; (8007dd8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007d76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e024      	b.n	8007dce <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681d      	ldr	r5, [r3, #0]
 8007daa:	466c      	mov	r4, sp
 8007dac:	f107 0318 	add.w	r3, r7, #24
 8007db0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007db4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007db8:	f107 030c 	add.w	r3, r7, #12
 8007dbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	f001 f86b 	bl	8008e9a <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3728      	adds	r7, #40	; 0x28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	004005ff 	.word	0x004005ff

08007ddc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007de8:	f107 030c 	add.w	r3, r7, #12
 8007dec:	4619      	mov	r1, r3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f970 	bl	80080d4 <SD_SendStatus>
 8007df4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d005      	beq.n	8007e08 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	431a      	orrs	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	0a5b      	lsrs	r3, r3, #9
 8007e0c:	f003 030f 	and.w	r3, r3, #15
 8007e10:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007e12:	693b      	ldr	r3, [r7, #16]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007e1c:	b5b0      	push	{r4, r5, r7, lr}
 8007e1e:	b094      	sub	sp, #80	; 0x50
 8007e20:	af04      	add	r7, sp, #16
 8007e22:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007e24:	2301      	movs	r3, #1
 8007e26:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f001 f88c 	bl	8008f4a <SDIO_GetPowerState>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d102      	bne.n	8007e3e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007e38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007e3c:	e0b7      	b.n	8007fae <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d02f      	beq.n	8007ea6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f001 fab6 	bl	80093bc <SDMMC_CmdSendCID>
 8007e50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <SD_InitCard+0x40>
    {
      return errorstate;
 8007e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e5a:	e0a8      	b.n	8007fae <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2100      	movs	r1, #0
 8007e62:	4618      	mov	r0, r3
 8007e64:	f001 f8b6 	bl	8008fd4 <SDIO_GetResponse>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2104      	movs	r1, #4
 8007e74:	4618      	mov	r0, r3
 8007e76:	f001 f8ad 	bl	8008fd4 <SDIO_GetResponse>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2108      	movs	r1, #8
 8007e86:	4618      	mov	r0, r3
 8007e88:	f001 f8a4 	bl	8008fd4 <SDIO_GetResponse>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	210c      	movs	r1, #12
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f001 f89b 	bl	8008fd4 <SDIO_GetResponse>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d00d      	beq.n	8007eca <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f107 020e 	add.w	r2, r7, #14
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f001 fabc 	bl	8009436 <SDMMC_CmdSetRelAdd>
 8007ebe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <SD_InitCard+0xae>
    {
      return errorstate;
 8007ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec8:	e071      	b.n	8007fae <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d036      	beq.n	8007f40 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007ed2:	89fb      	ldrh	r3, [r7, #14]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee2:	041b      	lsls	r3, r3, #16
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	f001 fa86 	bl	80093f8 <SDMMC_CmdSendCSD>
 8007eec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d001      	beq.n	8007ef8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef6:	e05a      	b.n	8007fae <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2100      	movs	r1, #0
 8007efe:	4618      	mov	r0, r3
 8007f00:	f001 f868 	bl	8008fd4 <SDIO_GetResponse>
 8007f04:	4602      	mov	r2, r0
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2104      	movs	r1, #4
 8007f10:	4618      	mov	r0, r3
 8007f12:	f001 f85f 	bl	8008fd4 <SDIO_GetResponse>
 8007f16:	4602      	mov	r2, r0
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2108      	movs	r1, #8
 8007f22:	4618      	mov	r0, r3
 8007f24:	f001 f856 	bl	8008fd4 <SDIO_GetResponse>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	210c      	movs	r1, #12
 8007f34:	4618      	mov	r0, r3
 8007f36:	f001 f84d 	bl	8008fd4 <SDIO_GetResponse>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2104      	movs	r1, #4
 8007f46:	4618      	mov	r0, r3
 8007f48:	f001 f844 	bl	8008fd4 <SDIO_GetResponse>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	0d1a      	lsrs	r2, r3, #20
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007f54:	f107 0310 	add.w	r3, r7, #16
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7ff fcf2 	bl	8007944 <HAL_SD_GetCardCSD>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f6a:	e020      	b.n	8007fae <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6819      	ldr	r1, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f74:	041b      	lsls	r3, r3, #16
 8007f76:	f04f 0400 	mov.w	r4, #0
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	4623      	mov	r3, r4
 8007f7e:	4608      	mov	r0, r1
 8007f80:	f001 f934 	bl	80091ec <SDMMC_CmdSelDesel>
 8007f84:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <SD_InitCard+0x174>
  {
    return errorstate;
 8007f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f8e:	e00e      	b.n	8007fae <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681d      	ldr	r5, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	466c      	mov	r4, sp
 8007f98:	f103 0210 	add.w	r2, r3, #16
 8007f9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8007f9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f000 ff77 	bl	8008e9a <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3740      	adds	r7, #64	; 0x40
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007fb8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	617b      	str	r3, [r7, #20]
 8007fc8:	2300      	movs	r3, #0
 8007fca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f001 f92e 	bl	8009232 <SDMMC_CmdGoIdleState>
 8007fd6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	e072      	b.n	80080c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f001 f941 	bl	800926e <SDMMC_CmdOperCond>
 8007fec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00d      	beq.n	8008010 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f001 f917 	bl	8009232 <SDMMC_CmdGoIdleState>
 8008004:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d004      	beq.n	8008016 <SD_PowerON+0x5e>
    {
      return errorstate;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	e05b      	b.n	80080c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800801a:	2b01      	cmp	r3, #1
 800801c:	d137      	bne.n	800808e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2100      	movs	r1, #0
 8008024:	4618      	mov	r0, r3
 8008026:	f001 f941 	bl	80092ac <SDMMC_CmdAppCommand>
 800802a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d02d      	beq.n	800808e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008032:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008036:	e047      	b.n	80080c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2100      	movs	r1, #0
 800803e:	4618      	mov	r0, r3
 8008040:	f001 f934 	bl	80092ac <SDMMC_CmdAppCommand>
 8008044:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <SD_PowerON+0x98>
    {
      return errorstate;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	e03b      	b.n	80080c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	491e      	ldr	r1, [pc, #120]	; (80080d0 <SD_PowerON+0x118>)
 8008056:	4618      	mov	r0, r3
 8008058:	f001 f94a 	bl	80092f0 <SDMMC_CmdAppOperCommand>
 800805c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d002      	beq.n	800806a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008064:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008068:	e02e      	b.n	80080c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2100      	movs	r1, #0
 8008070:	4618      	mov	r0, r3
 8008072:	f000 ffaf 	bl	8008fd4 <SDIO_GetResponse>
 8008076:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	0fdb      	lsrs	r3, r3, #31
 800807c:	2b01      	cmp	r3, #1
 800807e:	d101      	bne.n	8008084 <SD_PowerON+0xcc>
 8008080:	2301      	movs	r3, #1
 8008082:	e000      	b.n	8008086 <SD_PowerON+0xce>
 8008084:	2300      	movs	r3, #0
 8008086:	613b      	str	r3, [r7, #16]

    count++;
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	3301      	adds	r3, #1
 800808c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008094:	4293      	cmp	r3, r2
 8008096:	d802      	bhi.n	800809e <SD_PowerON+0xe6>
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d0cc      	beq.n	8008038 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d902      	bls.n	80080ae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80080a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080ac:	e00c      	b.n	80080c8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d003      	beq.n	80080c0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	645a      	str	r2, [r3, #68]	; 0x44
 80080be:	e002      	b.n	80080c6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3718      	adds	r7, #24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	c1100000 	.word	0xc1100000

080080d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d102      	bne.n	80080ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80080e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080e8:	e018      	b.n	800811c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f2:	041b      	lsls	r3, r3, #16
 80080f4:	4619      	mov	r1, r3
 80080f6:	4610      	mov	r0, r2
 80080f8:	f001 f9be 	bl	8009478 <SDMMC_CmdSendStatus>
 80080fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	e009      	b.n	800811c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2100      	movs	r1, #0
 800810e:	4618      	mov	r0, r3
 8008110:	f000 ff60 	bl	8008fd4 <SDIO_GetResponse>
 8008114:	4602      	mov	r2, r0
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800812c:	2300      	movs	r3, #0
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	2300      	movs	r3, #0
 8008132:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2100      	movs	r1, #0
 800813a:	4618      	mov	r0, r3
 800813c:	f000 ff4a 	bl	8008fd4 <SDIO_GetResponse>
 8008140:	4603      	mov	r3, r0
 8008142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008146:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800814a:	d102      	bne.n	8008152 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800814c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008150:	e02f      	b.n	80081b2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008152:	f107 030c 	add.w	r3, r7, #12
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f879 	bl	8008250 <SD_FindSCR>
 800815e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	e023      	b.n	80081b2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01c      	beq.n	80081ae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800817c:	041b      	lsls	r3, r3, #16
 800817e:	4619      	mov	r1, r3
 8008180:	4610      	mov	r0, r2
 8008182:	f001 f893 	bl	80092ac <SDMMC_CmdAppCommand>
 8008186:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	e00f      	b.n	80081b2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2102      	movs	r1, #2
 8008198:	4618      	mov	r0, r3
 800819a:	f001 f8cc 	bl	8009336 <SDMMC_CmdBusWidth>
 800819e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	e003      	b.n	80081b2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80081aa:	2300      	movs	r3, #0
 80081ac:	e001      	b.n	80081b2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80081ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3718      	adds	r7, #24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b086      	sub	sp, #24
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80081c2:	2300      	movs	r3, #0
 80081c4:	60fb      	str	r3, [r7, #12]
 80081c6:	2300      	movs	r3, #0
 80081c8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2100      	movs	r1, #0
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 feff 	bl	8008fd4 <SDIO_GetResponse>
 80081d6:	4603      	mov	r3, r0
 80081d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081e0:	d102      	bne.n	80081e8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80081e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081e6:	e02f      	b.n	8008248 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80081e8:	f107 030c 	add.w	r3, r7, #12
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f82e 	bl	8008250 <SD_FindSCR>
 80081f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	e023      	b.n	8008248 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d01c      	beq.n	8008244 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008212:	041b      	lsls	r3, r3, #16
 8008214:	4619      	mov	r1, r3
 8008216:	4610      	mov	r0, r2
 8008218:	f001 f848 	bl	80092ac <SDMMC_CmdAppCommand>
 800821c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	e00f      	b.n	8008248 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2100      	movs	r1, #0
 800822e:	4618      	mov	r0, r3
 8008230:	f001 f881 	bl	8009336 <SDMMC_CmdBusWidth>
 8008234:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	e003      	b.n	8008248 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008240:	2300      	movs	r3, #0
 8008242:	e001      	b.n	8008248 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008244:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008248:	4618      	mov	r0, r3
 800824a:	3718      	adds	r7, #24
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008250:	b590      	push	{r4, r7, lr}
 8008252:	b08f      	sub	sp, #60	; 0x3c
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800825a:	f7f8 fdc1 	bl	8000de0 <HAL_GetTick>
 800825e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008260:	2300      	movs	r3, #0
 8008262:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008264:	2300      	movs	r3, #0
 8008266:	60bb      	str	r3, [r7, #8]
 8008268:	2300      	movs	r3, #0
 800826a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2108      	movs	r1, #8
 8008276:	4618      	mov	r0, r3
 8008278:	f000 feeb 	bl	8009052 <SDMMC_CmdBlockLength>
 800827c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800827e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	e0a9      	b.n	80083dc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008290:	041b      	lsls	r3, r3, #16
 8008292:	4619      	mov	r1, r3
 8008294:	4610      	mov	r0, r2
 8008296:	f001 f809 	bl	80092ac <SDMMC_CmdAppCommand>
 800829a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	e09a      	b.n	80083dc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80082a6:	f04f 33ff 	mov.w	r3, #4294967295
 80082aa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80082ac:	2308      	movs	r3, #8
 80082ae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80082b0:	2330      	movs	r3, #48	; 0x30
 80082b2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80082b4:	2302      	movs	r3, #2
 80082b6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80082bc:	2301      	movs	r3, #1
 80082be:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f107 0210 	add.w	r2, r7, #16
 80082c8:	4611      	mov	r1, r2
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fe95 	bl	8008ffa <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f001 f850 	bl	800937a <SDMMC_CmdSendSCR>
 80082da:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80082dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d022      	beq.n	8008328 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80082e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e4:	e07a      	b.n	80083dc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00e      	beq.n	8008312 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6819      	ldr	r1, [r3, #0]
 80082f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	f107 0208 	add.w	r2, r7, #8
 8008300:	18d4      	adds	r4, r2, r3
 8008302:	4608      	mov	r0, r1
 8008304:	f000 fdf4 	bl	8008ef0 <SDIO_ReadFIFO>
 8008308:	4603      	mov	r3, r0
 800830a:	6023      	str	r3, [r4, #0]
      index++;
 800830c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800830e:	3301      	adds	r3, #1
 8008310:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008312:	f7f8 fd65 	bl	8000de0 <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008320:	d102      	bne.n	8008328 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008322:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008326:	e059      	b.n	80083dc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800832e:	f240 432a 	movw	r3, #1066	; 0x42a
 8008332:	4013      	ands	r3, r2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d0d6      	beq.n	80082e6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800833e:	f003 0308 	and.w	r3, r3, #8
 8008342:	2b00      	cmp	r3, #0
 8008344:	d005      	beq.n	8008352 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2208      	movs	r2, #8
 800834c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800834e:	2308      	movs	r3, #8
 8008350:	e044      	b.n	80083dc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008358:	f003 0302 	and.w	r3, r3, #2
 800835c:	2b00      	cmp	r3, #0
 800835e:	d005      	beq.n	800836c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2202      	movs	r2, #2
 8008366:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008368:	2302      	movs	r3, #2
 800836a:	e037      	b.n	80083dc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008372:	f003 0320 	and.w	r3, r3, #32
 8008376:	2b00      	cmp	r3, #0
 8008378:	d005      	beq.n	8008386 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2220      	movs	r2, #32
 8008380:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008382:	2320      	movs	r3, #32
 8008384:	e02a      	b.n	80083dc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f240 523a 	movw	r2, #1338	; 0x53a
 800838e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	061a      	lsls	r2, r3, #24
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	021b      	lsls	r3, r3, #8
 8008398:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800839c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	0a1b      	lsrs	r3, r3, #8
 80083a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80083a6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	0e1b      	lsrs	r3, r3, #24
 80083ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80083ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b0:	601a      	str	r2, [r3, #0]
    scr++;
 80083b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b4:	3304      	adds	r3, #4
 80083b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	061a      	lsls	r2, r3, #24
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	021b      	lsls	r3, r3, #8
 80083c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80083c4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	0a1b      	lsrs	r3, r3, #8
 80083ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80083ce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	0e1b      	lsrs	r3, r3, #24
 80083d4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80083d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	373c      	adds	r7, #60	; 0x3c
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd90      	pop	{r4, r7, pc}

080083e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d101      	bne.n	80083f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e01d      	b.n	8008432 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d106      	bne.n	8008410 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f005 fc12 	bl	800dc34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2202      	movs	r2, #2
 8008414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	3304      	adds	r3, #4
 8008420:	4619      	mov	r1, r3
 8008422:	4610      	mov	r0, r2
 8008424:	f000 fa0a 	bl	800883c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	f003 0302 	and.w	r3, r3, #2
 800844c:	2b02      	cmp	r3, #2
 800844e:	d122      	bne.n	8008496 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	f003 0302 	and.w	r3, r3, #2
 800845a:	2b02      	cmp	r3, #2
 800845c:	d11b      	bne.n	8008496 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f06f 0202 	mvn.w	r2, #2
 8008466:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	f003 0303 	and.w	r3, r3, #3
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f9bf 	bl	8008800 <HAL_TIM_IC_CaptureCallback>
 8008482:	e005      	b.n	8008490 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f9b1 	bl	80087ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f9c2 	bl	8008814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	f003 0304 	and.w	r3, r3, #4
 80084a0:	2b04      	cmp	r3, #4
 80084a2:	d122      	bne.n	80084ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	f003 0304 	and.w	r3, r3, #4
 80084ae:	2b04      	cmp	r3, #4
 80084b0:	d11b      	bne.n	80084ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f06f 0204 	mvn.w	r2, #4
 80084ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d003      	beq.n	80084d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f995 	bl	8008800 <HAL_TIM_IC_CaptureCallback>
 80084d6:	e005      	b.n	80084e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f987 	bl	80087ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f998 	bl	8008814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	f003 0308 	and.w	r3, r3, #8
 80084f4:	2b08      	cmp	r3, #8
 80084f6:	d122      	bne.n	800853e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	f003 0308 	and.w	r3, r3, #8
 8008502:	2b08      	cmp	r3, #8
 8008504:	d11b      	bne.n	800853e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f06f 0208 	mvn.w	r2, #8
 800850e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2204      	movs	r2, #4
 8008514:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	f003 0303 	and.w	r3, r3, #3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f96b 	bl	8008800 <HAL_TIM_IC_CaptureCallback>
 800852a:	e005      	b.n	8008538 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f95d 	bl	80087ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f96e 	bl	8008814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	f003 0310 	and.w	r3, r3, #16
 8008548:	2b10      	cmp	r3, #16
 800854a:	d122      	bne.n	8008592 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f003 0310 	and.w	r3, r3, #16
 8008556:	2b10      	cmp	r3, #16
 8008558:	d11b      	bne.n	8008592 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f06f 0210 	mvn.w	r2, #16
 8008562:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2208      	movs	r2, #8
 8008568:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008574:	2b00      	cmp	r3, #0
 8008576:	d003      	beq.n	8008580 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f941 	bl	8008800 <HAL_TIM_IC_CaptureCallback>
 800857e:	e005      	b.n	800858c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f933 	bl	80087ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f944 	bl	8008814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	f003 0301 	and.w	r3, r3, #1
 800859c:	2b01      	cmp	r3, #1
 800859e:	d10e      	bne.n	80085be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	f003 0301 	and.w	r3, r3, #1
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d107      	bne.n	80085be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f06f 0201 	mvn.w	r2, #1
 80085b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f90d 	bl	80087d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c8:	2b80      	cmp	r3, #128	; 0x80
 80085ca:	d10e      	bne.n	80085ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d6:	2b80      	cmp	r3, #128	; 0x80
 80085d8:	d107      	bne.n	80085ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80085e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fc29 	bl	8008e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f4:	2b40      	cmp	r3, #64	; 0x40
 80085f6:	d10e      	bne.n	8008616 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008602:	2b40      	cmp	r3, #64	; 0x40
 8008604:	d107      	bne.n	8008616 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800860e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f909 	bl	8008828 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	f003 0320 	and.w	r3, r3, #32
 8008620:	2b20      	cmp	r3, #32
 8008622:	d10e      	bne.n	8008642 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b20      	cmp	r3, #32
 8008630:	d107      	bne.n	8008642 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f06f 0220 	mvn.w	r2, #32
 800863a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fbf3 	bl	8008e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008642:	bf00      	nop
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
	...

0800864c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800865e:	2b01      	cmp	r3, #1
 8008660:	d101      	bne.n	8008666 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008662:	2302      	movs	r3, #2
 8008664:	e0b4      	b.n	80087d0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2201      	movs	r2, #1
 800866a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2202      	movs	r2, #2
 8008672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b0c      	cmp	r3, #12
 800867a:	f200 809f 	bhi.w	80087bc <HAL_TIM_PWM_ConfigChannel+0x170>
 800867e:	a201      	add	r2, pc, #4	; (adr r2, 8008684 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008684:	080086b9 	.word	0x080086b9
 8008688:	080087bd 	.word	0x080087bd
 800868c:	080087bd 	.word	0x080087bd
 8008690:	080087bd 	.word	0x080087bd
 8008694:	080086f9 	.word	0x080086f9
 8008698:	080087bd 	.word	0x080087bd
 800869c:	080087bd 	.word	0x080087bd
 80086a0:	080087bd 	.word	0x080087bd
 80086a4:	0800873b 	.word	0x0800873b
 80086a8:	080087bd 	.word	0x080087bd
 80086ac:	080087bd 	.word	0x080087bd
 80086b0:	080087bd 	.word	0x080087bd
 80086b4:	0800877b 	.word	0x0800877b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68b9      	ldr	r1, [r7, #8]
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 f93c 	bl	800893c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	699a      	ldr	r2, [r3, #24]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f042 0208 	orr.w	r2, r2, #8
 80086d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	699a      	ldr	r2, [r3, #24]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 0204 	bic.w	r2, r2, #4
 80086e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6999      	ldr	r1, [r3, #24]
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	691a      	ldr	r2, [r3, #16]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	619a      	str	r2, [r3, #24]
      break;
 80086f6:	e062      	b.n	80087be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68b9      	ldr	r1, [r7, #8]
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 f982 	bl	8008a08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	699a      	ldr	r2, [r3, #24]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	699a      	ldr	r2, [r3, #24]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6999      	ldr	r1, [r3, #24]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	021a      	lsls	r2, r3, #8
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	430a      	orrs	r2, r1
 8008736:	619a      	str	r2, [r3, #24]
      break;
 8008738:	e041      	b.n	80087be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68b9      	ldr	r1, [r7, #8]
 8008740:	4618      	mov	r0, r3
 8008742:	f000 f9cd 	bl	8008ae0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	69da      	ldr	r2, [r3, #28]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f042 0208 	orr.w	r2, r2, #8
 8008754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	69da      	ldr	r2, [r3, #28]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f022 0204 	bic.w	r2, r2, #4
 8008764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	69d9      	ldr	r1, [r3, #28]
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	691a      	ldr	r2, [r3, #16]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	430a      	orrs	r2, r1
 8008776:	61da      	str	r2, [r3, #28]
      break;
 8008778:	e021      	b.n	80087be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68b9      	ldr	r1, [r7, #8]
 8008780:	4618      	mov	r0, r3
 8008782:	f000 fa17 	bl	8008bb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	69da      	ldr	r2, [r3, #28]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	69da      	ldr	r2, [r3, #28]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	69d9      	ldr	r1, [r3, #28]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	021a      	lsls	r2, r3, #8
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	61da      	str	r2, [r3, #28]
      break;
 80087ba:	e000      	b.n	80087be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80087bc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a34      	ldr	r2, [pc, #208]	; (8008920 <TIM_Base_SetConfig+0xe4>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d00f      	beq.n	8008874 <TIM_Base_SetConfig+0x38>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800885a:	d00b      	beq.n	8008874 <TIM_Base_SetConfig+0x38>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a31      	ldr	r2, [pc, #196]	; (8008924 <TIM_Base_SetConfig+0xe8>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d007      	beq.n	8008874 <TIM_Base_SetConfig+0x38>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a30      	ldr	r2, [pc, #192]	; (8008928 <TIM_Base_SetConfig+0xec>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d003      	beq.n	8008874 <TIM_Base_SetConfig+0x38>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a2f      	ldr	r2, [pc, #188]	; (800892c <TIM_Base_SetConfig+0xf0>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d108      	bne.n	8008886 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800887a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	4313      	orrs	r3, r2
 8008884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a25      	ldr	r2, [pc, #148]	; (8008920 <TIM_Base_SetConfig+0xe4>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d01b      	beq.n	80088c6 <TIM_Base_SetConfig+0x8a>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008894:	d017      	beq.n	80088c6 <TIM_Base_SetConfig+0x8a>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a22      	ldr	r2, [pc, #136]	; (8008924 <TIM_Base_SetConfig+0xe8>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d013      	beq.n	80088c6 <TIM_Base_SetConfig+0x8a>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a21      	ldr	r2, [pc, #132]	; (8008928 <TIM_Base_SetConfig+0xec>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d00f      	beq.n	80088c6 <TIM_Base_SetConfig+0x8a>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a20      	ldr	r2, [pc, #128]	; (800892c <TIM_Base_SetConfig+0xf0>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d00b      	beq.n	80088c6 <TIM_Base_SetConfig+0x8a>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a1f      	ldr	r2, [pc, #124]	; (8008930 <TIM_Base_SetConfig+0xf4>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d007      	beq.n	80088c6 <TIM_Base_SetConfig+0x8a>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a1e      	ldr	r2, [pc, #120]	; (8008934 <TIM_Base_SetConfig+0xf8>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d003      	beq.n	80088c6 <TIM_Base_SetConfig+0x8a>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a1d      	ldr	r2, [pc, #116]	; (8008938 <TIM_Base_SetConfig+0xfc>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d108      	bne.n	80088d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a08      	ldr	r2, [pc, #32]	; (8008920 <TIM_Base_SetConfig+0xe4>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d103      	bne.n	800890c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	691a      	ldr	r2, [r3, #16]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	615a      	str	r2, [r3, #20]
}
 8008912:	bf00      	nop
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	40010000 	.word	0x40010000
 8008924:	40000400 	.word	0x40000400
 8008928:	40000800 	.word	0x40000800
 800892c:	40000c00 	.word	0x40000c00
 8008930:	40014000 	.word	0x40014000
 8008934:	40014400 	.word	0x40014400
 8008938:	40014800 	.word	0x40014800

0800893c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800893c:	b480      	push	{r7}
 800893e:	b087      	sub	sp, #28
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	f023 0201 	bic.w	r2, r3, #1
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800896a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f023 0303 	bic.w	r3, r3, #3
 8008972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f023 0302 	bic.w	r3, r3, #2
 8008984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	4313      	orrs	r3, r2
 800898e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a1c      	ldr	r2, [pc, #112]	; (8008a04 <TIM_OC1_SetConfig+0xc8>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d10c      	bne.n	80089b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f023 0308 	bic.w	r3, r3, #8
 800899e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f023 0304 	bic.w	r3, r3, #4
 80089b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a13      	ldr	r2, [pc, #76]	; (8008a04 <TIM_OC1_SetConfig+0xc8>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d111      	bne.n	80089de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	4313      	orrs	r3, r2
 80089dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	621a      	str	r2, [r3, #32]
}
 80089f8:	bf00      	nop
 80089fa:	371c      	adds	r7, #28
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	40010000 	.word	0x40010000

08008a08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b087      	sub	sp, #28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	f023 0210 	bic.w	r2, r3, #16
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	021b      	lsls	r3, r3, #8
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	f023 0320 	bic.w	r3, r3, #32
 8008a52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	011b      	lsls	r3, r3, #4
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a1e      	ldr	r2, [pc, #120]	; (8008adc <TIM_OC2_SetConfig+0xd4>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d10d      	bne.n	8008a84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	011b      	lsls	r3, r3, #4
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a15      	ldr	r2, [pc, #84]	; (8008adc <TIM_OC2_SetConfig+0xd4>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d113      	bne.n	8008ab4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	685a      	ldr	r2, [r3, #4]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	621a      	str	r2, [r3, #32]
}
 8008ace:	bf00      	nop
 8008ad0:	371c      	adds	r7, #28
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	40010000 	.word	0x40010000

08008ae0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b087      	sub	sp, #28
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a1b      	ldr	r3, [r3, #32]
 8008aee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	69db      	ldr	r3, [r3, #28]
 8008b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f023 0303 	bic.w	r3, r3, #3
 8008b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	021b      	lsls	r3, r3, #8
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a1d      	ldr	r2, [pc, #116]	; (8008bb0 <TIM_OC3_SetConfig+0xd0>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d10d      	bne.n	8008b5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	021b      	lsls	r3, r3, #8
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a14      	ldr	r2, [pc, #80]	; (8008bb0 <TIM_OC3_SetConfig+0xd0>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d113      	bne.n	8008b8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	011b      	lsls	r3, r3, #4
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	011b      	lsls	r3, r3, #4
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	685a      	ldr	r2, [r3, #4]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	621a      	str	r2, [r3, #32]
}
 8008ba4:	bf00      	nop
 8008ba6:	371c      	adds	r7, #28
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	40010000 	.word	0x40010000

08008bb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	021b      	lsls	r3, r3, #8
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	031b      	lsls	r3, r3, #12
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a10      	ldr	r2, [pc, #64]	; (8008c50 <TIM_OC4_SetConfig+0x9c>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d109      	bne.n	8008c28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	019b      	lsls	r3, r3, #6
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	621a      	str	r2, [r3, #32]
}
 8008c42:	bf00      	nop
 8008c44:	371c      	adds	r7, #28
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	40010000 	.word	0x40010000

08008c54 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2204      	movs	r2, #4
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 f8f2 	bl	8008e50 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f003 0307 	and.w	r3, r3, #7
 8008c86:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2b06      	cmp	r3, #6
 8008c8c:	d007      	beq.n	8008c9e <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f042 0201 	orr.w	r2, r2, #1
 8008c9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d101      	bne.n	8008cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	e050      	b.n	8008d62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2202      	movs	r2, #2
 8008ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ce6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a1c      	ldr	r2, [pc, #112]	; (8008d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d018      	beq.n	8008d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d0c:	d013      	beq.n	8008d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a18      	ldr	r2, [pc, #96]	; (8008d74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d00e      	beq.n	8008d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a16      	ldr	r2, [pc, #88]	; (8008d78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d009      	beq.n	8008d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a15      	ldr	r2, [pc, #84]	; (8008d7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d004      	beq.n	8008d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a13      	ldr	r2, [pc, #76]	; (8008d80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d10c      	bne.n	8008d50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	40010000 	.word	0x40010000
 8008d74:	40000400 	.word	0x40000400
 8008d78:	40000800 	.word	0x40000800
 8008d7c:	40000c00 	.word	0x40000c00
 8008d80:	40014000 	.word	0x40014000

08008d84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d101      	bne.n	8008da0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	e03d      	b.n	8008e1c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b087      	sub	sp, #28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	f003 031f 	and.w	r3, r3, #31
 8008e62:	2204      	movs	r2, #4
 8008e64:	fa02 f303 	lsl.w	r3, r2, r3
 8008e68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6a1a      	ldr	r2, [r3, #32]
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	43db      	mvns	r3, r3
 8008e72:	401a      	ands	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6a1a      	ldr	r2, [r3, #32]
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	f003 031f 	and.w	r3, r3, #31
 8008e82:	6879      	ldr	r1, [r7, #4]
 8008e84:	fa01 f303 	lsl.w	r3, r1, r3
 8008e88:	431a      	orrs	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	621a      	str	r2, [r3, #32]
}
 8008e8e:	bf00      	nop
 8008e90:	371c      	adds	r7, #28
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	f107 001c 	add.w	r0, r7, #28
 8008ea8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008eb0:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008eb4:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008eb8:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008ebc:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008ec0:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008ec4:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008ed4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	431a      	orrs	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	b004      	add	sp, #16
 8008eee:	4770      	bx	lr

08008ef0 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008f0a:	b480      	push	{r7}
 8008f0c:	b083      	sub	sp, #12
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2203      	movs	r2, #3
 8008f38:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008f3a:	2002      	movs	r0, #2
 8008f3c:	f7f7 ff5c 	bl	8000df8 <HAL_Delay>
  
  return HAL_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	b083      	sub	sp, #12
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0303 	and.w	r3, r3, #3
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b085      	sub	sp, #20
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008f84:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008f8a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008f90:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008fa0:	f023 030f 	bic.w	r3, r3, #15
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3714      	adds	r7, #20
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr

08008fba <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b083      	sub	sp, #12
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	b2db      	uxtb	r3, r3
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	3314      	adds	r3, #20
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
}  
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b085      	sub	sp, #20
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	685a      	ldr	r2, [r3, #4]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009020:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009026:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800902c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	4313      	orrs	r3, r2
 8009032:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009038:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	431a      	orrs	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009044:	2300      	movs	r3, #0

}
 8009046:	4618      	mov	r0, r3
 8009048:	3714      	adds	r7, #20
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b088      	sub	sp, #32
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009060:	2310      	movs	r3, #16
 8009062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009064:	2340      	movs	r3, #64	; 0x40
 8009066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009068:	2300      	movs	r3, #0
 800906a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800906c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009070:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009072:	f107 0308 	add.w	r3, r7, #8
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f7ff ff74 	bl	8008f66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800907e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009082:	2110      	movs	r1, #16
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fa41 	bl	800950c <SDMMC_GetCmdResp1>
 800908a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800908c:	69fb      	ldr	r3, [r7, #28]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3720      	adds	r7, #32
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b088      	sub	sp, #32
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80090a4:	2311      	movs	r3, #17
 80090a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090a8:	2340      	movs	r3, #64	; 0x40
 80090aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090ac:	2300      	movs	r3, #0
 80090ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090b6:	f107 0308 	add.w	r3, r7, #8
 80090ba:	4619      	mov	r1, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f7ff ff52 	bl	8008f66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80090c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80090c6:	2111      	movs	r1, #17
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fa1f 	bl	800950c <SDMMC_GetCmdResp1>
 80090ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090d0:	69fb      	ldr	r3, [r7, #28]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3720      	adds	r7, #32
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b088      	sub	sp, #32
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80090e8:	2312      	movs	r3, #18
 80090ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090ec:	2340      	movs	r3, #64	; 0x40
 80090ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090f0:	2300      	movs	r3, #0
 80090f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090fa:	f107 0308 	add.w	r3, r7, #8
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f7ff ff30 	bl	8008f66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009106:	f241 3288 	movw	r2, #5000	; 0x1388
 800910a:	2112      	movs	r1, #18
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f9fd 	bl	800950c <SDMMC_GetCmdResp1>
 8009112:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009114:	69fb      	ldr	r3, [r7, #28]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3720      	adds	r7, #32
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b088      	sub	sp, #32
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800912c:	2318      	movs	r3, #24
 800912e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009130:	2340      	movs	r3, #64	; 0x40
 8009132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009134:	2300      	movs	r3, #0
 8009136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800913c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800913e:	f107 0308 	add.w	r3, r7, #8
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7ff ff0e 	bl	8008f66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800914a:	f241 3288 	movw	r2, #5000	; 0x1388
 800914e:	2118      	movs	r1, #24
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f9db 	bl	800950c <SDMMC_GetCmdResp1>
 8009156:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009158:	69fb      	ldr	r3, [r7, #28]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3720      	adds	r7, #32
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b088      	sub	sp, #32
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009170:	2319      	movs	r3, #25
 8009172:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009174:	2340      	movs	r3, #64	; 0x40
 8009176:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009178:	2300      	movs	r3, #0
 800917a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800917c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009180:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009182:	f107 0308 	add.w	r3, r7, #8
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7ff feec 	bl	8008f66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800918e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009192:	2119      	movs	r1, #25
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f9b9 	bl	800950c <SDMMC_GetCmdResp1>
 800919a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800919c:	69fb      	ldr	r3, [r7, #28]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3720      	adds	r7, #32
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
	...

080091a8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80091b4:	230c      	movs	r3, #12
 80091b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091b8:	2340      	movs	r3, #64	; 0x40
 80091ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091bc:	2300      	movs	r3, #0
 80091be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091c6:	f107 0308 	add.w	r3, r7, #8
 80091ca:	4619      	mov	r1, r3
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f7ff feca 	bl	8008f66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80091d2:	4a05      	ldr	r2, [pc, #20]	; (80091e8 <SDMMC_CmdStopTransfer+0x40>)
 80091d4:	210c      	movs	r1, #12
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f998 	bl	800950c <SDMMC_GetCmdResp1>
 80091dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091de:	69fb      	ldr	r3, [r7, #28]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3720      	adds	r7, #32
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	05f5e100 	.word	0x05f5e100

080091ec <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b08a      	sub	sp, #40	; 0x28
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80091fc:	2307      	movs	r3, #7
 80091fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009200:	2340      	movs	r3, #64	; 0x40
 8009202:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009204:	2300      	movs	r3, #0
 8009206:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800920c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800920e:	f107 0310 	add.w	r3, r7, #16
 8009212:	4619      	mov	r1, r3
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f7ff fea6 	bl	8008f66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800921a:	f241 3288 	movw	r2, #5000	; 0x1388
 800921e:	2107      	movs	r1, #7
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f000 f973 	bl	800950c <SDMMC_GetCmdResp1>
 8009226:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800922a:	4618      	mov	r0, r3
 800922c:	3728      	adds	r7, #40	; 0x28
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b088      	sub	sp, #32
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800923a:	2300      	movs	r3, #0
 800923c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800923e:	2300      	movs	r3, #0
 8009240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009242:	2300      	movs	r3, #0
 8009244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009246:	2300      	movs	r3, #0
 8009248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800924a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800924e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009250:	f107 0308 	add.w	r3, r7, #8
 8009254:	4619      	mov	r1, r3
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f7ff fe85 	bl	8008f66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f92d 	bl	80094bc <SDMMC_GetCmdError>
 8009262:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009264:	69fb      	ldr	r3, [r7, #28]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3720      	adds	r7, #32
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b088      	sub	sp, #32
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009276:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800927a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800927c:	2308      	movs	r3, #8
 800927e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009280:	2340      	movs	r3, #64	; 0x40
 8009282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009284:	2300      	movs	r3, #0
 8009286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800928c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800928e:	f107 0308 	add.w	r3, r7, #8
 8009292:	4619      	mov	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7ff fe66 	bl	8008f66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fb16 	bl	80098cc <SDMMC_GetCmdResp7>
 80092a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092a2:	69fb      	ldr	r3, [r7, #28]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3720      	adds	r7, #32
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b088      	sub	sp, #32
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80092ba:	2337      	movs	r3, #55	; 0x37
 80092bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092be:	2340      	movs	r3, #64	; 0x40
 80092c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092c2:	2300      	movs	r3, #0
 80092c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092cc:	f107 0308 	add.w	r3, r7, #8
 80092d0:	4619      	mov	r1, r3
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f7ff fe47 	bl	8008f66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80092d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80092dc:	2137      	movs	r1, #55	; 0x37
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f914 	bl	800950c <SDMMC_GetCmdResp1>
 80092e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092e6:	69fb      	ldr	r3, [r7, #28]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3720      	adds	r7, #32
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b088      	sub	sp, #32
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009300:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009306:	2329      	movs	r3, #41	; 0x29
 8009308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800930a:	2340      	movs	r3, #64	; 0x40
 800930c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800930e:	2300      	movs	r3, #0
 8009310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009316:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009318:	f107 0308 	add.w	r3, r7, #8
 800931c:	4619      	mov	r1, r3
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f7ff fe21 	bl	8008f66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fa23 	bl	8009770 <SDMMC_GetCmdResp3>
 800932a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800932c:	69fb      	ldr	r3, [r7, #28]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3720      	adds	r7, #32
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b088      	sub	sp, #32
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009344:	2306      	movs	r3, #6
 8009346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009348:	2340      	movs	r3, #64	; 0x40
 800934a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800934c:	2300      	movs	r3, #0
 800934e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009354:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009356:	f107 0308 	add.w	r3, r7, #8
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f7ff fe02 	bl	8008f66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009362:	f241 3288 	movw	r2, #5000	; 0x1388
 8009366:	2106      	movs	r1, #6
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f8cf 	bl	800950c <SDMMC_GetCmdResp1>
 800936e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009370:	69fb      	ldr	r3, [r7, #28]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3720      	adds	r7, #32
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b088      	sub	sp, #32
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009382:	2300      	movs	r3, #0
 8009384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009386:	2333      	movs	r3, #51	; 0x33
 8009388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800938a:	2340      	movs	r3, #64	; 0x40
 800938c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800938e:	2300      	movs	r3, #0
 8009390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009396:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009398:	f107 0308 	add.w	r3, r7, #8
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7ff fde1 	bl	8008f66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80093a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80093a8:	2133      	movs	r1, #51	; 0x33
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f8ae 	bl	800950c <SDMMC_GetCmdResp1>
 80093b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093b2:	69fb      	ldr	r3, [r7, #28]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3720      	adds	r7, #32
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b088      	sub	sp, #32
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80093c8:	2302      	movs	r3, #2
 80093ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80093cc:	23c0      	movs	r3, #192	; 0xc0
 80093ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093d0:	2300      	movs	r3, #0
 80093d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093da:	f107 0308 	add.w	r3, r7, #8
 80093de:	4619      	mov	r1, r3
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f7ff fdc0 	bl	8008f66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f97c 	bl	80096e4 <SDMMC_GetCmdResp2>
 80093ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ee:	69fb      	ldr	r3, [r7, #28]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3720      	adds	r7, #32
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b088      	sub	sp, #32
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009406:	2309      	movs	r3, #9
 8009408:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800940a:	23c0      	movs	r3, #192	; 0xc0
 800940c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800940e:	2300      	movs	r3, #0
 8009410:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009416:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009418:	f107 0308 	add.w	r3, r7, #8
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff fda1 	bl	8008f66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f95d 	bl	80096e4 <SDMMC_GetCmdResp2>
 800942a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800942c:	69fb      	ldr	r3, [r7, #28]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3720      	adds	r7, #32
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b088      	sub	sp, #32
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009444:	2303      	movs	r3, #3
 8009446:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009448:	2340      	movs	r3, #64	; 0x40
 800944a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800944c:	2300      	movs	r3, #0
 800944e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009454:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009456:	f107 0308 	add.w	r3, r7, #8
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7ff fd82 	bl	8008f66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	2103      	movs	r1, #3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f9bc 	bl	80097e4 <SDMMC_GetCmdResp6>
 800946c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800946e:	69fb      	ldr	r3, [r7, #28]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3720      	adds	r7, #32
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b088      	sub	sp, #32
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009486:	230d      	movs	r3, #13
 8009488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800948a:	2340      	movs	r3, #64	; 0x40
 800948c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800948e:	2300      	movs	r3, #0
 8009490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009496:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009498:	f107 0308 	add.w	r3, r7, #8
 800949c:	4619      	mov	r1, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7ff fd61 	bl	8008f66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80094a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80094a8:	210d      	movs	r1, #13
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f82e 	bl	800950c <SDMMC_GetCmdResp1>
 80094b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094b2:	69fb      	ldr	r3, [r7, #28]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3720      	adds	r7, #32
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80094bc:	b490      	push	{r4, r7}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094c4:	4b0f      	ldr	r3, [pc, #60]	; (8009504 <SDMMC_GetCmdError+0x48>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a0f      	ldr	r2, [pc, #60]	; (8009508 <SDMMC_GetCmdError+0x4c>)
 80094ca:	fba2 2303 	umull	r2, r3, r2, r3
 80094ce:	0a5b      	lsrs	r3, r3, #9
 80094d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80094d4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80094d8:	4623      	mov	r3, r4
 80094da:	1e5c      	subs	r4, r3, #1
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d102      	bne.n	80094e6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094e4:	e009      	b.n	80094fa <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d0f2      	beq.n	80094d8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	22c5      	movs	r2, #197	; 0xc5
 80094f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bc90      	pop	{r4, r7}
 8009502:	4770      	bx	lr
 8009504:	20000128 	.word	0x20000128
 8009508:	10624dd3 	.word	0x10624dd3

0800950c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800950c:	b590      	push	{r4, r7, lr}
 800950e:	b087      	sub	sp, #28
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	460b      	mov	r3, r1
 8009516:	607a      	str	r2, [r7, #4]
 8009518:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800951a:	4b6f      	ldr	r3, [pc, #444]	; (80096d8 <SDMMC_GetCmdResp1+0x1cc>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a6f      	ldr	r2, [pc, #444]	; (80096dc <SDMMC_GetCmdResp1+0x1d0>)
 8009520:	fba2 2303 	umull	r2, r3, r2, r3
 8009524:	0a5b      	lsrs	r3, r3, #9
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800952c:	4623      	mov	r3, r4
 800952e:	1e5c      	subs	r4, r3, #1
 8009530:	2b00      	cmp	r3, #0
 8009532:	d102      	bne.n	800953a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009534:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009538:	e0c9      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800953e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0f0      	beq.n	800952c <SDMMC_GetCmdResp1+0x20>
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1eb      	bne.n	800952c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009558:	f003 0304 	and.w	r3, r3, #4
 800955c:	2b00      	cmp	r3, #0
 800955e:	d004      	beq.n	800956a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2204      	movs	r2, #4
 8009564:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009566:	2304      	movs	r3, #4
 8009568:	e0b1      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b00      	cmp	r3, #0
 8009574:	d004      	beq.n	8009580 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2201      	movs	r2, #1
 800957a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800957c:	2301      	movs	r3, #1
 800957e:	e0a6      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	22c5      	movs	r2, #197	; 0xc5
 8009584:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f7ff fd17 	bl	8008fba <SDIO_GetCommandResponse>
 800958c:	4603      	mov	r3, r0
 800958e:	461a      	mov	r2, r3
 8009590:	7afb      	ldrb	r3, [r7, #11]
 8009592:	4293      	cmp	r3, r2
 8009594:	d001      	beq.n	800959a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009596:	2301      	movs	r3, #1
 8009598:	e099      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800959a:	2100      	movs	r1, #0
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f7ff fd19 	bl	8008fd4 <SDIO_GetResponse>
 80095a2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	4b4e      	ldr	r3, [pc, #312]	; (80096e0 <SDMMC_GetCmdResp1+0x1d4>)
 80095a8:	4013      	ands	r3, r2
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d101      	bne.n	80095b2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80095ae:	2300      	movs	r3, #0
 80095b0:	e08d      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	da02      	bge.n	80095be <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80095b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095bc:	e087      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80095c8:	2340      	movs	r3, #64	; 0x40
 80095ca:	e080      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d001      	beq.n	80095da <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80095d6:	2380      	movs	r3, #128	; 0x80
 80095d8:	e079      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d002      	beq.n	80095ea <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80095e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095e8:	e071      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d002      	beq.n	80095fa <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80095f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095f8:	e069      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009608:	e061      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d002      	beq.n	800961a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009614:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009618:	e059      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009628:	e051      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009638:	e049      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009644:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009648:	e041      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009658:	e039      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009664:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009668:	e031      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d002      	beq.n	800967a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009674:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009678:	e029      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009684:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009688:	e021      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009694:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009698:	e019      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80096a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80096a8:	e011      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80096b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80096b8:	e009      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	f003 0308 	and.w	r3, r3, #8
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80096c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80096c8:	e001      	b.n	80096ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80096ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	371c      	adds	r7, #28
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd90      	pop	{r4, r7, pc}
 80096d6:	bf00      	nop
 80096d8:	20000128 	.word	0x20000128
 80096dc:	10624dd3 	.word	0x10624dd3
 80096e0:	fdffe008 	.word	0xfdffe008

080096e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80096e4:	b490      	push	{r4, r7}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096ec:	4b1e      	ldr	r3, [pc, #120]	; (8009768 <SDMMC_GetCmdResp2+0x84>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a1e      	ldr	r2, [pc, #120]	; (800976c <SDMMC_GetCmdResp2+0x88>)
 80096f2:	fba2 2303 	umull	r2, r3, r2, r3
 80096f6:	0a5b      	lsrs	r3, r3, #9
 80096f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80096fc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009700:	4623      	mov	r3, r4
 8009702:	1e5c      	subs	r4, r3, #1
 8009704:	2b00      	cmp	r3, #0
 8009706:	d102      	bne.n	800970e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009708:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800970c:	e026      	b.n	800975c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009712:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800971a:	2b00      	cmp	r3, #0
 800971c:	d0f0      	beq.n	8009700 <SDMMC_GetCmdResp2+0x1c>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1eb      	bne.n	8009700 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d004      	beq.n	800973e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2204      	movs	r2, #4
 8009738:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800973a:	2304      	movs	r3, #4
 800973c:	e00e      	b.n	800975c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009742:	f003 0301 	and.w	r3, r3, #1
 8009746:	2b00      	cmp	r3, #0
 8009748:	d004      	beq.n	8009754 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009750:	2301      	movs	r3, #1
 8009752:	e003      	b.n	800975c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	22c5      	movs	r2, #197	; 0xc5
 8009758:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bc90      	pop	{r4, r7}
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	20000128 	.word	0x20000128
 800976c:	10624dd3 	.word	0x10624dd3

08009770 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009770:	b490      	push	{r4, r7}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009778:	4b18      	ldr	r3, [pc, #96]	; (80097dc <SDMMC_GetCmdResp3+0x6c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a18      	ldr	r2, [pc, #96]	; (80097e0 <SDMMC_GetCmdResp3+0x70>)
 800977e:	fba2 2303 	umull	r2, r3, r2, r3
 8009782:	0a5b      	lsrs	r3, r3, #9
 8009784:	f241 3288 	movw	r2, #5000	; 0x1388
 8009788:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800978c:	4623      	mov	r3, r4
 800978e:	1e5c      	subs	r4, r3, #1
 8009790:	2b00      	cmp	r3, #0
 8009792:	d102      	bne.n	800979a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009794:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009798:	e01b      	b.n	80097d2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800979e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d0f0      	beq.n	800978c <SDMMC_GetCmdResp3+0x1c>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1eb      	bne.n	800978c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b8:	f003 0304 	and.w	r3, r3, #4
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d004      	beq.n	80097ca <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2204      	movs	r2, #4
 80097c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097c6:	2304      	movs	r3, #4
 80097c8:	e003      	b.n	80097d2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	22c5      	movs	r2, #197	; 0xc5
 80097ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bc90      	pop	{r4, r7}
 80097da:	4770      	bx	lr
 80097dc:	20000128 	.word	0x20000128
 80097e0:	10624dd3 	.word	0x10624dd3

080097e4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80097e4:	b590      	push	{r4, r7, lr}
 80097e6:	b087      	sub	sp, #28
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	460b      	mov	r3, r1
 80097ee:	607a      	str	r2, [r7, #4]
 80097f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80097f2:	4b34      	ldr	r3, [pc, #208]	; (80098c4 <SDMMC_GetCmdResp6+0xe0>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a34      	ldr	r2, [pc, #208]	; (80098c8 <SDMMC_GetCmdResp6+0xe4>)
 80097f8:	fba2 2303 	umull	r2, r3, r2, r3
 80097fc:	0a5b      	lsrs	r3, r3, #9
 80097fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009802:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009806:	4623      	mov	r3, r4
 8009808:	1e5c      	subs	r4, r3, #1
 800980a:	2b00      	cmp	r3, #0
 800980c:	d102      	bne.n	8009814 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800980e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009812:	e052      	b.n	80098ba <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009818:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009820:	2b00      	cmp	r3, #0
 8009822:	d0f0      	beq.n	8009806 <SDMMC_GetCmdResp6+0x22>
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1eb      	bne.n	8009806 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009832:	f003 0304 	and.w	r3, r3, #4
 8009836:	2b00      	cmp	r3, #0
 8009838:	d004      	beq.n	8009844 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2204      	movs	r2, #4
 800983e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009840:	2304      	movs	r3, #4
 8009842:	e03a      	b.n	80098ba <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009848:	f003 0301 	and.w	r3, r3, #1
 800984c:	2b00      	cmp	r3, #0
 800984e:	d004      	beq.n	800985a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2201      	movs	r2, #1
 8009854:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009856:	2301      	movs	r3, #1
 8009858:	e02f      	b.n	80098ba <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f7ff fbad 	bl	8008fba <SDIO_GetCommandResponse>
 8009860:	4603      	mov	r3, r0
 8009862:	461a      	mov	r2, r3
 8009864:	7afb      	ldrb	r3, [r7, #11]
 8009866:	4293      	cmp	r3, r2
 8009868:	d001      	beq.n	800986e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800986a:	2301      	movs	r3, #1
 800986c:	e025      	b.n	80098ba <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	22c5      	movs	r2, #197	; 0xc5
 8009872:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009874:	2100      	movs	r1, #0
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f7ff fbac 	bl	8008fd4 <SDIO_GetResponse>
 800987c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009884:	2b00      	cmp	r3, #0
 8009886:	d106      	bne.n	8009896 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	0c1b      	lsrs	r3, r3, #16
 800988c:	b29a      	uxth	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009892:	2300      	movs	r3, #0
 8009894:	e011      	b.n	80098ba <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d002      	beq.n	80098a6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80098a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098a4:	e009      	b.n	80098ba <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d002      	beq.n	80098b6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80098b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098b4:	e001      	b.n	80098ba <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80098b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	371c      	adds	r7, #28
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd90      	pop	{r4, r7, pc}
 80098c2:	bf00      	nop
 80098c4:	20000128 	.word	0x20000128
 80098c8:	10624dd3 	.word	0x10624dd3

080098cc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80098cc:	b490      	push	{r4, r7}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80098d4:	4b21      	ldr	r3, [pc, #132]	; (800995c <SDMMC_GetCmdResp7+0x90>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a21      	ldr	r2, [pc, #132]	; (8009960 <SDMMC_GetCmdResp7+0x94>)
 80098da:	fba2 2303 	umull	r2, r3, r2, r3
 80098de:	0a5b      	lsrs	r3, r3, #9
 80098e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80098e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80098e8:	4623      	mov	r3, r4
 80098ea:	1e5c      	subs	r4, r3, #1
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d102      	bne.n	80098f6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098f4:	e02c      	b.n	8009950 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009902:	2b00      	cmp	r3, #0
 8009904:	d0f0      	beq.n	80098e8 <SDMMC_GetCmdResp7+0x1c>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1eb      	bne.n	80098e8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009914:	f003 0304 	and.w	r3, r3, #4
 8009918:	2b00      	cmp	r3, #0
 800991a:	d004      	beq.n	8009926 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2204      	movs	r2, #4
 8009920:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009922:	2304      	movs	r3, #4
 8009924:	e014      	b.n	8009950 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	2b00      	cmp	r3, #0
 8009930:	d004      	beq.n	800993c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2201      	movs	r2, #1
 8009936:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009938:	2301      	movs	r3, #1
 800993a:	e009      	b.n	8009950 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2240      	movs	r2, #64	; 0x40
 800994c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800994e:	2300      	movs	r3, #0
  
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bc90      	pop	{r4, r7}
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	20000128 	.word	0x20000128
 8009960:	10624dd3 	.word	0x10624dd3

08009964 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009964:	b084      	sub	sp, #16
 8009966:	b580      	push	{r7, lr}
 8009968:	b084      	sub	sp, #16
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
 800996e:	f107 001c 	add.w	r0, r7, #28
 8009972:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009978:	2b01      	cmp	r3, #1
 800997a:	d122      	bne.n	80099c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009980:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80099a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d105      	bne.n	80099b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f001 fab4 	bl	800af24 <USB_CoreReset>
 80099bc:	4603      	mov	r3, r0
 80099be:	73fb      	strb	r3, [r7, #15]
 80099c0:	e01a      	b.n	80099f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f001 faa8 	bl	800af24 <USB_CoreReset>
 80099d4:	4603      	mov	r3, r0
 80099d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80099d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d106      	bne.n	80099ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	639a      	str	r2, [r3, #56]	; 0x38
 80099ea:	e005      	b.n	80099f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80099f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d10b      	bne.n	8009a16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	f043 0206 	orr.w	r2, r3, #6
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	f043 0220 	orr.w	r2, r3, #32
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a22:	b004      	add	sp, #16
 8009a24:	4770      	bx	lr
	...

08009a28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b087      	sub	sp, #28
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	4613      	mov	r3, r2
 8009a34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009a36:	79fb      	ldrb	r3, [r7, #7]
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d165      	bne.n	8009b08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	4a41      	ldr	r2, [pc, #260]	; (8009b44 <USB_SetTurnaroundTime+0x11c>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d906      	bls.n	8009a52 <USB_SetTurnaroundTime+0x2a>
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	4a40      	ldr	r2, [pc, #256]	; (8009b48 <USB_SetTurnaroundTime+0x120>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d802      	bhi.n	8009a52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009a4c:	230f      	movs	r3, #15
 8009a4e:	617b      	str	r3, [r7, #20]
 8009a50:	e062      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	4a3c      	ldr	r2, [pc, #240]	; (8009b48 <USB_SetTurnaroundTime+0x120>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d906      	bls.n	8009a68 <USB_SetTurnaroundTime+0x40>
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	4a3b      	ldr	r2, [pc, #236]	; (8009b4c <USB_SetTurnaroundTime+0x124>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d802      	bhi.n	8009a68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009a62:	230e      	movs	r3, #14
 8009a64:	617b      	str	r3, [r7, #20]
 8009a66:	e057      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	4a38      	ldr	r2, [pc, #224]	; (8009b4c <USB_SetTurnaroundTime+0x124>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d906      	bls.n	8009a7e <USB_SetTurnaroundTime+0x56>
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	4a37      	ldr	r2, [pc, #220]	; (8009b50 <USB_SetTurnaroundTime+0x128>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d802      	bhi.n	8009a7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009a78:	230d      	movs	r3, #13
 8009a7a:	617b      	str	r3, [r7, #20]
 8009a7c:	e04c      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	4a33      	ldr	r2, [pc, #204]	; (8009b50 <USB_SetTurnaroundTime+0x128>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d906      	bls.n	8009a94 <USB_SetTurnaroundTime+0x6c>
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	4a32      	ldr	r2, [pc, #200]	; (8009b54 <USB_SetTurnaroundTime+0x12c>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d802      	bhi.n	8009a94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009a8e:	230c      	movs	r3, #12
 8009a90:	617b      	str	r3, [r7, #20]
 8009a92:	e041      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	4a2f      	ldr	r2, [pc, #188]	; (8009b54 <USB_SetTurnaroundTime+0x12c>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d906      	bls.n	8009aaa <USB_SetTurnaroundTime+0x82>
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	4a2e      	ldr	r2, [pc, #184]	; (8009b58 <USB_SetTurnaroundTime+0x130>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d802      	bhi.n	8009aaa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009aa4:	230b      	movs	r3, #11
 8009aa6:	617b      	str	r3, [r7, #20]
 8009aa8:	e036      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	4a2a      	ldr	r2, [pc, #168]	; (8009b58 <USB_SetTurnaroundTime+0x130>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d906      	bls.n	8009ac0 <USB_SetTurnaroundTime+0x98>
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	4a29      	ldr	r2, [pc, #164]	; (8009b5c <USB_SetTurnaroundTime+0x134>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d802      	bhi.n	8009ac0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009aba:	230a      	movs	r3, #10
 8009abc:	617b      	str	r3, [r7, #20]
 8009abe:	e02b      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	4a26      	ldr	r2, [pc, #152]	; (8009b5c <USB_SetTurnaroundTime+0x134>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d906      	bls.n	8009ad6 <USB_SetTurnaroundTime+0xae>
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	4a25      	ldr	r2, [pc, #148]	; (8009b60 <USB_SetTurnaroundTime+0x138>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d802      	bhi.n	8009ad6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009ad0:	2309      	movs	r3, #9
 8009ad2:	617b      	str	r3, [r7, #20]
 8009ad4:	e020      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	4a21      	ldr	r2, [pc, #132]	; (8009b60 <USB_SetTurnaroundTime+0x138>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d906      	bls.n	8009aec <USB_SetTurnaroundTime+0xc4>
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	4a20      	ldr	r2, [pc, #128]	; (8009b64 <USB_SetTurnaroundTime+0x13c>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d802      	bhi.n	8009aec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009ae6:	2308      	movs	r3, #8
 8009ae8:	617b      	str	r3, [r7, #20]
 8009aea:	e015      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	4a1d      	ldr	r2, [pc, #116]	; (8009b64 <USB_SetTurnaroundTime+0x13c>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d906      	bls.n	8009b02 <USB_SetTurnaroundTime+0xda>
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	4a1c      	ldr	r2, [pc, #112]	; (8009b68 <USB_SetTurnaroundTime+0x140>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d802      	bhi.n	8009b02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009afc:	2307      	movs	r3, #7
 8009afe:	617b      	str	r3, [r7, #20]
 8009b00:	e00a      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009b02:	2306      	movs	r3, #6
 8009b04:	617b      	str	r3, [r7, #20]
 8009b06:	e007      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009b08:	79fb      	ldrb	r3, [r7, #7]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d102      	bne.n	8009b14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009b0e:	2309      	movs	r3, #9
 8009b10:	617b      	str	r3, [r7, #20]
 8009b12:	e001      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009b14:	2309      	movs	r3, #9
 8009b16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	68da      	ldr	r2, [r3, #12]
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	029b      	lsls	r3, r3, #10
 8009b2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009b30:	431a      	orrs	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	371c      	adds	r7, #28
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	00d8acbf 	.word	0x00d8acbf
 8009b48:	00e4e1bf 	.word	0x00e4e1bf
 8009b4c:	00f423ff 	.word	0x00f423ff
 8009b50:	0106737f 	.word	0x0106737f
 8009b54:	011a499f 	.word	0x011a499f
 8009b58:	01312cff 	.word	0x01312cff
 8009b5c:	014ca43f 	.word	0x014ca43f
 8009b60:	016e35ff 	.word	0x016e35ff
 8009b64:	01a6ab1f 	.word	0x01a6ab1f
 8009b68:	01e847ff 	.word	0x01e847ff

08009b6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	f043 0201 	orr.w	r2, r3, #1
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	370c      	adds	r7, #12
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b8e:	b480      	push	{r7}
 8009b90:	b083      	sub	sp, #12
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	f023 0201 	bic.w	r2, r3, #1
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009bc8:	78fb      	ldrb	r3, [r7, #3]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d106      	bne.n	8009bdc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	60da      	str	r2, [r3, #12]
 8009bda:	e00b      	b.n	8009bf4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009bdc:	78fb      	ldrb	r3, [r7, #3]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d106      	bne.n	8009bf0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	60da      	str	r2, [r3, #12]
 8009bee:	e001      	b.n	8009bf4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e003      	b.n	8009bfc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009bf4:	2032      	movs	r0, #50	; 0x32
 8009bf6:	f7f7 f8ff 	bl	8000df8 <HAL_Delay>

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c04:	b084      	sub	sp, #16
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b086      	sub	sp, #24
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009c1e:	2300      	movs	r3, #0
 8009c20:	613b      	str	r3, [r7, #16]
 8009c22:	e009      	b.n	8009c38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	3340      	adds	r3, #64	; 0x40
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4413      	add	r3, r2
 8009c2e:	2200      	movs	r2, #0
 8009c30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	3301      	adds	r3, #1
 8009c36:	613b      	str	r3, [r7, #16]
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	2b0e      	cmp	r3, #14
 8009c3c:	d9f2      	bls.n	8009c24 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d11c      	bne.n	8009c7e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c52:	f043 0302 	orr.w	r3, r3, #2
 8009c56:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c68:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c74:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	639a      	str	r2, [r3, #56]	; 0x38
 8009c7c:	e00b      	b.n	8009c96 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c82:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca8:	4619      	mov	r1, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	680b      	ldr	r3, [r1, #0]
 8009cb4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d10c      	bne.n	8009cd6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d104      	bne.n	8009ccc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 f949 	bl	8009f5c <USB_SetDevSpeed>
 8009cca:	e008      	b.n	8009cde <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009ccc:	2101      	movs	r1, #1
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f944 	bl	8009f5c <USB_SetDevSpeed>
 8009cd4:	e003      	b.n	8009cde <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009cd6:	2103      	movs	r1, #3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f93f 	bl	8009f5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009cde:	2110      	movs	r1, #16
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f8f3 	bl	8009ecc <USB_FlushTxFifo>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f911 	bl	8009f18 <USB_FlushRxFifo>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d001      	beq.n	8009d00 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d06:	461a      	mov	r2, r3
 8009d08:	2300      	movs	r3, #0
 8009d0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d12:	461a      	mov	r2, r3
 8009d14:	2300      	movs	r3, #0
 8009d16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d1e:	461a      	mov	r2, r3
 8009d20:	2300      	movs	r3, #0
 8009d22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d24:	2300      	movs	r3, #0
 8009d26:	613b      	str	r3, [r7, #16]
 8009d28:	e043      	b.n	8009db2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	015a      	lsls	r2, r3, #5
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	4413      	add	r3, r2
 8009d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d40:	d118      	bne.n	8009d74 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10a      	bne.n	8009d5e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	015a      	lsls	r2, r3, #5
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d54:	461a      	mov	r2, r3
 8009d56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d5a:	6013      	str	r3, [r2, #0]
 8009d5c:	e013      	b.n	8009d86 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	015a      	lsls	r2, r3, #5
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	4413      	add	r3, r2
 8009d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009d70:	6013      	str	r3, [r2, #0]
 8009d72:	e008      	b.n	8009d86 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	015a      	lsls	r2, r3, #5
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d80:	461a      	mov	r2, r3
 8009d82:	2300      	movs	r3, #0
 8009d84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	015a      	lsls	r2, r3, #5
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d92:	461a      	mov	r2, r3
 8009d94:	2300      	movs	r3, #0
 8009d96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	015a      	lsls	r2, r3, #5
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	4413      	add	r3, r2
 8009da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009da4:	461a      	mov	r2, r3
 8009da6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009daa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	3301      	adds	r3, #1
 8009db0:	613b      	str	r3, [r7, #16]
 8009db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d3b7      	bcc.n	8009d2a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009dba:	2300      	movs	r3, #0
 8009dbc:	613b      	str	r3, [r7, #16]
 8009dbe:	e043      	b.n	8009e48 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	015a      	lsls	r2, r3, #5
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dd6:	d118      	bne.n	8009e0a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d10a      	bne.n	8009df4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	015a      	lsls	r2, r3, #5
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	4413      	add	r3, r2
 8009de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dea:	461a      	mov	r2, r3
 8009dec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009df0:	6013      	str	r3, [r2, #0]
 8009df2:	e013      	b.n	8009e1c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	015a      	lsls	r2, r3, #5
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e00:	461a      	mov	r2, r3
 8009e02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009e06:	6013      	str	r3, [r2, #0]
 8009e08:	e008      	b.n	8009e1c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	015a      	lsls	r2, r3, #5
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	4413      	add	r3, r2
 8009e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e16:	461a      	mov	r2, r3
 8009e18:	2300      	movs	r3, #0
 8009e1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	015a      	lsls	r2, r3, #5
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	4413      	add	r3, r2
 8009e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e28:	461a      	mov	r2, r3
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	015a      	lsls	r2, r3, #5
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	4413      	add	r3, r2
 8009e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009e40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	3301      	adds	r3, #1
 8009e46:	613b      	str	r3, [r7, #16]
 8009e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d3b7      	bcc.n	8009dc0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009e70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d105      	bne.n	8009e84 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	699b      	ldr	r3, [r3, #24]
 8009e7c:	f043 0210 	orr.w	r2, r3, #16
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	699a      	ldr	r2, [r3, #24]
 8009e88:	4b0f      	ldr	r3, [pc, #60]	; (8009ec8 <USB_DevInit+0x2c4>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d005      	beq.n	8009ea2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	f043 0208 	orr.w	r2, r3, #8
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d107      	bne.n	8009eb8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	699b      	ldr	r3, [r3, #24]
 8009eac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009eb0:	f043 0304 	orr.w	r3, r3, #4
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ec4:	b004      	add	sp, #16
 8009ec6:	4770      	bx	lr
 8009ec8:	803c3800 	.word	0x803c3800

08009ecc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	019b      	lsls	r3, r3, #6
 8009ede:	f043 0220 	orr.w	r2, r3, #32
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	60fb      	str	r3, [r7, #12]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	4a09      	ldr	r2, [pc, #36]	; (8009f14 <USB_FlushTxFifo+0x48>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d901      	bls.n	8009ef8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	e006      	b.n	8009f06 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	f003 0320 	and.w	r3, r3, #32
 8009f00:	2b20      	cmp	r3, #32
 8009f02:	d0f0      	beq.n	8009ee6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	00030d40 	.word	0x00030d40

08009f18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009f20:	2300      	movs	r3, #0
 8009f22:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2210      	movs	r2, #16
 8009f28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	60fb      	str	r3, [r7, #12]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	4a09      	ldr	r2, [pc, #36]	; (8009f58 <USB_FlushRxFifo+0x40>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d901      	bls.n	8009f3c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e006      	b.n	8009f4a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	f003 0310 	and.w	r3, r3, #16
 8009f44:	2b10      	cmp	r3, #16
 8009f46:	d0f0      	beq.n	8009f2a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3714      	adds	r7, #20
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	00030d40 	.word	0x00030d40

08009f5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	78fb      	ldrb	r3, [r7, #3]
 8009f76:	68f9      	ldr	r1, [r7, #12]
 8009f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b087      	sub	sp, #28
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	f003 0306 	and.w	r3, r3, #6
 8009fa6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d102      	bne.n	8009fb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	75fb      	strb	r3, [r7, #23]
 8009fb2:	e00a      	b.n	8009fca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d002      	beq.n	8009fc0 <USB_GetDevSpeed+0x32>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2b06      	cmp	r3, #6
 8009fbe:	d102      	bne.n	8009fc6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	75fb      	strb	r3, [r7, #23]
 8009fc4:	e001      	b.n	8009fca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009fc6:	230f      	movs	r3, #15
 8009fc8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	371c      	adds	r7, #28
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	785b      	ldrb	r3, [r3, #1]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d13a      	bne.n	800a06a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ffa:	69da      	ldr	r2, [r3, #28]
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	f003 030f 	and.w	r3, r3, #15
 800a004:	2101      	movs	r1, #1
 800a006:	fa01 f303 	lsl.w	r3, r1, r3
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	68f9      	ldr	r1, [r7, #12]
 800a00e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a012:	4313      	orrs	r3, r2
 800a014:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d155      	bne.n	800a0d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	015a      	lsls	r2, r3, #5
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	4413      	add	r3, r2
 800a034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	78db      	ldrb	r3, [r3, #3]
 800a046:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a048:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	059b      	lsls	r3, r3, #22
 800a04e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a050:	4313      	orrs	r3, r2
 800a052:	68ba      	ldr	r2, [r7, #8]
 800a054:	0151      	lsls	r1, r2, #5
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	440a      	add	r2, r1
 800a05a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a05e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a066:	6013      	str	r3, [r2, #0]
 800a068:	e036      	b.n	800a0d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a070:	69da      	ldr	r2, [r3, #28]
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	f003 030f 	and.w	r3, r3, #15
 800a07a:	2101      	movs	r1, #1
 800a07c:	fa01 f303 	lsl.w	r3, r1, r3
 800a080:	041b      	lsls	r3, r3, #16
 800a082:	68f9      	ldr	r1, [r7, #12]
 800a084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a088:	4313      	orrs	r3, r2
 800a08a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	015a      	lsls	r2, r3, #5
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	4413      	add	r3, r2
 800a094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d11a      	bne.n	800a0d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	015a      	lsls	r2, r3, #5
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	78db      	ldrb	r3, [r3, #3]
 800a0bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a0be:	430b      	orrs	r3, r1
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	0151      	lsls	r1, r2, #5
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	440a      	add	r2, r1
 800a0ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
	...

0800a0e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	785b      	ldrb	r3, [r3, #1]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d161      	bne.n	800a1c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	015a      	lsls	r2, r3, #5
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	4413      	add	r3, r2
 800a10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a11a:	d11f      	bne.n	800a15c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	015a      	lsls	r2, r3, #5
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	4413      	add	r3, r2
 800a124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	0151      	lsls	r1, r2, #5
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	440a      	add	r2, r1
 800a132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a136:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a13a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	015a      	lsls	r2, r3, #5
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	4413      	add	r3, r2
 800a144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	0151      	lsls	r1, r2, #5
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	440a      	add	r2, r1
 800a152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a156:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a15a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	f003 030f 	and.w	r3, r3, #15
 800a16c:	2101      	movs	r1, #1
 800a16e:	fa01 f303 	lsl.w	r3, r1, r3
 800a172:	b29b      	uxth	r3, r3
 800a174:	43db      	mvns	r3, r3
 800a176:	68f9      	ldr	r1, [r7, #12]
 800a178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a17c:	4013      	ands	r3, r2
 800a17e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a186:	69da      	ldr	r2, [r3, #28]
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	f003 030f 	and.w	r3, r3, #15
 800a190:	2101      	movs	r1, #1
 800a192:	fa01 f303 	lsl.w	r3, r1, r3
 800a196:	b29b      	uxth	r3, r3
 800a198:	43db      	mvns	r3, r3
 800a19a:	68f9      	ldr	r1, [r7, #12]
 800a19c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	015a      	lsls	r2, r3, #5
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	0159      	lsls	r1, r3, #5
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	440b      	add	r3, r1
 800a1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1be:	4619      	mov	r1, r3
 800a1c0:	4b35      	ldr	r3, [pc, #212]	; (800a298 <USB_DeactivateEndpoint+0x1b0>)
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	600b      	str	r3, [r1, #0]
 800a1c6:	e060      	b.n	800a28a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	015a      	lsls	r2, r3, #5
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1de:	d11f      	bne.n	800a220 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	015a      	lsls	r2, r3, #5
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68ba      	ldr	r2, [r7, #8]
 800a1f0:	0151      	lsls	r1, r2, #5
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	440a      	add	r2, r1
 800a1f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a1fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	015a      	lsls	r2, r3, #5
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	4413      	add	r3, r2
 800a208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	0151      	lsls	r1, r2, #5
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	440a      	add	r2, r1
 800a216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a21a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a21e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	f003 030f 	and.w	r3, r3, #15
 800a230:	2101      	movs	r1, #1
 800a232:	fa01 f303 	lsl.w	r3, r1, r3
 800a236:	041b      	lsls	r3, r3, #16
 800a238:	43db      	mvns	r3, r3
 800a23a:	68f9      	ldr	r1, [r7, #12]
 800a23c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a240:	4013      	ands	r3, r2
 800a242:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a24a:	69da      	ldr	r2, [r3, #28]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	f003 030f 	and.w	r3, r3, #15
 800a254:	2101      	movs	r1, #1
 800a256:	fa01 f303 	lsl.w	r3, r1, r3
 800a25a:	041b      	lsls	r3, r3, #16
 800a25c:	43db      	mvns	r3, r3
 800a25e:	68f9      	ldr	r1, [r7, #12]
 800a260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a264:	4013      	ands	r3, r2
 800a266:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	015a      	lsls	r2, r3, #5
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	4413      	add	r3, r2
 800a270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	0159      	lsls	r1, r3, #5
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	440b      	add	r3, r1
 800a27e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a282:	4619      	mov	r1, r3
 800a284:	4b05      	ldr	r3, [pc, #20]	; (800a29c <USB_DeactivateEndpoint+0x1b4>)
 800a286:	4013      	ands	r3, r2
 800a288:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3714      	adds	r7, #20
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr
 800a298:	ec337800 	.word	0xec337800
 800a29c:	eff37800 	.word	0xeff37800

0800a2a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b08a      	sub	sp, #40	; 0x28
 800a2a4:	af02      	add	r7, sp, #8
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	785b      	ldrb	r3, [r3, #1]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	f040 815c 	bne.w	800a57a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	695b      	ldr	r3, [r3, #20]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d132      	bne.n	800a330 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	015a      	lsls	r2, r3, #5
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	0151      	lsls	r1, r2, #5
 800a2dc:	69fa      	ldr	r2, [r7, #28]
 800a2de:	440a      	add	r2, r1
 800a2e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a2e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a2ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	015a      	lsls	r2, r3, #5
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	69ba      	ldr	r2, [r7, #24]
 800a2fe:	0151      	lsls	r1, r2, #5
 800a300:	69fa      	ldr	r2, [r7, #28]
 800a302:	440a      	add	r2, r1
 800a304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a308:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a30c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	015a      	lsls	r2, r3, #5
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	4413      	add	r3, r2
 800a316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	69ba      	ldr	r2, [r7, #24]
 800a31e:	0151      	lsls	r1, r2, #5
 800a320:	69fa      	ldr	r2, [r7, #28]
 800a322:	440a      	add	r2, r1
 800a324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a328:	0cdb      	lsrs	r3, r3, #19
 800a32a:	04db      	lsls	r3, r3, #19
 800a32c:	6113      	str	r3, [r2, #16]
 800a32e:	e074      	b.n	800a41a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	015a      	lsls	r2, r3, #5
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	4413      	add	r3, r2
 800a338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	69ba      	ldr	r2, [r7, #24]
 800a340:	0151      	lsls	r1, r2, #5
 800a342:	69fa      	ldr	r2, [r7, #28]
 800a344:	440a      	add	r2, r1
 800a346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a34a:	0cdb      	lsrs	r3, r3, #19
 800a34c:	04db      	lsls	r3, r3, #19
 800a34e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	015a      	lsls	r2, r3, #5
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	4413      	add	r3, r2
 800a358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	69ba      	ldr	r2, [r7, #24]
 800a360:	0151      	lsls	r1, r2, #5
 800a362:	69fa      	ldr	r2, [r7, #28]
 800a364:	440a      	add	r2, r1
 800a366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a36a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a36e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a372:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	015a      	lsls	r2, r3, #5
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	4413      	add	r3, r2
 800a37c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a380:	691a      	ldr	r2, [r3, #16]
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	6959      	ldr	r1, [r3, #20]
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	440b      	add	r3, r1
 800a38c:	1e59      	subs	r1, r3, #1
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	fbb1 f3f3 	udiv	r3, r1, r3
 800a396:	04d9      	lsls	r1, r3, #19
 800a398:	4b9d      	ldr	r3, [pc, #628]	; (800a610 <USB_EPStartXfer+0x370>)
 800a39a:	400b      	ands	r3, r1
 800a39c:	69b9      	ldr	r1, [r7, #24]
 800a39e:	0148      	lsls	r0, r1, #5
 800a3a0:	69f9      	ldr	r1, [r7, #28]
 800a3a2:	4401      	add	r1, r0
 800a3a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	015a      	lsls	r2, r3, #5
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3b8:	691a      	ldr	r2, [r3, #16]
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3c2:	69b9      	ldr	r1, [r7, #24]
 800a3c4:	0148      	lsls	r0, r1, #5
 800a3c6:	69f9      	ldr	r1, [r7, #28]
 800a3c8:	4401      	add	r1, r0
 800a3ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	78db      	ldrb	r3, [r3, #3]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d11f      	bne.n	800a41a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	015a      	lsls	r2, r3, #5
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	69ba      	ldr	r2, [r7, #24]
 800a3ea:	0151      	lsls	r1, r2, #5
 800a3ec:	69fa      	ldr	r2, [r7, #28]
 800a3ee:	440a      	add	r2, r1
 800a3f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a3f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	015a      	lsls	r2, r3, #5
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	4413      	add	r3, r2
 800a402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	69ba      	ldr	r2, [r7, #24]
 800a40a:	0151      	lsls	r1, r2, #5
 800a40c:	69fa      	ldr	r2, [r7, #28]
 800a40e:	440a      	add	r2, r1
 800a410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a418:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a41a:	79fb      	ldrb	r3, [r7, #7]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d14b      	bne.n	800a4b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d009      	beq.n	800a43c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	015a      	lsls	r2, r3, #5
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	4413      	add	r3, r2
 800a430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a434:	461a      	mov	r2, r3
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	78db      	ldrb	r3, [r3, #3]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d128      	bne.n	800a496 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a450:	2b00      	cmp	r3, #0
 800a452:	d110      	bne.n	800a476 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	015a      	lsls	r2, r3, #5
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	4413      	add	r3, r2
 800a45c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	69ba      	ldr	r2, [r7, #24]
 800a464:	0151      	lsls	r1, r2, #5
 800a466:	69fa      	ldr	r2, [r7, #28]
 800a468:	440a      	add	r2, r1
 800a46a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a46e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a472:	6013      	str	r3, [r2, #0]
 800a474:	e00f      	b.n	800a496 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	015a      	lsls	r2, r3, #5
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	4413      	add	r3, r2
 800a47e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	69ba      	ldr	r2, [r7, #24]
 800a486:	0151      	lsls	r1, r2, #5
 800a488:	69fa      	ldr	r2, [r7, #28]
 800a48a:	440a      	add	r2, r1
 800a48c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a494:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	015a      	lsls	r2, r3, #5
 800a49a:	69fb      	ldr	r3, [r7, #28]
 800a49c:	4413      	add	r3, r2
 800a49e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	69ba      	ldr	r2, [r7, #24]
 800a4a6:	0151      	lsls	r1, r2, #5
 800a4a8:	69fa      	ldr	r2, [r7, #28]
 800a4aa:	440a      	add	r2, r1
 800a4ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a4b4:	6013      	str	r3, [r2, #0]
 800a4b6:	e12f      	b.n	800a718 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	015a      	lsls	r2, r3, #5
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	4413      	add	r3, r2
 800a4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	69ba      	ldr	r2, [r7, #24]
 800a4c8:	0151      	lsls	r1, r2, #5
 800a4ca:	69fa      	ldr	r2, [r7, #28]
 800a4cc:	440a      	add	r2, r1
 800a4ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a4d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	78db      	ldrb	r3, [r3, #3]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d015      	beq.n	800a50c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f000 8117 	beq.w	800a718 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	f003 030f 	and.w	r3, r3, #15
 800a4fa:	2101      	movs	r1, #1
 800a4fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a500:	69f9      	ldr	r1, [r7, #28]
 800a502:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a506:	4313      	orrs	r3, r2
 800a508:	634b      	str	r3, [r1, #52]	; 0x34
 800a50a:	e105      	b.n	800a718 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d110      	bne.n	800a53e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	015a      	lsls	r2, r3, #5
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	4413      	add	r3, r2
 800a524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	69ba      	ldr	r2, [r7, #24]
 800a52c:	0151      	lsls	r1, r2, #5
 800a52e:	69fa      	ldr	r2, [r7, #28]
 800a530:	440a      	add	r2, r1
 800a532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a536:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	e00f      	b.n	800a55e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	015a      	lsls	r2, r3, #5
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	4413      	add	r3, r2
 800a546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	69ba      	ldr	r2, [r7, #24]
 800a54e:	0151      	lsls	r1, r2, #5
 800a550:	69fa      	ldr	r2, [r7, #28]
 800a552:	440a      	add	r2, r1
 800a554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a55c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	68d9      	ldr	r1, [r3, #12]
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	781a      	ldrb	r2, [r3, #0]
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	b298      	uxth	r0, r3
 800a56c:	79fb      	ldrb	r3, [r7, #7]
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	4603      	mov	r3, r0
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f000 fa2b 	bl	800a9ce <USB_WritePacket>
 800a578:	e0ce      	b.n	800a718 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	015a      	lsls	r2, r3, #5
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	4413      	add	r3, r2
 800a582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	69ba      	ldr	r2, [r7, #24]
 800a58a:	0151      	lsls	r1, r2, #5
 800a58c:	69fa      	ldr	r2, [r7, #28]
 800a58e:	440a      	add	r2, r1
 800a590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a594:	0cdb      	lsrs	r3, r3, #19
 800a596:	04db      	lsls	r3, r3, #19
 800a598:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	015a      	lsls	r2, r3, #5
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	69ba      	ldr	r2, [r7, #24]
 800a5aa:	0151      	lsls	r1, r2, #5
 800a5ac:	69fa      	ldr	r2, [r7, #28]
 800a5ae:	440a      	add	r2, r1
 800a5b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a5b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a5bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d126      	bne.n	800a614 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	015a      	lsls	r2, r3, #5
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d2:	691a      	ldr	r2, [r3, #16]
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5dc:	69b9      	ldr	r1, [r7, #24]
 800a5de:	0148      	lsls	r0, r1, #5
 800a5e0:	69f9      	ldr	r1, [r7, #28]
 800a5e2:	4401      	add	r1, r0
 800a5e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	015a      	lsls	r2, r3, #5
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5f8:	691b      	ldr	r3, [r3, #16]
 800a5fa:	69ba      	ldr	r2, [r7, #24]
 800a5fc:	0151      	lsls	r1, r2, #5
 800a5fe:	69fa      	ldr	r2, [r7, #28]
 800a600:	440a      	add	r2, r1
 800a602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a60a:	6113      	str	r3, [r2, #16]
 800a60c:	e036      	b.n	800a67c <USB_EPStartXfer+0x3dc>
 800a60e:	bf00      	nop
 800a610:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	695a      	ldr	r2, [r3, #20]
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	4413      	add	r3, r2
 800a61e:	1e5a      	subs	r2, r3, #1
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	fbb2 f3f3 	udiv	r3, r2, r3
 800a628:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	015a      	lsls	r2, r3, #5
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	4413      	add	r3, r2
 800a632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a636:	691a      	ldr	r2, [r3, #16]
 800a638:	8afb      	ldrh	r3, [r7, #22]
 800a63a:	04d9      	lsls	r1, r3, #19
 800a63c:	4b39      	ldr	r3, [pc, #228]	; (800a724 <USB_EPStartXfer+0x484>)
 800a63e:	400b      	ands	r3, r1
 800a640:	69b9      	ldr	r1, [r7, #24]
 800a642:	0148      	lsls	r0, r1, #5
 800a644:	69f9      	ldr	r1, [r7, #28]
 800a646:	4401      	add	r1, r0
 800a648:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a64c:	4313      	orrs	r3, r2
 800a64e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	015a      	lsls	r2, r3, #5
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	4413      	add	r3, r2
 800a658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a65c:	691a      	ldr	r2, [r3, #16]
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	8af9      	ldrh	r1, [r7, #22]
 800a664:	fb01 f303 	mul.w	r3, r1, r3
 800a668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a66c:	69b9      	ldr	r1, [r7, #24]
 800a66e:	0148      	lsls	r0, r1, #5
 800a670:	69f9      	ldr	r1, [r7, #28]
 800a672:	4401      	add	r1, r0
 800a674:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a678:	4313      	orrs	r3, r2
 800a67a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a67c:	79fb      	ldrb	r3, [r7, #7]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d10d      	bne.n	800a69e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d009      	beq.n	800a69e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	68d9      	ldr	r1, [r3, #12]
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	015a      	lsls	r2, r3, #5
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	4413      	add	r3, r2
 800a696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a69a:	460a      	mov	r2, r1
 800a69c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	78db      	ldrb	r3, [r3, #3]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d128      	bne.n	800a6f8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d110      	bne.n	800a6d8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	69ba      	ldr	r2, [r7, #24]
 800a6c6:	0151      	lsls	r1, r2, #5
 800a6c8:	69fa      	ldr	r2, [r7, #28]
 800a6ca:	440a      	add	r2, r1
 800a6cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a6d4:	6013      	str	r3, [r2, #0]
 800a6d6:	e00f      	b.n	800a6f8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	015a      	lsls	r2, r3, #5
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	4413      	add	r3, r2
 800a6e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	69ba      	ldr	r2, [r7, #24]
 800a6e8:	0151      	lsls	r1, r2, #5
 800a6ea:	69fa      	ldr	r2, [r7, #28]
 800a6ec:	440a      	add	r2, r1
 800a6ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	69ba      	ldr	r2, [r7, #24]
 800a708:	0151      	lsls	r1, r2, #5
 800a70a:	69fa      	ldr	r2, [r7, #28]
 800a70c:	440a      	add	r2, r1
 800a70e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a712:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a716:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3720      	adds	r7, #32
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	1ff80000 	.word	0x1ff80000

0800a728 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a728:	b480      	push	{r7}
 800a72a:	b087      	sub	sp, #28
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	4613      	mov	r3, r2
 800a734:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	785b      	ldrb	r3, [r3, #1]
 800a744:	2b01      	cmp	r3, #1
 800a746:	f040 80cd 	bne.w	800a8e4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	695b      	ldr	r3, [r3, #20]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d132      	bne.n	800a7b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	015a      	lsls	r2, r3, #5
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	4413      	add	r3, r2
 800a75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	0151      	lsls	r1, r2, #5
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	440a      	add	r2, r1
 800a768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a76c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a770:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a774:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	015a      	lsls	r2, r3, #5
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	4413      	add	r3, r2
 800a77e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	0151      	lsls	r1, r2, #5
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	440a      	add	r2, r1
 800a78c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a790:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a794:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	015a      	lsls	r2, r3, #5
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	4413      	add	r3, r2
 800a79e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	0151      	lsls	r1, r2, #5
 800a7a8:	697a      	ldr	r2, [r7, #20]
 800a7aa:	440a      	add	r2, r1
 800a7ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7b0:	0cdb      	lsrs	r3, r3, #19
 800a7b2:	04db      	lsls	r3, r3, #19
 800a7b4:	6113      	str	r3, [r2, #16]
 800a7b6:	e04e      	b.n	800a856 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	015a      	lsls	r2, r3, #5
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	4413      	add	r3, r2
 800a7c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	693a      	ldr	r2, [r7, #16]
 800a7c8:	0151      	lsls	r1, r2, #5
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	440a      	add	r2, r1
 800a7ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7d2:	0cdb      	lsrs	r3, r3, #19
 800a7d4:	04db      	lsls	r3, r3, #19
 800a7d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	015a      	lsls	r2, r3, #5
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	4413      	add	r3, r2
 800a7e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	693a      	ldr	r2, [r7, #16]
 800a7e8:	0151      	lsls	r1, r2, #5
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	440a      	add	r2, r1
 800a7ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a7f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a7fa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	695a      	ldr	r2, [r3, #20]
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	429a      	cmp	r2, r3
 800a806:	d903      	bls.n	800a810 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	689a      	ldr	r2, [r3, #8]
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	015a      	lsls	r2, r3, #5
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	4413      	add	r3, r2
 800a818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a81c:	691b      	ldr	r3, [r3, #16]
 800a81e:	693a      	ldr	r2, [r7, #16]
 800a820:	0151      	lsls	r1, r2, #5
 800a822:	697a      	ldr	r2, [r7, #20]
 800a824:	440a      	add	r2, r1
 800a826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a82a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a82e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	015a      	lsls	r2, r3, #5
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	4413      	add	r3, r2
 800a838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a83c:	691a      	ldr	r2, [r3, #16]
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	695b      	ldr	r3, [r3, #20]
 800a842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a846:	6939      	ldr	r1, [r7, #16]
 800a848:	0148      	lsls	r0, r1, #5
 800a84a:	6979      	ldr	r1, [r7, #20]
 800a84c:	4401      	add	r1, r0
 800a84e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a852:	4313      	orrs	r3, r2
 800a854:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a856:	79fb      	ldrb	r3, [r7, #7]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d11e      	bne.n	800a89a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d009      	beq.n	800a878 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	015a      	lsls	r2, r3, #5
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	4413      	add	r3, r2
 800a86c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a870:	461a      	mov	r2, r3
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	015a      	lsls	r2, r3, #5
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	4413      	add	r3, r2
 800a880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	0151      	lsls	r1, r2, #5
 800a88a:	697a      	ldr	r2, [r7, #20]
 800a88c:	440a      	add	r2, r1
 800a88e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a892:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a896:	6013      	str	r3, [r2, #0]
 800a898:	e092      	b.n	800a9c0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	015a      	lsls	r2, r3, #5
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	693a      	ldr	r2, [r7, #16]
 800a8aa:	0151      	lsls	r1, r2, #5
 800a8ac:	697a      	ldr	r2, [r7, #20]
 800a8ae:	440a      	add	r2, r1
 800a8b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a8b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	695b      	ldr	r3, [r3, #20]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d07e      	beq.n	800a9c0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	f003 030f 	and.w	r3, r3, #15
 800a8d2:	2101      	movs	r1, #1
 800a8d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a8d8:	6979      	ldr	r1, [r7, #20]
 800a8da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	634b      	str	r3, [r1, #52]	; 0x34
 800a8e2:	e06d      	b.n	800a9c0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	015a      	lsls	r2, r3, #5
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	693a      	ldr	r2, [r7, #16]
 800a8f4:	0151      	lsls	r1, r2, #5
 800a8f6:	697a      	ldr	r2, [r7, #20]
 800a8f8:	440a      	add	r2, r1
 800a8fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8fe:	0cdb      	lsrs	r3, r3, #19
 800a900:	04db      	lsls	r3, r3, #19
 800a902:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	015a      	lsls	r2, r3, #5
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	4413      	add	r3, r2
 800a90c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	693a      	ldr	r2, [r7, #16]
 800a914:	0151      	lsls	r1, r2, #5
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	440a      	add	r2, r1
 800a91a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a91e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a922:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a926:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	695b      	ldr	r3, [r3, #20]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d003      	beq.n	800a938 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	689a      	ldr	r2, [r3, #8]
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	015a      	lsls	r2, r3, #5
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	4413      	add	r3, r2
 800a940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	693a      	ldr	r2, [r7, #16]
 800a948:	0151      	lsls	r1, r2, #5
 800a94a:	697a      	ldr	r2, [r7, #20]
 800a94c:	440a      	add	r2, r1
 800a94e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a952:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a956:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	015a      	lsls	r2, r3, #5
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	4413      	add	r3, r2
 800a960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a964:	691a      	ldr	r2, [r3, #16]
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a96e:	6939      	ldr	r1, [r7, #16]
 800a970:	0148      	lsls	r0, r1, #5
 800a972:	6979      	ldr	r1, [r7, #20]
 800a974:	4401      	add	r1, r0
 800a976:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a97a:	4313      	orrs	r3, r2
 800a97c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a97e:	79fb      	ldrb	r3, [r7, #7]
 800a980:	2b01      	cmp	r3, #1
 800a982:	d10d      	bne.n	800a9a0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d009      	beq.n	800a9a0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	68d9      	ldr	r1, [r3, #12]
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	015a      	lsls	r2, r3, #5
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	4413      	add	r3, r2
 800a998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a99c:	460a      	mov	r2, r1
 800a99e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	015a      	lsls	r2, r3, #5
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	0151      	lsls	r1, r2, #5
 800a9b2:	697a      	ldr	r2, [r7, #20]
 800a9b4:	440a      	add	r2, r1
 800a9b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a9be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	371c      	adds	r7, #28
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	b089      	sub	sp, #36	; 0x24
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	60f8      	str	r0, [r7, #12]
 800a9d6:	60b9      	str	r1, [r7, #8]
 800a9d8:	4611      	mov	r1, r2
 800a9da:	461a      	mov	r2, r3
 800a9dc:	460b      	mov	r3, r1
 800a9de:	71fb      	strb	r3, [r7, #7]
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a9ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d11a      	bne.n	800aa2a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a9f4:	88bb      	ldrh	r3, [r7, #4]
 800a9f6:	3303      	adds	r3, #3
 800a9f8:	089b      	lsrs	r3, r3, #2
 800a9fa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	61bb      	str	r3, [r7, #24]
 800aa00:	e00f      	b.n	800aa22 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800aa02:	79fb      	ldrb	r3, [r7, #7]
 800aa04:	031a      	lsls	r2, r3, #12
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	4413      	add	r3, r2
 800aa0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa0e:	461a      	mov	r2, r3
 800aa10:	69fb      	ldr	r3, [r7, #28]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6013      	str	r3, [r2, #0]
      pSrc++;
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	3304      	adds	r3, #4
 800aa1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	61bb      	str	r3, [r7, #24]
 800aa22:	69ba      	ldr	r2, [r7, #24]
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d3eb      	bcc.n	800aa02 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3724      	adds	r7, #36	; 0x24
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b089      	sub	sp, #36	; 0x24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	4613      	mov	r3, r2
 800aa44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800aa4e:	88fb      	ldrh	r3, [r7, #6]
 800aa50:	3303      	adds	r3, #3
 800aa52:	089b      	lsrs	r3, r3, #2
 800aa54:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800aa56:	2300      	movs	r3, #0
 800aa58:	61bb      	str	r3, [r7, #24]
 800aa5a:	e00b      	b.n	800aa74 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	3304      	adds	r3, #4
 800aa6c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	3301      	adds	r3, #1
 800aa72:	61bb      	str	r3, [r7, #24]
 800aa74:	69ba      	ldr	r2, [r7, #24]
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d3ef      	bcc.n	800aa5c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800aa7c:	69fb      	ldr	r3, [r7, #28]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3724      	adds	r7, #36	; 0x24
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr

0800aa8a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa8a:	b480      	push	{r7}
 800aa8c:	b085      	sub	sp, #20
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	785b      	ldrb	r3, [r3, #1]
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d12c      	bne.n	800ab00 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	015a      	lsls	r2, r3, #5
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	4413      	add	r3, r2
 800aaae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	db12      	blt.n	800aade <USB_EPSetStall+0x54>
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00f      	beq.n	800aade <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	015a      	lsls	r2, r3, #5
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	4413      	add	r3, r2
 800aac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	0151      	lsls	r1, r2, #5
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	440a      	add	r2, r1
 800aad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aad8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aadc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	015a      	lsls	r2, r3, #5
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	4413      	add	r3, r2
 800aae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	0151      	lsls	r1, r2, #5
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	440a      	add	r2, r1
 800aaf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aafc:	6013      	str	r3, [r2, #0]
 800aafe:	e02b      	b.n	800ab58 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	015a      	lsls	r2, r3, #5
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	4413      	add	r3, r2
 800ab08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	db12      	blt.n	800ab38 <USB_EPSetStall+0xae>
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d00f      	beq.n	800ab38 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	015a      	lsls	r2, r3, #5
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	4413      	add	r3, r2
 800ab20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68ba      	ldr	r2, [r7, #8]
 800ab28:	0151      	lsls	r1, r2, #5
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	440a      	add	r2, r1
 800ab2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab36:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	015a      	lsls	r2, r3, #5
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	4413      	add	r3, r2
 800ab40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	0151      	lsls	r1, r2, #5
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	440a      	add	r2, r1
 800ab4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ab56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab66:	b480      	push	{r7}
 800ab68:	b085      	sub	sp, #20
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	785b      	ldrb	r3, [r3, #1]
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d128      	bne.n	800abd4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	015a      	lsls	r2, r3, #5
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	4413      	add	r3, r2
 800ab8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	68ba      	ldr	r2, [r7, #8]
 800ab92:	0151      	lsls	r1, r2, #5
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	440a      	add	r2, r1
 800ab98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aba0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	78db      	ldrb	r3, [r3, #3]
 800aba6:	2b03      	cmp	r3, #3
 800aba8:	d003      	beq.n	800abb2 <USB_EPClearStall+0x4c>
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	78db      	ldrb	r3, [r3, #3]
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d138      	bne.n	800ac24 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	015a      	lsls	r2, r3, #5
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	4413      	add	r3, r2
 800abba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	0151      	lsls	r1, r2, #5
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	440a      	add	r2, r1
 800abc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abd0:	6013      	str	r3, [r2, #0]
 800abd2:	e027      	b.n	800ac24 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	015a      	lsls	r2, r3, #5
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	4413      	add	r3, r2
 800abdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	0151      	lsls	r1, r2, #5
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	440a      	add	r2, r1
 800abea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800abf2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	78db      	ldrb	r3, [r3, #3]
 800abf8:	2b03      	cmp	r3, #3
 800abfa:	d003      	beq.n	800ac04 <USB_EPClearStall+0x9e>
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	78db      	ldrb	r3, [r3, #3]
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d10f      	bne.n	800ac24 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	015a      	lsls	r2, r3, #5
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	0151      	lsls	r1, r2, #5
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	440a      	add	r2, r1
 800ac1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac22:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3714      	adds	r7, #20
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ac32:	b480      	push	{r7}
 800ac34:	b085      	sub	sp, #20
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac50:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ac54:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	78fb      	ldrb	r3, [r7, #3]
 800ac60:	011b      	lsls	r3, r3, #4
 800ac62:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ac66:	68f9      	ldr	r1, [r7, #12]
 800ac68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ac70:	2300      	movs	r3, #0
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3714      	adds	r7, #20
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr

0800ac7e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b084      	sub	sp, #16
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac98:	f023 0302 	bic.w	r3, r3, #2
 800ac9c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ac9e:	2003      	movs	r0, #3
 800aca0:	f7f6 f8aa 	bl	8000df8 <HAL_Delay>

  return HAL_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3710      	adds	r7, #16
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b084      	sub	sp, #16
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acc8:	f043 0302 	orr.w	r3, r3, #2
 800accc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800acce:	2003      	movs	r0, #3
 800acd0:	f7f6 f892 	bl	8000df8 <HAL_Delay>

  return HAL_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800acde:	b480      	push	{r7}
 800ace0:	b085      	sub	sp, #20
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	695b      	ldr	r3, [r3, #20]
 800acea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	699b      	ldr	r3, [r3, #24]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	4013      	ands	r3, r2
 800acf4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800acf6:	68fb      	ldr	r3, [r7, #12]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3714      	adds	r7, #20
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad16:	699b      	ldr	r3, [r3, #24]
 800ad18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad20:	69db      	ldr	r3, [r3, #28]
 800ad22:	68ba      	ldr	r2, [r7, #8]
 800ad24:	4013      	ands	r3, r2
 800ad26:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	0c1b      	lsrs	r3, r3, #16
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad4a:	699b      	ldr	r3, [r3, #24]
 800ad4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad54:	69db      	ldr	r3, [r3, #28]
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	4013      	ands	r3, r2
 800ad5a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	b29b      	uxth	r3, r3
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3714      	adds	r7, #20
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b085      	sub	sp, #20
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	460b      	mov	r3, r1
 800ad76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ad7c:	78fb      	ldrb	r3, [r7, #3]
 800ad7e:	015a      	lsls	r2, r3, #5
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	4413      	add	r3, r2
 800ad84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad92:	695b      	ldr	r3, [r3, #20]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	4013      	ands	r3, r2
 800ad98:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad9a:	68bb      	ldr	r3, [r7, #8]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3714      	adds	r7, #20
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b087      	sub	sp, #28
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	460b      	mov	r3, r1
 800adb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adca:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800adcc:	78fb      	ldrb	r3, [r7, #3]
 800adce:	f003 030f 	and.w	r3, r3, #15
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	fa22 f303 	lsr.w	r3, r2, r3
 800add8:	01db      	lsls	r3, r3, #7
 800adda:	b2db      	uxtb	r3, r3
 800addc:	693a      	ldr	r2, [r7, #16]
 800adde:	4313      	orrs	r3, r2
 800ade0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ade2:	78fb      	ldrb	r3, [r7, #3]
 800ade4:	015a      	lsls	r2, r3, #5
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	4413      	add	r3, r2
 800adea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	4013      	ands	r3, r2
 800adf4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800adf6:	68bb      	ldr	r3, [r7, #8]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	371c      	adds	r7, #28
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	695b      	ldr	r3, [r3, #20]
 800ae10:	f003 0301 	and.w	r3, r3, #1
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae3a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ae3e:	f023 0307 	bic.w	r3, r3, #7
 800ae42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3714      	adds	r7, #20
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
	...

0800ae68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b087      	sub	sp, #28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	460b      	mov	r3, r1
 800ae72:	607a      	str	r2, [r7, #4]
 800ae74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	333c      	adds	r3, #60	; 0x3c
 800ae7e:	3304      	adds	r3, #4
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	4a26      	ldr	r2, [pc, #152]	; (800af20 <USB_EP0_OutStart+0xb8>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d90a      	bls.n	800aea2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae9c:	d101      	bne.n	800aea2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	e037      	b.n	800af12 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea8:	461a      	mov	r2, r3
 800aeaa:	2300      	movs	r3, #0
 800aeac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aebc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aec0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	697a      	ldr	r2, [r7, #20]
 800aecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aed0:	f043 0318 	orr.w	r3, r3, #24
 800aed4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	697a      	ldr	r2, [r7, #20]
 800aee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aee4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800aee8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aeea:	7afb      	ldrb	r3, [r7, #11]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d10f      	bne.n	800af10 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef6:	461a      	mov	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	697a      	ldr	r2, [r7, #20]
 800af06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af0a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800af0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	371c      	adds	r7, #28
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	4f54300a 	.word	0x4f54300a

0800af24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800af2c:	2300      	movs	r3, #0
 800af2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	3301      	adds	r3, #1
 800af34:	60fb      	str	r3, [r7, #12]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	4a13      	ldr	r2, [pc, #76]	; (800af88 <USB_CoreReset+0x64>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d901      	bls.n	800af42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800af3e:	2303      	movs	r3, #3
 800af40:	e01b      	b.n	800af7a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	2b00      	cmp	r3, #0
 800af48:	daf2      	bge.n	800af30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800af4a:	2300      	movs	r3, #0
 800af4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	f043 0201 	orr.w	r2, r3, #1
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	3301      	adds	r3, #1
 800af5e:	60fb      	str	r3, [r7, #12]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	4a09      	ldr	r2, [pc, #36]	; (800af88 <USB_CoreReset+0x64>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d901      	bls.n	800af6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800af68:	2303      	movs	r3, #3
 800af6a:	e006      	b.n	800af7a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	f003 0301 	and.w	r3, r3, #1
 800af74:	2b01      	cmp	r3, #1
 800af76:	d0f0      	beq.n	800af5a <USB_CoreReset+0x36>

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	00030d40 	.word	0x00030d40

0800af8c <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	460b      	mov	r3, r1
 800af96:	70fb      	strb	r3, [r7, #3]
	USBD_HID_Init(pdev, cfgidx);
 800af98:	78fb      	ldrb	r3, [r7, #3]
 800af9a:	4619      	mov	r1, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 fbab 	bl	800b6f8 <USBD_HID_Init>
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

    /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 800afa2:	f643 4050 	movw	r0, #15440	; 0x3c50
 800afa6:	f003 fe01 	bl	800ebac <malloc>
 800afaa:	4603      	mov	r3, r0
 800afac:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d105      	bne.n	800afc0 <USBD_AUDIO_Init+0x34>
  {
    pdev->pClassData = NULL;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800afbc:	2302      	movs	r3, #2
 800afbe:	e04b      	b.n	800b058 <USBD_AUDIO_Init+0xcc>
  }

  pdev->pClassData = (void *)haudio;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	7c1b      	ldrb	r3, [r3, #16]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d104      	bne.n	800afda <USBD_AUDIO_Init+0x4e>
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 800afd8:	e003      	b.n	800afe2 <USBD_AUDIO_Init+0x56>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2201      	movs	r2, #1
 800afde:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800afe2:	23c0      	movs	r3, #192	; 0xc0
 800afe4:	2201      	movs	r2, #1
 800afe6:	2101      	movs	r1, #1
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f003 fb2e 	bl	800e64a <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2201      	movs	r2, #1
 800aff2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  haudio->alt_setting = 0U;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2200      	movs	r2, #0
 800affa:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b002:	3304      	adds	r3, #4
 800b004:	2203      	movs	r2, #3
 800b006:	701a      	strb	r2, [r3, #0]
  haudio->wr_ptr = 0U;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b00e:	3308      	adds	r3, #8
 800b010:	2200      	movs	r2, #0
 800b012:	801a      	strh	r2, [r3, #0]
  haudio->rd_ptr = 0U;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b01a:	3306      	adds	r3, #6
 800b01c:	2200      	movs	r2, #0
 800b01e:	801a      	strh	r2, [r3, #0]
  haudio->rd_enable = 0U;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b026:	3305      	adds	r3, #5
 800b028:	2200      	movs	r2, #0
 800b02a:	701a      	strb	r2, [r3, #0]

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2200      	movs	r2, #0
 800b036:	2146      	movs	r1, #70	; 0x46
 800b038:	f64b 3080 	movw	r0, #48000	; 0xbb80
 800b03c:	4798      	blx	r3
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d001      	beq.n	800b048 <USBD_AUDIO_Init+0xbc>
                                                       AUDIO_DEFAULT_VOLUME,
                                                       0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 800b044:	2303      	movs	r3, #3
 800b046:	e007      	b.n	800b058 <USBD_AUDIO_Init+0xcc>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	1d1a      	adds	r2, r3, #4
 800b04c:	23c0      	movs	r3, #192	; 0xc0
 800b04e:	2101      	movs	r1, #1
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f003 fbe9 	bl	800e828 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	460b      	mov	r3, r1
 800b06a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_HID_DeInit(pdev, cfgidx);
 800b06c:	78fb      	ldrb	r3, [r7, #3]
 800b06e:	4619      	mov	r1, r3
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 fb75 	bl	800b760 <USBD_HID_DeInit>
  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 800b076:	2101      	movs	r1, #1
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f003 fb0c 	bl	800e696 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00f      	beq.n	800b0b8 <USBD_AUDIO_DeInit+0x58>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f003 fd86 	bl	800ebbc <free>
    pdev->pClassData = NULL;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3708      	adds	r7, #8
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
	...

0800b0c4 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
	if (req->wIndex==2)
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	889b      	ldrh	r3, [r3, #4]
 800b0d2:	2b02      	cmp	r3, #2
 800b0d4:	d105      	bne.n	800b0e2 <USBD_AUDIO_Setup+0x1e>
	{
		return USBD_HID_Setup(pdev, req);
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 fb65 	bl	800b7a8 <USBD_HID_Setup>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	e0b6      	b.n	800b250 <USBD_AUDIO_Setup+0x18c>
	}
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0f0:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d01a      	beq.n	800b134 <USBD_AUDIO_Setup+0x70>
 800b0fe:	2b20      	cmp	r3, #32
 800b100:	f040 809e 	bne.w	800b240 <USBD_AUDIO_Setup+0x17c>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	785b      	ldrb	r3, [r3, #1]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d006      	beq.n	800b11a <USBD_AUDIO_Setup+0x56>
 800b10c:	2b81      	cmp	r3, #129	; 0x81
 800b10e:	d109      	bne.n	800b124 <USBD_AUDIO_Setup+0x60>
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 fa76 	bl	800b604 <AUDIO_REQ_GetCurrent>
      break;
 800b118:	e00b      	b.n	800b132 <USBD_AUDIO_Setup+0x6e>

    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 fa91 	bl	800b644 <AUDIO_REQ_SetCurrent>
      break;
 800b122:	e006      	b.n	800b132 <USBD_AUDIO_Setup+0x6e>

    default:
      USBD_CtlError(pdev, req);
 800b124:	6839      	ldr	r1, [r7, #0]
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f001 fc86 	bl	800ca38 <USBD_CtlError>
      ret = USBD_FAIL;
 800b12c:	2303      	movs	r3, #3
 800b12e:	75fb      	strb	r3, [r7, #23]
      break;
 800b130:	bf00      	nop
    }
    break;
 800b132:	e08c      	b.n	800b24e <USBD_AUDIO_Setup+0x18a>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	785b      	ldrb	r3, [r3, #1]
 800b138:	2b0b      	cmp	r3, #11
 800b13a:	d876      	bhi.n	800b22a <USBD_AUDIO_Setup+0x166>
 800b13c:	a201      	add	r2, pc, #4	; (adr r2, 800b144 <USBD_AUDIO_Setup+0x80>)
 800b13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b142:	bf00      	nop
 800b144:	0800b175 	.word	0x0800b175
 800b148:	0800b239 	.word	0x0800b239
 800b14c:	0800b22b 	.word	0x0800b22b
 800b150:	0800b22b 	.word	0x0800b22b
 800b154:	0800b22b 	.word	0x0800b22b
 800b158:	0800b22b 	.word	0x0800b22b
 800b15c:	0800b19d 	.word	0x0800b19d
 800b160:	0800b22b 	.word	0x0800b22b
 800b164:	0800b22b 	.word	0x0800b22b
 800b168:	0800b22b 	.word	0x0800b22b
 800b16c:	0800b1c7 	.word	0x0800b1c7
 800b170:	0800b1ed 	.word	0x0800b1ed
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b17a:	2b03      	cmp	r3, #3
 800b17c:	d107      	bne.n	800b18e <USBD_AUDIO_Setup+0xca>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b17e:	f107 0308 	add.w	r3, r7, #8
 800b182:	2202      	movs	r2, #2
 800b184:	4619      	mov	r1, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f001 fcc7 	bl	800cb1a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b18c:	e057      	b.n	800b23e <USBD_AUDIO_Setup+0x17a>
        USBD_CtlError(pdev, req);
 800b18e:	6839      	ldr	r1, [r7, #0]
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f001 fc51 	bl	800ca38 <USBD_CtlError>
        ret = USBD_FAIL;
 800b196:	2303      	movs	r3, #3
 800b198:	75fb      	strb	r3, [r7, #23]
      break;
 800b19a:	e050      	b.n	800b23e <USBD_AUDIO_Setup+0x17a>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	885b      	ldrh	r3, [r3, #2]
 800b1a0:	0a1b      	lsrs	r3, r3, #8
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	2b21      	cmp	r3, #33	; 0x21
 800b1a6:	d149      	bne.n	800b23c <USBD_AUDIO_Setup+0x178>
      {
        pbuf = USBD_AUDIO_CfgDesc + 18;
 800b1a8:	4b2b      	ldr	r3, [pc, #172]	; (800b258 <USBD_AUDIO_Setup+0x194>)
 800b1aa:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	88db      	ldrh	r3, [r3, #6]
 800b1b0:	2b09      	cmp	r3, #9
 800b1b2:	bf28      	it	cs
 800b1b4:	2309      	movcs	r3, #9
 800b1b6:	817b      	strh	r3, [r7, #10]

        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b1b8:	897b      	ldrh	r3, [r7, #10]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	68f9      	ldr	r1, [r7, #12]
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f001 fcab 	bl	800cb1a <USBD_CtlSendData>
      }
      break;
 800b1c4:	e03a      	b.n	800b23c <USBD_AUDIO_Setup+0x178>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1cc:	2b03      	cmp	r3, #3
 800b1ce:	d106      	bne.n	800b1de <USBD_AUDIO_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f001 fc9f 	bl	800cb1a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b1dc:	e02f      	b.n	800b23e <USBD_AUDIO_Setup+0x17a>
        USBD_CtlError(pdev, req);
 800b1de:	6839      	ldr	r1, [r7, #0]
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f001 fc29 	bl	800ca38 <USBD_CtlError>
        ret = USBD_FAIL;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	75fb      	strb	r3, [r7, #23]
      break;
 800b1ea:	e028      	b.n	800b23e <USBD_AUDIO_Setup+0x17a>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1f2:	2b03      	cmp	r3, #3
 800b1f4:	d112      	bne.n	800b21c <USBD_AUDIO_Setup+0x158>
      {
        if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	885b      	ldrh	r3, [r3, #2]
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	2b03      	cmp	r3, #3
 800b1fe:	d806      	bhi.n	800b20e <USBD_AUDIO_Setup+0x14a>
        {
          haudio->alt_setting = (uint8_t)(req->wValue);
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	885b      	ldrh	r3, [r3, #2]
 800b204:	b2db      	uxtb	r3, r3
 800b206:	461a      	mov	r2, r3
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	601a      	str	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b20c:	e017      	b.n	800b23e <USBD_AUDIO_Setup+0x17a>
          USBD_CtlError(pdev, req);
 800b20e:	6839      	ldr	r1, [r7, #0]
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f001 fc11 	bl	800ca38 <USBD_CtlError>
          ret = USBD_FAIL;
 800b216:	2303      	movs	r3, #3
 800b218:	75fb      	strb	r3, [r7, #23]
      break;
 800b21a:	e010      	b.n	800b23e <USBD_AUDIO_Setup+0x17a>
        USBD_CtlError(pdev, req);
 800b21c:	6839      	ldr	r1, [r7, #0]
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f001 fc0a 	bl	800ca38 <USBD_CtlError>
        ret = USBD_FAIL;
 800b224:	2303      	movs	r3, #3
 800b226:	75fb      	strb	r3, [r7, #23]
      break;
 800b228:	e009      	b.n	800b23e <USBD_AUDIO_Setup+0x17a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b22a:	6839      	ldr	r1, [r7, #0]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f001 fc03 	bl	800ca38 <USBD_CtlError>
      ret = USBD_FAIL;
 800b232:	2303      	movs	r3, #3
 800b234:	75fb      	strb	r3, [r7, #23]
      break;
 800b236:	e002      	b.n	800b23e <USBD_AUDIO_Setup+0x17a>
      break;
 800b238:	bf00      	nop
 800b23a:	e008      	b.n	800b24e <USBD_AUDIO_Setup+0x18a>
      break;
 800b23c:	bf00      	nop
    }
    break;
 800b23e:	e006      	b.n	800b24e <USBD_AUDIO_Setup+0x18a>
  default:
    USBD_CtlError(pdev, req);
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f001 fbf8 	bl	800ca38 <USBD_CtlError>
    ret = USBD_FAIL;
 800b248:	2303      	movs	r3, #3
 800b24a:	75fb      	strb	r3, [r7, #23]
    break;
 800b24c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b24e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3718      	adds	r7, #24
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	20000052 	.word	0x20000052

0800b25c <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2297      	movs	r2, #151	; 0x97
 800b268:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800b26a:	4b03      	ldr	r3, [pc, #12]	; (800b278 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	370c      	adds	r7, #12
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr
 800b278:	20000040 	.word	0x20000040

0800b27c <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	460b      	mov	r3, r1
 800b286:	70fb      	strb	r3, [r7, #3]
//  UNUSED(pdev);
//  UNUSED(epnum);
	USBD_HID_DataIn(pdev, epnum);
 800b288:	78fb      	ldrb	r3, [r7, #3]
 800b28a:	4619      	mov	r1, r3
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 fbab 	bl	800b9e8 <USBD_HID_DataIn>
  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2aa:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b2b2:	330a      	adds	r3, #10
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d11d      	bne.n	800b2f6 <USBD_AUDIO_EP0_RxReady+0x5a>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 800b2c0:	330c      	adds	r3, #12
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d116      	bne.n	800b2f6 <USBD_AUDIO_EP0_RxReady+0x5a>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2ce:	691a      	ldr	r2, [r3, #16]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b2d6:	330b      	adds	r3, #11
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	4790      	blx	r2
      haudio->control.cmd = 0U;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b2e4:	330a      	adds	r3, #10
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 800b2f0:	330b      	adds	r3, #11
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	701a      	strb	r2, [r3, #0]
    }
  }

  return (uint8_t)USBD_OK;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 800b316:	b480      	push	{r7}
 800b318:	b083      	sub	sp, #12
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <USBD_AUDIO_Sync>:
  * @param  pdev: device instance
  * @retval status
  */
extern int packetReceived;
void USBD_AUDIO_Sync(USBD_HandleTypeDef *pdev, AUDIO_OffsetTypeDef offset)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	460b      	mov	r3, r1
 800b336:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint32_t BufferSize = AUDIO_TOTAL_BUF_SIZE / 2U;
 800b338:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800b33c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b344:	2b00      	cmp	r3, #0
 800b346:	f000 80b1 	beq.w	800b4ac <USBD_AUDIO_Sync+0x180>
  {
    return;
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b350:	60bb      	str	r3, [r7, #8]

  haudio->offset = offset;
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b358:	3304      	adds	r3, #4
 800b35a:	78fa      	ldrb	r2, [r7, #3]
 800b35c:	701a      	strb	r2, [r3, #0]

  if (haudio->rd_enable == 1U)
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b364:	3305      	adds	r3, #5
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d11b      	bne.n	800b3a4 <USBD_AUDIO_Sync+0x78>
  {
    haudio->rd_ptr += (uint16_t)BufferSize;
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b372:	3306      	adds	r3, #6
 800b374:	881a      	ldrh	r2, [r3, #0]
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	b29b      	uxth	r3, r3
 800b37a:	4413      	add	r3, r2
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b384:	3306      	adds	r3, #6
 800b386:	801a      	strh	r2, [r3, #0]

    if (haudio->rd_ptr == AUDIO_TOTAL_BUF_SIZE)
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b38e:	3306      	adds	r3, #6
 800b390:	881b      	ldrh	r3, [r3, #0]
 800b392:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800b396:	d105      	bne.n	800b3a4 <USBD_AUDIO_Sync+0x78>
    {
      /* roll back */
      haudio->rd_ptr = 0U;
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b39e:	3306      	adds	r3, #6
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	801a      	strh	r2, [r3, #0]
    }
  }

  if (haudio->rd_ptr > haudio->wr_ptr)
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b3aa:	3306      	adds	r3, #6
 800b3ac:	881a      	ldrh	r2, [r3, #0]
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b3b4:	3308      	adds	r3, #8
 800b3b6:	881b      	ldrh	r3, [r3, #0]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d93c      	bls.n	800b436 <USBD_AUDIO_Sync+0x10a>
  {
    if ((haudio->rd_ptr - haudio->wr_ptr) < AUDIO_OUT_PACKET)
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b3c2:	3306      	adds	r3, #6
 800b3c4:	881b      	ldrh	r3, [r3, #0]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b3ce:	3308      	adds	r3, #8
 800b3d0:	881b      	ldrh	r3, [r3, #0]
 800b3d2:	1ad3      	subs	r3, r2, r3
 800b3d4:	2bbf      	cmp	r3, #191	; 0xbf
 800b3d6:	dc03      	bgt.n	800b3e0 <USBD_AUDIO_Sync+0xb4>
    {
      BufferSize += 4U;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	3304      	adds	r3, #4
 800b3dc:	60fb      	str	r3, [r7, #12]
 800b3de:	e04e      	b.n	800b47e <USBD_AUDIO_Sync+0x152>
    }
    else
    {
      if ((haudio->rd_ptr - haudio->wr_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b3e6:	3306      	adds	r3, #6
 800b3e8:	881b      	ldrh	r3, [r3, #0]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b3f2:	3308      	adds	r3, #8
 800b3f4:	881b      	ldrh	r3, [r3, #0]
 800b3f6:	1ad3      	subs	r3, r2, r3
 800b3f8:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 800b3fc:	dd3f      	ble.n	800b47e <USBD_AUDIO_Sync+0x152>
      {
       // BufferSize -= 4U;
    	  haudio->alt_setting = 0U;
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	2200      	movs	r2, #0
 800b402:	601a      	str	r2, [r3, #0]
    	  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b40a:	3304      	adds	r3, #4
 800b40c:	2203      	movs	r2, #3
 800b40e:	701a      	strb	r2, [r3, #0]
    	  haudio->wr_ptr = 0U;
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b416:	3308      	adds	r3, #8
 800b418:	2200      	movs	r2, #0
 800b41a:	801a      	strh	r2, [r3, #0]
    	  haudio->rd_ptr = 0U;
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b422:	3306      	adds	r3, #6
 800b424:	2200      	movs	r2, #0
 800b426:	801a      	strh	r2, [r3, #0]
    	  haudio->rd_enable = 0U;
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b42e:	3305      	adds	r3, #5
 800b430:	2200      	movs	r2, #0
 800b432:	701a      	strb	r2, [r3, #0]
 800b434:	e023      	b.n	800b47e <USBD_AUDIO_Sync+0x152>
            }
    }
  }
  else
  {
    if ((haudio->wr_ptr - haudio->rd_ptr) < AUDIO_OUT_PACKET)
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b43c:	3308      	adds	r3, #8
 800b43e:	881b      	ldrh	r3, [r3, #0]
 800b440:	461a      	mov	r2, r3
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b448:	3306      	adds	r3, #6
 800b44a:	881b      	ldrh	r3, [r3, #0]
 800b44c:	1ad3      	subs	r3, r2, r3
 800b44e:	2bbf      	cmp	r3, #191	; 0xbf
 800b450:	dc03      	bgt.n	800b45a <USBD_AUDIO_Sync+0x12e>
    {
       BufferSize -= 4U;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	3b04      	subs	r3, #4
 800b456:	60fb      	str	r3, [r7, #12]
 800b458:	e011      	b.n	800b47e <USBD_AUDIO_Sync+0x152>
    }
    else
    {
      if ((haudio->wr_ptr - haudio->rd_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b460:	3308      	adds	r3, #8
 800b462:	881b      	ldrh	r3, [r3, #0]
 800b464:	461a      	mov	r2, r3
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b46c:	3306      	adds	r3, #6
 800b46e:	881b      	ldrh	r3, [r3, #0]
 800b470:	1ad3      	subs	r3, r2, r3
 800b472:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 800b476:	dd02      	ble.n	800b47e <USBD_AUDIO_Sync+0x152>
      {
         BufferSize += 4U;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	3304      	adds	r3, #4
 800b47c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  if (haudio->offset == AUDIO_OFFSET_FULL)
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b484:	3304      	adds	r3, #4
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d110      	bne.n	800b4ae <USBD_AUDIO_Sync+0x182>
  {
	  ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	68ba      	ldr	r2, [r7, #8]
 800b496:	1d10      	adds	r0, r2, #4
 800b498:	2202      	movs	r2, #2
 800b49a:	68f9      	ldr	r1, [r7, #12]
 800b49c:	4798      	blx	r3
                                                         BufferSize, AUDIO_CMD_PLAY);
    haudio->offset = AUDIO_OFFSET_NONE;
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b4a4:	3304      	adds	r3, #4
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	701a      	strb	r2, [r3, #0]
 800b4aa:	e000      	b.n	800b4ae <USBD_AUDIO_Sync+0x182>
    return;
 800b4ac:	bf00      	nop
  }
}
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800b4c0:	2300      	movs	r3, #0
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	370c      	adds	r7, #12
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr

0800b4ce <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4ce:	b480      	push	{r7}
 800b4d0:	b083      	sub	sp, #12
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800b4da:	2300      	movs	r3, #0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	370c      	adds	r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4e8:	b590      	push	{r4, r7, lr}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4fa:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 800b4fc:	78fb      	ldrb	r3, [r7, #3]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d179      	bne.n	800b5f6 <USBD_AUDIO_DataOut+0x10e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 800b502:	78fb      	ldrb	r3, [r7, #3]
 800b504:	4619      	mov	r1, r3
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f003 f9af 	bl	800e86a <USBD_LL_GetRxDataSize>
 800b50c:	4603      	mov	r3, r0
 800b50e:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b516:	695c      	ldr	r4, [r3, #20]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b51e:	3308      	adds	r3, #8
 800b520:	881b      	ldrh	r3, [r3, #0]
 800b522:	461a      	mov	r2, r3
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	4413      	add	r3, r2
 800b528:	3304      	adds	r3, #4
 800b52a:	8979      	ldrh	r1, [r7, #10]
 800b52c:	2201      	movs	r2, #1
 800b52e:	4618      	mov	r0, r3
 800b530:	47a0      	blx	r4
                                                           PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b538:	3308      	adds	r3, #8
 800b53a:	881a      	ldrh	r2, [r3, #0]
 800b53c:	897b      	ldrh	r3, [r7, #10]
 800b53e:	4413      	add	r3, r2
 800b540:	b29a      	uxth	r2, r3
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b548:	3308      	adds	r3, #8
 800b54a:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b552:	3308      	adds	r3, #8
 800b554:	881b      	ldrh	r3, [r3, #0]
 800b556:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800b55a:	d129      	bne.n	800b5b0 <USBD_AUDIO_DataOut+0xc8>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b562:	3308      	adds	r3, #8
 800b564:	2200      	movs	r2, #0
 800b566:	801a      	strh	r2, [r3, #0]
      if (playing==0)
 800b568:	4b25      	ldr	r3, [pc, #148]	; (800b600 <USBD_AUDIO_DataOut+0x118>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d108      	bne.n	800b582 <USBD_AUDIO_DataOut+0x9a>
    	  {
    	  playing=1;
 800b570:	4b23      	ldr	r3, [pc, #140]	; (800b600 <USBD_AUDIO_DataOut+0x118>)
 800b572:	2201      	movs	r2, #1
 800b574:	601a      	str	r2, [r3, #0]
    	  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b57c:	3304      	adds	r3, #4
 800b57e:	2203      	movs	r2, #3
 800b580:	701a      	strb	r2, [r3, #0]
    	  }
      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b588:	3304      	adds	r3, #4
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	2b03      	cmp	r3, #3
 800b58e:	d10f      	bne.n	800b5b0 <USBD_AUDIO_DataOut+0xc8>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	1d10      	adds	r0, r2, #4
 800b59c:	2201      	movs	r2, #1
 800b59e:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800b5a2:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b5aa:	3304      	adds	r3, #4
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	701a      	strb	r2, [r3, #0]
      }
    }

    if (haudio->rd_enable == 0U)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b5b6:	3305      	adds	r3, #5
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10d      	bne.n	800b5da <USBD_AUDIO_DataOut+0xf2>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b5c4:	3308      	adds	r3, #8
 800b5c6:	881b      	ldrh	r3, [r3, #0]
 800b5c8:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800b5cc:	d105      	bne.n	800b5da <USBD_AUDIO_DataOut+0xf2>
      {
        haudio->rd_enable = 1U;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b5d4:	3305      	adds	r3, #5
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
                                 &haudio->buffer[haudio->wr_ptr],
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b5e0:	3308      	adds	r3, #8
 800b5e2:	881b      	ldrh	r3, [r3, #0]
 800b5e4:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	1d1a      	adds	r2, r3, #4
 800b5ec:	23c0      	movs	r3, #192	; 0xc0
 800b5ee:	2101      	movs	r1, #1
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f003 f919 	bl	800e828 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3714      	adds	r7, #20
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd90      	pop	{r4, r7, pc}
 800b600:	2000024c 	.word	0x2000024c

0800b604 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b614:	60fb      	str	r3, [r7, #12]

  (void)USBD_memset(haudio->control.data, 0, 64U);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b61c:	330b      	adds	r3, #11
 800b61e:	2240      	movs	r2, #64	; 0x40
 800b620:	2100      	movs	r1, #0
 800b622:	4618      	mov	r0, r3
 800b624:	f003 fad2 	bl	800ebcc <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b62e:	330b      	adds	r3, #11
 800b630:	683a      	ldr	r2, [r7, #0]
 800b632:	88d2      	ldrh	r2, [r2, #6]
 800b634:	4619      	mov	r1, r3
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f001 fa6f 	bl	800cb1a <USBD_CtlSendData>
}
 800b63c:	bf00      	nop
 800b63e:	3710      	adds	r7, #16
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b654:	60fb      	str	r3, [r7, #12]

  if (req->wLength != 0U)
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	88db      	ldrh	r3, [r3, #6]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d021      	beq.n	800b6a2 <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b664:	330b      	adds	r3, #11
 800b666:	683a      	ldr	r2, [r7, #0]
 800b668:	88d2      	ldrh	r2, [r2, #6]
 800b66a:	4619      	mov	r1, r3
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f001 fa80 	bl	800cb72 <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b678:	330a      	adds	r3, #10
 800b67a:	2201      	movs	r2, #1
 800b67c:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	88db      	ldrh	r3, [r3, #6]
 800b682:	b2da      	uxtb	r2, r3
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 800b68a:	330b      	adds	r3, #11
 800b68c:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	889b      	ldrh	r3, [r3, #4]
 800b692:	0a1b      	lsrs	r3, r3, #8
 800b694:	b29b      	uxth	r3, r3
 800b696:	b2da      	uxtb	r2, r3
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 800b69e:	330c      	adds	r3, #12
 800b6a0:	701a      	strb	r2, [r3, #0]
  }
}
 800b6a2:	bf00      	nop
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
	...

0800b6ac <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	220a      	movs	r2, #10
 800b6b8:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800b6ba:	4b03      	ldr	r3, [pc, #12]	; (800b6c8 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr
 800b6c8:	200000d8 	.word	0x200000d8

0800b6cc <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d101      	bne.n	800b6e0 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b6dc:	2303      	movs	r3, #3
 800b6de:	e004      	b.n	800b6ea <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	370c      	adds	r7, #12
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr
	...

0800b6f8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	460b      	mov	r3, r1
 800b702:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800b704:	2010      	movs	r0, #16
 800b706:	f003 fa51 	bl	800ebac <malloc>
 800b70a:	4603      	mov	r3, r0
 800b70c:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d104      	bne.n	800b71e <USBD_HID_Init+0x26>
  {
    classData = NULL;
 800b714:	4b11      	ldr	r3, [pc, #68]	; (800b75c <USBD_HID_Init+0x64>)
 800b716:	2200      	movs	r2, #0
 800b718:	601a      	str	r2, [r3, #0]
    return (uint8_t)USBD_EMEM;
 800b71a:	2302      	movs	r3, #2
 800b71c:	e01a      	b.n	800b754 <USBD_HID_Init+0x5c>
  }

  classData = (void *)hhid;
 800b71e:	4a0f      	ldr	r2, [pc, #60]	; (800b75c <USBD_HID_Init+0x64>)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6013      	str	r3, [r2, #0]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	7c1b      	ldrb	r3, [r3, #16]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d103      	bne.n	800b734 <USBD_HID_Init+0x3c>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2207      	movs	r2, #7
 800b730:	875a      	strh	r2, [r3, #58]	; 0x3a
 800b732:	e002      	b.n	800b73a <USBD_HID_Init+0x42>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	220a      	movs	r2, #10
 800b738:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800b73a:	2304      	movs	r3, #4
 800b73c:	2203      	movs	r2, #3
 800b73e:	2181      	movs	r1, #129	; 0x81
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f002 ff82 	bl	800e64a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2201      	movs	r2, #1
 800b74a:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2200      	movs	r2, #0
 800b750:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	2000025c 	.word	0x2000025c

0800b760 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	460b      	mov	r3, r1
 800b76a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800b76c:	2181      	movs	r1, #129	; 0x81
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f002 ff91 	bl	800e696 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (classData != NULL)
 800b780:	4b08      	ldr	r3, [pc, #32]	; (800b7a4 <USBD_HID_DeInit+0x44>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d007      	beq.n	800b798 <USBD_HID_DeInit+0x38>
  {
    (void)USBD_free(classData);
 800b788:	4b06      	ldr	r3, [pc, #24]	; (800b7a4 <USBD_HID_DeInit+0x44>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4618      	mov	r0, r3
 800b78e:	f003 fa15 	bl	800ebbc <free>
    classData = NULL;
 800b792:	4b04      	ldr	r3, [pc, #16]	; (800b7a4 <USBD_HID_DeInit+0x44>)
 800b794:	2200      	movs	r2, #0
 800b796:	601a      	str	r2, [r3, #0]
  }

  return (uint8_t)USBD_OK;
 800b798:	2300      	movs	r3, #0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3708      	adds	r7, #8
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	2000025c 	.word	0x2000025c

0800b7a8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)classData;
 800b7b2:	4b78      	ldr	r3, [pc, #480]	; (800b994 <USBD_HID_Setup+0x1ec>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d046      	beq.n	800b85a <USBD_HID_Setup+0xb2>
 800b7cc:	2b20      	cmp	r3, #32
 800b7ce:	f040 80d5 	bne.w	800b97c <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	785b      	ldrb	r3, [r3, #1]
 800b7d6:	3b02      	subs	r3, #2
 800b7d8:	2b09      	cmp	r3, #9
 800b7da:	d836      	bhi.n	800b84a <USBD_HID_Setup+0xa2>
 800b7dc:	a201      	add	r2, pc, #4	; (adr r2, 800b7e4 <USBD_HID_Setup+0x3c>)
 800b7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e2:	bf00      	nop
 800b7e4:	0800b83b 	.word	0x0800b83b
 800b7e8:	0800b81b 	.word	0x0800b81b
 800b7ec:	0800b84b 	.word	0x0800b84b
 800b7f0:	0800b84b 	.word	0x0800b84b
 800b7f4:	0800b84b 	.word	0x0800b84b
 800b7f8:	0800b84b 	.word	0x0800b84b
 800b7fc:	0800b84b 	.word	0x0800b84b
 800b800:	0800b84b 	.word	0x0800b84b
 800b804:	0800b829 	.word	0x0800b829
 800b808:	0800b80d 	.word	0x0800b80d
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	885b      	ldrh	r3, [r3, #2]
 800b810:	b2db      	uxtb	r3, r3
 800b812:	461a      	mov	r2, r3
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	601a      	str	r2, [r3, #0]
      break;
 800b818:	e01e      	b.n	800b858 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2201      	movs	r2, #1
 800b81e:	4619      	mov	r1, r3
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f001 f97a 	bl	800cb1a <USBD_CtlSendData>
      break;
 800b826:	e017      	b.n	800b858 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	885b      	ldrh	r3, [r3, #2]
 800b82c:	0a1b      	lsrs	r3, r3, #8
 800b82e:	b29b      	uxth	r3, r3
 800b830:	b2db      	uxtb	r3, r3
 800b832:	461a      	mov	r2, r3
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	605a      	str	r2, [r3, #4]
      break;
 800b838:	e00e      	b.n	800b858 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	3304      	adds	r3, #4
 800b83e:	2201      	movs	r2, #1
 800b840:	4619      	mov	r1, r3
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f001 f969 	bl	800cb1a <USBD_CtlSendData>
      break;
 800b848:	e006      	b.n	800b858 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f001 f8f3 	bl	800ca38 <USBD_CtlError>
      ret = USBD_FAIL;
 800b852:	2303      	movs	r3, #3
 800b854:	75fb      	strb	r3, [r7, #23]
      break;
 800b856:	bf00      	nop
    }
    break;
 800b858:	e097      	b.n	800b98a <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	785b      	ldrb	r3, [r3, #1]
 800b85e:	2b0b      	cmp	r3, #11
 800b860:	f200 8083 	bhi.w	800b96a <USBD_HID_Setup+0x1c2>
 800b864:	a201      	add	r2, pc, #4	; (adr r2, 800b86c <USBD_HID_Setup+0xc4>)
 800b866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b86a:	bf00      	nop
 800b86c:	0800b89d 	.word	0x0800b89d
 800b870:	0800b979 	.word	0x0800b979
 800b874:	0800b96b 	.word	0x0800b96b
 800b878:	0800b96b 	.word	0x0800b96b
 800b87c:	0800b96b 	.word	0x0800b96b
 800b880:	0800b96b 	.word	0x0800b96b
 800b884:	0800b8c5 	.word	0x0800b8c5
 800b888:	0800b96b 	.word	0x0800b96b
 800b88c:	0800b96b 	.word	0x0800b96b
 800b890:	0800b96b 	.word	0x0800b96b
 800b894:	0800b91d 	.word	0x0800b91d
 800b898:	0800b945 	.word	0x0800b945
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8a2:	2b03      	cmp	r3, #3
 800b8a4:	d107      	bne.n	800b8b6 <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b8a6:	f107 030a 	add.w	r3, r7, #10
 800b8aa:	2202      	movs	r2, #2
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f001 f933 	bl	800cb1a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b8b4:	e061      	b.n	800b97a <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800b8b6:	6839      	ldr	r1, [r7, #0]
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f001 f8bd 	bl	800ca38 <USBD_CtlError>
        ret = USBD_FAIL;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	75fb      	strb	r3, [r7, #23]
      break;
 800b8c2:	e05a      	b.n	800b97a <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	885b      	ldrh	r3, [r3, #2]
 800b8c8:	0a1b      	lsrs	r3, r3, #8
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	2b22      	cmp	r3, #34	; 0x22
 800b8ce:	d108      	bne.n	800b8e2 <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	88db      	ldrh	r3, [r3, #6]
 800b8d4:	2b2c      	cmp	r3, #44	; 0x2c
 800b8d6:	bf28      	it	cs
 800b8d8:	232c      	movcs	r3, #44	; 0x2c
 800b8da:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 800b8dc:	4b2e      	ldr	r3, [pc, #184]	; (800b998 <USBD_HID_Setup+0x1f0>)
 800b8de:	613b      	str	r3, [r7, #16]
 800b8e0:	e015      	b.n	800b90e <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	885b      	ldrh	r3, [r3, #2]
 800b8e6:	0a1b      	lsrs	r3, r3, #8
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	2b21      	cmp	r3, #33	; 0x21
 800b8ec:	d108      	bne.n	800b900 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 800b8ee:	4b2b      	ldr	r3, [pc, #172]	; (800b99c <USBD_HID_Setup+0x1f4>)
 800b8f0:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	88db      	ldrh	r3, [r3, #6]
 800b8f6:	2b09      	cmp	r3, #9
 800b8f8:	bf28      	it	cs
 800b8fa:	2309      	movcs	r3, #9
 800b8fc:	82bb      	strh	r3, [r7, #20]
 800b8fe:	e006      	b.n	800b90e <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b900:	6839      	ldr	r1, [r7, #0]
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f001 f898 	bl	800ca38 <USBD_CtlError>
        ret = USBD_FAIL;
 800b908:	2303      	movs	r3, #3
 800b90a:	75fb      	strb	r3, [r7, #23]
        break;
 800b90c:	e035      	b.n	800b97a <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b90e:	8abb      	ldrh	r3, [r7, #20]
 800b910:	461a      	mov	r2, r3
 800b912:	6939      	ldr	r1, [r7, #16]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f001 f900 	bl	800cb1a <USBD_CtlSendData>
      break;
 800b91a:	e02e      	b.n	800b97a <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b922:	2b03      	cmp	r3, #3
 800b924:	d107      	bne.n	800b936 <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	3308      	adds	r3, #8
 800b92a:	2201      	movs	r2, #1
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f001 f8f3 	bl	800cb1a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b934:	e021      	b.n	800b97a <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800b936:	6839      	ldr	r1, [r7, #0]
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f001 f87d 	bl	800ca38 <USBD_CtlError>
        ret = USBD_FAIL;
 800b93e:	2303      	movs	r3, #3
 800b940:	75fb      	strb	r3, [r7, #23]
      break;
 800b942:	e01a      	b.n	800b97a <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b94a:	2b03      	cmp	r3, #3
 800b94c:	d106      	bne.n	800b95c <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	885b      	ldrh	r3, [r3, #2]
 800b952:	b2db      	uxtb	r3, r3
 800b954:	461a      	mov	r2, r3
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b95a:	e00e      	b.n	800b97a <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f001 f86a 	bl	800ca38 <USBD_CtlError>
        ret = USBD_FAIL;
 800b964:	2303      	movs	r3, #3
 800b966:	75fb      	strb	r3, [r7, #23]
      break;
 800b968:	e007      	b.n	800b97a <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b96a:	6839      	ldr	r1, [r7, #0]
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f001 f863 	bl	800ca38 <USBD_CtlError>
      ret = USBD_FAIL;
 800b972:	2303      	movs	r3, #3
 800b974:	75fb      	strb	r3, [r7, #23]
      break;
 800b976:	e000      	b.n	800b97a <USBD_HID_Setup+0x1d2>
      break;
 800b978:	bf00      	nop
    }
    break;
 800b97a:	e006      	b.n	800b98a <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 800b97c:	6839      	ldr	r1, [r7, #0]
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f001 f85a 	bl	800ca38 <USBD_CtlError>
    ret = USBD_FAIL;
 800b984:	2303      	movs	r3, #3
 800b986:	75fb      	strb	r3, [r7, #23]
    break;
 800b988:	bf00      	nop
  }

  return (uint8_t)ret;
 800b98a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3718      	adds	r7, #24
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	2000025c 	.word	0x2000025c
 800b998:	200000f0 	.word	0x200000f0
 800b99c:	200000e4 	.word	0x200000e4

0800b9a0 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)classData;
 800b9ae:	4b0d      	ldr	r3, [pc, #52]	; (800b9e4 <USBD_HID_SendReport+0x44>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9ba:	2b03      	cmp	r3, #3
 800b9bc:	d10c      	bne.n	800b9d8 <USBD_HID_SendReport+0x38>
  {
    if (hhid->state == HID_IDLE)
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	7b1b      	ldrb	r3, [r3, #12]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d108      	bne.n	800b9d8 <USBD_HID_SendReport+0x38>
    {
      hhid->state = HID_BUSY;
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800b9cc:	88fb      	ldrh	r3, [r7, #6]
 800b9ce:	68ba      	ldr	r2, [r7, #8]
 800b9d0:	2181      	movs	r1, #129	; 0x81
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f002 ff07 	bl	800e7e6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3718      	adds	r7, #24
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	2000025c 	.word	0x2000025c

0800b9e8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)classData)->state = HID_IDLE;
 800b9f4:	4b05      	ldr	r3, [pc, #20]	; (800ba0c <USBD_HID_DataIn+0x24>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	370c      	adds	r7, #12
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr
 800ba0a:	bf00      	nop
 800ba0c:	2000025c 	.word	0x2000025c

0800ba10 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d101      	bne.n	800ba28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ba24:	2303      	movs	r3, #3
 800ba26:	e025      	b.n	800ba74 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d003      	beq.n	800ba3a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d003      	beq.n	800ba4c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d003      	beq.n	800ba5a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	79fa      	ldrb	r2, [r7, #7]
 800ba66:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f002 fd87 	bl	800e57c <USBD_LL_Init>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ba72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba86:	2300      	movs	r3, #0
 800ba88:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d101      	bne.n	800ba94 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ba90:	2303      	movs	r3, #3
 800ba92:	e010      	b.n	800bab6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	683a      	ldr	r2, [r7, #0]
 800ba98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baa4:	f107 020e 	add.w	r2, r7, #14
 800baa8:	4610      	mov	r0, r2
 800baaa:	4798      	blx	r3
 800baac:	4602      	mov	r2, r0
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b082      	sub	sp, #8
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f002 fda4 	bl	800e614 <USBD_LL_Start>
 800bacc:	4603      	mov	r3, r0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3708      	adds	r7, #8
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bad6:	b480      	push	{r7}
 800bad8:	b083      	sub	sp, #12
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	460b      	mov	r3, r1
 800baf6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800baf8:	2303      	movs	r3, #3
 800bafa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d009      	beq.n	800bb1a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	78fa      	ldrb	r2, [r7, #3]
 800bb10:	4611      	mov	r1, r2
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	4798      	blx	r3
 800bb16:	4603      	mov	r3, r0
 800bb18:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bb1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3710      	adds	r7, #16
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d007      	beq.n	800bb4a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	78fa      	ldrb	r2, [r7, #3]
 800bb44:	4611      	mov	r1, r2
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	4798      	blx	r3
  }

  return USBD_OK;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3708      	adds	r7, #8
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb64:	6839      	ldr	r1, [r7, #0]
 800bb66:	4618      	mov	r0, r3
 800bb68:	f000 ff2c 	bl	800c9c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb88:	f003 031f 	and.w	r3, r3, #31
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d00e      	beq.n	800bbae <USBD_LL_SetupStage+0x5a>
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d302      	bcc.n	800bb9a <USBD_LL_SetupStage+0x46>
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	d014      	beq.n	800bbc2 <USBD_LL_SetupStage+0x6e>
 800bb98:	e01d      	b.n	800bbd6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bba0:	4619      	mov	r1, r3
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 fa18 	bl	800bfd8 <USBD_StdDevReq>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	73fb      	strb	r3, [r7, #15]
      break;
 800bbac:	e020      	b.n	800bbf0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 fa7c 	bl	800c0b4 <USBD_StdItfReq>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	73fb      	strb	r3, [r7, #15]
      break;
 800bbc0:	e016      	b.n	800bbf0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bbc8:	4619      	mov	r1, r3
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 fab8 	bl	800c140 <USBD_StdEPReq>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	73fb      	strb	r3, [r7, #15]
      break;
 800bbd4:	e00c      	b.n	800bbf0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bbdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f002 fd75 	bl	800e6d4 <USBD_LL_StallEP>
 800bbea:	4603      	mov	r3, r0
 800bbec:	73fb      	strb	r3, [r7, #15]
      break;
 800bbee:	bf00      	nop
  }

  return ret;
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b086      	sub	sp, #24
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	60f8      	str	r0, [r7, #12]
 800bc02:	460b      	mov	r3, r1
 800bc04:	607a      	str	r2, [r7, #4]
 800bc06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bc08:	7afb      	ldrb	r3, [r7, #11]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d137      	bne.n	800bc7e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bc14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc1c:	2b03      	cmp	r3, #3
 800bc1e:	d14a      	bne.n	800bcb6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	689a      	ldr	r2, [r3, #8]
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d913      	bls.n	800bc54 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	689a      	ldr	r2, [r3, #8]
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	1ad2      	subs	r2, r2, r3
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	68da      	ldr	r2, [r3, #12]
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	689b      	ldr	r3, [r3, #8]
 800bc42:	4293      	cmp	r3, r2
 800bc44:	bf28      	it	cs
 800bc46:	4613      	movcs	r3, r2
 800bc48:	461a      	mov	r2, r3
 800bc4a:	6879      	ldr	r1, [r7, #4]
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f000 ffad 	bl	800cbac <USBD_CtlContinueRx>
 800bc52:	e030      	b.n	800bcb6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00a      	beq.n	800bc76 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bc66:	2b03      	cmp	r3, #3
 800bc68:	d105      	bne.n	800bc76 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f000 ffa9 	bl	800cbce <USBD_CtlSendStatus>
 800bc7c:	e01b      	b.n	800bcb6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc84:	699b      	ldr	r3, [r3, #24]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d013      	beq.n	800bcb2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bc90:	2b03      	cmp	r3, #3
 800bc92:	d10e      	bne.n	800bcb2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc9a:	699b      	ldr	r3, [r3, #24]
 800bc9c:	7afa      	ldrb	r2, [r7, #11]
 800bc9e:	4611      	mov	r1, r2
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	4798      	blx	r3
 800bca4:	4603      	mov	r3, r0
 800bca6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bca8:	7dfb      	ldrb	r3, [r7, #23]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d003      	beq.n	800bcb6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800bcae:	7dfb      	ldrb	r3, [r7, #23]
 800bcb0:	e002      	b.n	800bcb8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bcb2:	2303      	movs	r3, #3
 800bcb4:	e000      	b.n	800bcb8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3718      	adds	r7, #24
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	460b      	mov	r3, r1
 800bcca:	607a      	str	r2, [r7, #4]
 800bccc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bcce:	7afb      	ldrb	r3, [r7, #11]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d16a      	bne.n	800bdaa <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	3314      	adds	r3, #20
 800bcd8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d155      	bne.n	800bd90 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	689a      	ldr	r2, [r3, #8]
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d914      	bls.n	800bd1a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	689a      	ldr	r2, [r3, #8]
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	1ad2      	subs	r2, r2, r3
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	689b      	ldr	r3, [r3, #8]
 800bd02:	461a      	mov	r2, r3
 800bd04:	6879      	ldr	r1, [r7, #4]
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	f000 ff22 	bl	800cb50 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	2200      	movs	r2, #0
 800bd10:	2100      	movs	r1, #0
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	f002 fd88 	bl	800e828 <USBD_LL_PrepareReceive>
 800bd18:	e03a      	b.n	800bd90 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	68da      	ldr	r2, [r3, #12]
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d11c      	bne.n	800bd60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	685a      	ldr	r2, [r3, #4]
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d316      	bcc.n	800bd60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	685a      	ldr	r2, [r3, #4]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d20f      	bcs.n	800bd60 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bd40:	2200      	movs	r2, #0
 800bd42:	2100      	movs	r1, #0
 800bd44:	68f8      	ldr	r0, [r7, #12]
 800bd46:	f000 ff03 	bl	800cb50 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd52:	2300      	movs	r3, #0
 800bd54:	2200      	movs	r2, #0
 800bd56:	2100      	movs	r1, #0
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f002 fd65 	bl	800e828 <USBD_LL_PrepareReceive>
 800bd5e:	e017      	b.n	800bd90 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00a      	beq.n	800bd82 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bd72:	2b03      	cmp	r3, #3
 800bd74:	d105      	bne.n	800bd82 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd82:	2180      	movs	r1, #128	; 0x80
 800bd84:	68f8      	ldr	r0, [r7, #12]
 800bd86:	f002 fca5 	bl	800e6d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd8a:	68f8      	ldr	r0, [r7, #12]
 800bd8c:	f000 ff32 	bl	800cbf4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d123      	bne.n	800bde2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f7ff fe9b 	bl	800bad6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bda8:	e01b      	b.n	800bde2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdb0:	695b      	ldr	r3, [r3, #20]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d013      	beq.n	800bdde <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bdbc:	2b03      	cmp	r3, #3
 800bdbe:	d10e      	bne.n	800bdde <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdc6:	695b      	ldr	r3, [r3, #20]
 800bdc8:	7afa      	ldrb	r2, [r7, #11]
 800bdca:	4611      	mov	r1, r2
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	4798      	blx	r3
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bdd4:	7dfb      	ldrb	r3, [r7, #23]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d003      	beq.n	800bde2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800bdda:	7dfb      	ldrb	r3, [r7, #23]
 800bddc:	e002      	b.n	800bde4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bdde:	2303      	movs	r3, #3
 800bde0:	e000      	b.n	800bde4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3718      	adds	r7, #24
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2200      	movs	r2, #0
 800be0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d009      	beq.n	800be30 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	6852      	ldr	r2, [r2, #4]
 800be28:	b2d2      	uxtb	r2, r2
 800be2a:	4611      	mov	r1, r2
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be30:	2340      	movs	r3, #64	; 0x40
 800be32:	2200      	movs	r2, #0
 800be34:	2100      	movs	r1, #0
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f002 fc07 	bl	800e64a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2201      	movs	r2, #1
 800be40:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2240      	movs	r2, #64	; 0x40
 800be48:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be4c:	2340      	movs	r3, #64	; 0x40
 800be4e:	2200      	movs	r2, #0
 800be50:	2180      	movs	r1, #128	; 0x80
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f002 fbf9 	bl	800e64a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2201      	movs	r2, #1
 800be5c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2240      	movs	r2, #64	; 0x40
 800be62:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800be64:	2300      	movs	r3, #0
}
 800be66:	4618      	mov	r0, r3
 800be68:	3708      	adds	r7, #8
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800be6e:	b480      	push	{r7}
 800be70:	b083      	sub	sp, #12
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
 800be76:	460b      	mov	r3, r1
 800be78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	78fa      	ldrb	r2, [r7, #3]
 800be7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	370c      	adds	r7, #12
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr

0800be8e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800be8e:	b480      	push	{r7}
 800be90:	b083      	sub	sp, #12
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2204      	movs	r2, #4
 800bea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800beaa:	2300      	movs	r3, #0
}
 800beac:	4618      	mov	r0, r3
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bec6:	2b04      	cmp	r3, #4
 800bec8:	d105      	bne.n	800bed6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bed6:	2300      	movs	r3, #0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	370c      	adds	r7, #12
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bef2:	2b03      	cmp	r3, #3
 800bef4:	d10b      	bne.n	800bf0e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800befc:	69db      	ldr	r3, [r3, #28]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d005      	beq.n	800bf0e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf08:	69db      	ldr	r3, [r3, #28]
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf0e:	2300      	movs	r3, #0
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	460b      	mov	r3, r1
 800bf22:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	370c      	adds	r7, #12
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr

0800bf32 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bf32:	b480      	push	{r7}
 800bf34:	b083      	sub	sp, #12
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf54:	2300      	movs	r3, #0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	370c      	adds	r7, #12
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr

0800bf62 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b082      	sub	sp, #8
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d009      	beq.n	800bf90 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	6852      	ldr	r2, [r2, #4]
 800bf88:	b2d2      	uxtb	r2, r2
 800bf8a:	4611      	mov	r1, r2
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	4798      	blx	r3
  }

  return USBD_OK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3708      	adds	r7, #8
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bf9a:	b480      	push	{r7}
 800bf9c:	b087      	sub	sp, #28
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bfb8:	8a3b      	ldrh	r3, [r7, #16]
 800bfba:	021b      	lsls	r3, r3, #8
 800bfbc:	b21a      	sxth	r2, r3
 800bfbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	b21b      	sxth	r3, r3
 800bfc6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bfc8:	89fb      	ldrh	r3, [r7, #14]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	371c      	adds	r7, #28
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr
	...

0800bfd8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfee:	2b20      	cmp	r3, #32
 800bff0:	d004      	beq.n	800bffc <USBD_StdDevReq+0x24>
 800bff2:	2b40      	cmp	r3, #64	; 0x40
 800bff4:	d002      	beq.n	800bffc <USBD_StdDevReq+0x24>
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d00a      	beq.n	800c010 <USBD_StdDevReq+0x38>
 800bffa:	e050      	b.n	800c09e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	6839      	ldr	r1, [r7, #0]
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	4798      	blx	r3
 800c00a:	4603      	mov	r3, r0
 800c00c:	73fb      	strb	r3, [r7, #15]
    break;
 800c00e:	e04b      	b.n	800c0a8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	785b      	ldrb	r3, [r3, #1]
 800c014:	2b09      	cmp	r3, #9
 800c016:	d83c      	bhi.n	800c092 <USBD_StdDevReq+0xba>
 800c018:	a201      	add	r2, pc, #4	; (adr r2, 800c020 <USBD_StdDevReq+0x48>)
 800c01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c01e:	bf00      	nop
 800c020:	0800c075 	.word	0x0800c075
 800c024:	0800c089 	.word	0x0800c089
 800c028:	0800c093 	.word	0x0800c093
 800c02c:	0800c07f 	.word	0x0800c07f
 800c030:	0800c093 	.word	0x0800c093
 800c034:	0800c053 	.word	0x0800c053
 800c038:	0800c049 	.word	0x0800c049
 800c03c:	0800c093 	.word	0x0800c093
 800c040:	0800c06b 	.word	0x0800c06b
 800c044:	0800c05d 	.word	0x0800c05d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c048:	6839      	ldr	r1, [r7, #0]
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f9ce 	bl	800c3ec <USBD_GetDescriptor>
      break;
 800c050:	e024      	b.n	800c09c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c052:	6839      	ldr	r1, [r7, #0]
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 fb33 	bl	800c6c0 <USBD_SetAddress>
      break;
 800c05a:	e01f      	b.n	800c09c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c05c:	6839      	ldr	r1, [r7, #0]
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 fb70 	bl	800c744 <USBD_SetConfig>
 800c064:	4603      	mov	r3, r0
 800c066:	73fb      	strb	r3, [r7, #15]
      break;
 800c068:	e018      	b.n	800c09c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c06a:	6839      	ldr	r1, [r7, #0]
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 fc0d 	bl	800c88c <USBD_GetConfig>
      break;
 800c072:	e013      	b.n	800c09c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c074:	6839      	ldr	r1, [r7, #0]
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 fc3c 	bl	800c8f4 <USBD_GetStatus>
      break;
 800c07c:	e00e      	b.n	800c09c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c07e:	6839      	ldr	r1, [r7, #0]
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 fc6a 	bl	800c95a <USBD_SetFeature>
      break;
 800c086:	e009      	b.n	800c09c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c088:	6839      	ldr	r1, [r7, #0]
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 fc79 	bl	800c982 <USBD_ClrFeature>
      break;
 800c090:	e004      	b.n	800c09c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c092:	6839      	ldr	r1, [r7, #0]
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fccf 	bl	800ca38 <USBD_CtlError>
      break;
 800c09a:	bf00      	nop
    }
    break;
 800c09c:	e004      	b.n	800c0a8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c09e:	6839      	ldr	r1, [r7, #0]
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 fcc9 	bl	800ca38 <USBD_CtlError>
    break;
 800c0a6:	bf00      	nop
  }

  return ret;
 800c0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop

0800c0b4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0ca:	2b20      	cmp	r3, #32
 800c0cc:	d003      	beq.n	800c0d6 <USBD_StdItfReq+0x22>
 800c0ce:	2b40      	cmp	r3, #64	; 0x40
 800c0d0:	d001      	beq.n	800c0d6 <USBD_StdItfReq+0x22>
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d12a      	bne.n	800c12c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	2b02      	cmp	r3, #2
 800c0e0:	d81d      	bhi.n	800c11e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	889b      	ldrh	r3, [r3, #4]
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	2b03      	cmp	r3, #3
 800c0ea:	d813      	bhi.n	800c114 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	6839      	ldr	r1, [r7, #0]
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	4798      	blx	r3
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	88db      	ldrh	r3, [r3, #6]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d110      	bne.n	800c128 <USBD_StdItfReq+0x74>
 800c106:	7bfb      	ldrb	r3, [r7, #15]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10d      	bne.n	800c128 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 fd5e 	bl	800cbce <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c112:	e009      	b.n	800c128 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c114:	6839      	ldr	r1, [r7, #0]
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 fc8e 	bl	800ca38 <USBD_CtlError>
      break;
 800c11c:	e004      	b.n	800c128 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fc89 	bl	800ca38 <USBD_CtlError>
      break;
 800c126:	e000      	b.n	800c12a <USBD_StdItfReq+0x76>
      break;
 800c128:	bf00      	nop
    }
    break;
 800c12a:	e004      	b.n	800c136 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c12c:	6839      	ldr	r1, [r7, #0]
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 fc82 	bl	800ca38 <USBD_CtlError>
    break;
 800c134:	bf00      	nop
  }

  return ret;
 800c136:	7bfb      	ldrb	r3, [r7, #15]
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c14a:	2300      	movs	r3, #0
 800c14c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	889b      	ldrh	r3, [r3, #4]
 800c152:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c15c:	2b20      	cmp	r3, #32
 800c15e:	d004      	beq.n	800c16a <USBD_StdEPReq+0x2a>
 800c160:	2b40      	cmp	r3, #64	; 0x40
 800c162:	d002      	beq.n	800c16a <USBD_StdEPReq+0x2a>
 800c164:	2b00      	cmp	r3, #0
 800c166:	d00a      	beq.n	800c17e <USBD_StdEPReq+0x3e>
 800c168:	e135      	b.n	800c3d6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	6839      	ldr	r1, [r7, #0]
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	4798      	blx	r3
 800c178:	4603      	mov	r3, r0
 800c17a:	73fb      	strb	r3, [r7, #15]
    break;
 800c17c:	e130      	b.n	800c3e0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	785b      	ldrb	r3, [r3, #1]
 800c182:	2b01      	cmp	r3, #1
 800c184:	d03e      	beq.n	800c204 <USBD_StdEPReq+0xc4>
 800c186:	2b03      	cmp	r3, #3
 800c188:	d002      	beq.n	800c190 <USBD_StdEPReq+0x50>
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d077      	beq.n	800c27e <USBD_StdEPReq+0x13e>
 800c18e:	e11c      	b.n	800c3ca <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c196:	2b02      	cmp	r3, #2
 800c198:	d002      	beq.n	800c1a0 <USBD_StdEPReq+0x60>
 800c19a:	2b03      	cmp	r3, #3
 800c19c:	d015      	beq.n	800c1ca <USBD_StdEPReq+0x8a>
 800c19e:	e02b      	b.n	800c1f8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1a0:	7bbb      	ldrb	r3, [r7, #14]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00c      	beq.n	800c1c0 <USBD_StdEPReq+0x80>
 800c1a6:	7bbb      	ldrb	r3, [r7, #14]
 800c1a8:	2b80      	cmp	r3, #128	; 0x80
 800c1aa:	d009      	beq.n	800c1c0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1ac:	7bbb      	ldrb	r3, [r7, #14]
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f002 fa8f 	bl	800e6d4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1b6:	2180      	movs	r1, #128	; 0x80
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f002 fa8b 	bl	800e6d4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c1be:	e020      	b.n	800c202 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c1c0:	6839      	ldr	r1, [r7, #0]
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fc38 	bl	800ca38 <USBD_CtlError>
        break;
 800c1c8:	e01b      	b.n	800c202 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	885b      	ldrh	r3, [r3, #2]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d10e      	bne.n	800c1f0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c1d2:	7bbb      	ldrb	r3, [r7, #14]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d00b      	beq.n	800c1f0 <USBD_StdEPReq+0xb0>
 800c1d8:	7bbb      	ldrb	r3, [r7, #14]
 800c1da:	2b80      	cmp	r3, #128	; 0x80
 800c1dc:	d008      	beq.n	800c1f0 <USBD_StdEPReq+0xb0>
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	88db      	ldrh	r3, [r3, #6]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d104      	bne.n	800c1f0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1e6:	7bbb      	ldrb	r3, [r7, #14]
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f002 fa72 	bl	800e6d4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 fcec 	bl	800cbce <USBD_CtlSendStatus>

        break;
 800c1f6:	e004      	b.n	800c202 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c1f8:	6839      	ldr	r1, [r7, #0]
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 fc1c 	bl	800ca38 <USBD_CtlError>
        break;
 800c200:	bf00      	nop
      }
      break;
 800c202:	e0e7      	b.n	800c3d4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	d002      	beq.n	800c214 <USBD_StdEPReq+0xd4>
 800c20e:	2b03      	cmp	r3, #3
 800c210:	d015      	beq.n	800c23e <USBD_StdEPReq+0xfe>
 800c212:	e02d      	b.n	800c270 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c214:	7bbb      	ldrb	r3, [r7, #14]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d00c      	beq.n	800c234 <USBD_StdEPReq+0xf4>
 800c21a:	7bbb      	ldrb	r3, [r7, #14]
 800c21c:	2b80      	cmp	r3, #128	; 0x80
 800c21e:	d009      	beq.n	800c234 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c220:	7bbb      	ldrb	r3, [r7, #14]
 800c222:	4619      	mov	r1, r3
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f002 fa55 	bl	800e6d4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c22a:	2180      	movs	r1, #128	; 0x80
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f002 fa51 	bl	800e6d4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c232:	e023      	b.n	800c27c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c234:	6839      	ldr	r1, [r7, #0]
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 fbfe 	bl	800ca38 <USBD_CtlError>
        break;
 800c23c:	e01e      	b.n	800c27c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	885b      	ldrh	r3, [r3, #2]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d119      	bne.n	800c27a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c246:	7bbb      	ldrb	r3, [r7, #14]
 800c248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d004      	beq.n	800c25a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c250:	7bbb      	ldrb	r3, [r7, #14]
 800c252:	4619      	mov	r1, r3
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f002 fa5c 	bl	800e712 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 fcb7 	bl	800cbce <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	6839      	ldr	r1, [r7, #0]
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	4798      	blx	r3
        }
        break;
 800c26e:	e004      	b.n	800c27a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c270:	6839      	ldr	r1, [r7, #0]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 fbe0 	bl	800ca38 <USBD_CtlError>
        break;
 800c278:	e000      	b.n	800c27c <USBD_StdEPReq+0x13c>
        break;
 800c27a:	bf00      	nop
      }
      break;
 800c27c:	e0aa      	b.n	800c3d4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c284:	2b02      	cmp	r3, #2
 800c286:	d002      	beq.n	800c28e <USBD_StdEPReq+0x14e>
 800c288:	2b03      	cmp	r3, #3
 800c28a:	d032      	beq.n	800c2f2 <USBD_StdEPReq+0x1b2>
 800c28c:	e097      	b.n	800c3be <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c28e:	7bbb      	ldrb	r3, [r7, #14]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d007      	beq.n	800c2a4 <USBD_StdEPReq+0x164>
 800c294:	7bbb      	ldrb	r3, [r7, #14]
 800c296:	2b80      	cmp	r3, #128	; 0x80
 800c298:	d004      	beq.n	800c2a4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c29a:	6839      	ldr	r1, [r7, #0]
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 fbcb 	bl	800ca38 <USBD_CtlError>
          break;
 800c2a2:	e091      	b.n	800c3c8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	da0b      	bge.n	800c2c4 <USBD_StdEPReq+0x184>
 800c2ac:	7bbb      	ldrb	r3, [r7, #14]
 800c2ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	4413      	add	r3, r2
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	3310      	adds	r3, #16
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	4413      	add	r3, r2
 800c2c0:	3304      	adds	r3, #4
 800c2c2:	e00b      	b.n	800c2dc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c2c4:	7bbb      	ldrb	r3, [r7, #14]
 800c2c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4413      	add	r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	4413      	add	r3, r2
 800c2da:	3304      	adds	r3, #4
 800c2dc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	2202      	movs	r2, #2
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 fc15 	bl	800cb1a <USBD_CtlSendData>
        break;
 800c2f0:	e06a      	b.n	800c3c8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c2f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	da11      	bge.n	800c31e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c2fa:	7bbb      	ldrb	r3, [r7, #14]
 800c2fc:	f003 020f 	and.w	r2, r3, #15
 800c300:	6879      	ldr	r1, [r7, #4]
 800c302:	4613      	mov	r3, r2
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	4413      	add	r3, r2
 800c308:	009b      	lsls	r3, r3, #2
 800c30a:	440b      	add	r3, r1
 800c30c:	3324      	adds	r3, #36	; 0x24
 800c30e:	881b      	ldrh	r3, [r3, #0]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d117      	bne.n	800c344 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c314:	6839      	ldr	r1, [r7, #0]
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 fb8e 	bl	800ca38 <USBD_CtlError>
            break;
 800c31c:	e054      	b.n	800c3c8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c31e:	7bbb      	ldrb	r3, [r7, #14]
 800c320:	f003 020f 	and.w	r2, r3, #15
 800c324:	6879      	ldr	r1, [r7, #4]
 800c326:	4613      	mov	r3, r2
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	4413      	add	r3, r2
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	440b      	add	r3, r1
 800c330:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c334:	881b      	ldrh	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d104      	bne.n	800c344 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c33a:	6839      	ldr	r1, [r7, #0]
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 fb7b 	bl	800ca38 <USBD_CtlError>
            break;
 800c342:	e041      	b.n	800c3c8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c344:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	da0b      	bge.n	800c364 <USBD_StdEPReq+0x224>
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
 800c34e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c352:	4613      	mov	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4413      	add	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	3310      	adds	r3, #16
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	4413      	add	r3, r2
 800c360:	3304      	adds	r3, #4
 800c362:	e00b      	b.n	800c37c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c364:	7bbb      	ldrb	r3, [r7, #14]
 800c366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c36a:	4613      	mov	r3, r2
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	4413      	add	r3, r2
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	4413      	add	r3, r2
 800c37a:	3304      	adds	r3, #4
 800c37c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c37e:	7bbb      	ldrb	r3, [r7, #14]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d002      	beq.n	800c38a <USBD_StdEPReq+0x24a>
 800c384:	7bbb      	ldrb	r3, [r7, #14]
 800c386:	2b80      	cmp	r3, #128	; 0x80
 800c388:	d103      	bne.n	800c392 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	2200      	movs	r2, #0
 800c38e:	601a      	str	r2, [r3, #0]
 800c390:	e00e      	b.n	800c3b0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c392:	7bbb      	ldrb	r3, [r7, #14]
 800c394:	4619      	mov	r1, r3
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f002 f9da 	bl	800e750 <USBD_LL_IsStallEP>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d003      	beq.n	800c3aa <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	601a      	str	r2, [r3, #0]
 800c3a8:	e002      	b.n	800c3b0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 fbaf 	bl	800cb1a <USBD_CtlSendData>
          break;
 800c3bc:	e004      	b.n	800c3c8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c3be:	6839      	ldr	r1, [r7, #0]
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 fb39 	bl	800ca38 <USBD_CtlError>
        break;
 800c3c6:	bf00      	nop
      }
      break;
 800c3c8:	e004      	b.n	800c3d4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c3ca:	6839      	ldr	r1, [r7, #0]
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 fb33 	bl	800ca38 <USBD_CtlError>
      break;
 800c3d2:	bf00      	nop
    }
    break;
 800c3d4:	e004      	b.n	800c3e0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c3d6:	6839      	ldr	r1, [r7, #0]
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 fb2d 	bl	800ca38 <USBD_CtlError>
    break;
 800c3de:	bf00      	nop
  }

  return ret;
 800c3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
	...

0800c3ec <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c3fe:	2300      	movs	r3, #0
 800c400:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	885b      	ldrh	r3, [r3, #2]
 800c406:	0a1b      	lsrs	r3, r3, #8
 800c408:	b29b      	uxth	r3, r3
 800c40a:	3b01      	subs	r3, #1
 800c40c:	2b06      	cmp	r3, #6
 800c40e:	f200 8128 	bhi.w	800c662 <USBD_GetDescriptor+0x276>
 800c412:	a201      	add	r2, pc, #4	; (adr r2, 800c418 <USBD_GetDescriptor+0x2c>)
 800c414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c418:	0800c435 	.word	0x0800c435
 800c41c:	0800c44d 	.word	0x0800c44d
 800c420:	0800c48d 	.word	0x0800c48d
 800c424:	0800c663 	.word	0x0800c663
 800c428:	0800c663 	.word	0x0800c663
 800c42c:	0800c603 	.word	0x0800c603
 800c430:	0800c62f 	.word	0x0800c62f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	7c12      	ldrb	r2, [r2, #16]
 800c440:	f107 0108 	add.w	r1, r7, #8
 800c444:	4610      	mov	r0, r2
 800c446:	4798      	blx	r3
 800c448:	60f8      	str	r0, [r7, #12]
    break;
 800c44a:	e112      	b.n	800c672 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	7c1b      	ldrb	r3, [r3, #16]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d10d      	bne.n	800c470 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c45c:	f107 0208 	add.w	r2, r7, #8
 800c460:	4610      	mov	r0, r2
 800c462:	4798      	blx	r3
 800c464:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	3301      	adds	r3, #1
 800c46a:	2202      	movs	r2, #2
 800c46c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c46e:	e100      	b.n	800c672 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c478:	f107 0208 	add.w	r2, r7, #8
 800c47c:	4610      	mov	r0, r2
 800c47e:	4798      	blx	r3
 800c480:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	3301      	adds	r3, #1
 800c486:	2202      	movs	r2, #2
 800c488:	701a      	strb	r2, [r3, #0]
    break;
 800c48a:	e0f2      	b.n	800c672 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	885b      	ldrh	r3, [r3, #2]
 800c490:	b2db      	uxtb	r3, r3
 800c492:	2b05      	cmp	r3, #5
 800c494:	f200 80ac 	bhi.w	800c5f0 <USBD_GetDescriptor+0x204>
 800c498:	a201      	add	r2, pc, #4	; (adr r2, 800c4a0 <USBD_GetDescriptor+0xb4>)
 800c49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c49e:	bf00      	nop
 800c4a0:	0800c4b9 	.word	0x0800c4b9
 800c4a4:	0800c4ed 	.word	0x0800c4ed
 800c4a8:	0800c521 	.word	0x0800c521
 800c4ac:	0800c555 	.word	0x0800c555
 800c4b0:	0800c589 	.word	0x0800c589
 800c4b4:	0800c5bd 	.word	0x0800c5bd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d00b      	beq.n	800c4dc <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	7c12      	ldrb	r2, [r2, #16]
 800c4d0:	f107 0108 	add.w	r1, r7, #8
 800c4d4:	4610      	mov	r0, r2
 800c4d6:	4798      	blx	r3
 800c4d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4da:	e091      	b.n	800c600 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c4dc:	6839      	ldr	r1, [r7, #0]
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 faaa 	bl	800ca38 <USBD_CtlError>
        err++;
 800c4e4:	7afb      	ldrb	r3, [r7, #11]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	72fb      	strb	r3, [r7, #11]
      break;
 800c4ea:	e089      	b.n	800c600 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00b      	beq.n	800c510 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	7c12      	ldrb	r2, [r2, #16]
 800c504:	f107 0108 	add.w	r1, r7, #8
 800c508:	4610      	mov	r0, r2
 800c50a:	4798      	blx	r3
 800c50c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c50e:	e077      	b.n	800c600 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c510:	6839      	ldr	r1, [r7, #0]
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 fa90 	bl	800ca38 <USBD_CtlError>
        err++;
 800c518:	7afb      	ldrb	r3, [r7, #11]
 800c51a:	3301      	adds	r3, #1
 800c51c:	72fb      	strb	r3, [r7, #11]
      break;
 800c51e:	e06f      	b.n	800c600 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d00b      	beq.n	800c544 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	7c12      	ldrb	r2, [r2, #16]
 800c538:	f107 0108 	add.w	r1, r7, #8
 800c53c:	4610      	mov	r0, r2
 800c53e:	4798      	blx	r3
 800c540:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c542:	e05d      	b.n	800c600 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c544:	6839      	ldr	r1, [r7, #0]
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 fa76 	bl	800ca38 <USBD_CtlError>
        err++;
 800c54c:	7afb      	ldrb	r3, [r7, #11]
 800c54e:	3301      	adds	r3, #1
 800c550:	72fb      	strb	r3, [r7, #11]
      break;
 800c552:	e055      	b.n	800c600 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c55a:	691b      	ldr	r3, [r3, #16]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00b      	beq.n	800c578 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	7c12      	ldrb	r2, [r2, #16]
 800c56c:	f107 0108 	add.w	r1, r7, #8
 800c570:	4610      	mov	r0, r2
 800c572:	4798      	blx	r3
 800c574:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c576:	e043      	b.n	800c600 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c578:	6839      	ldr	r1, [r7, #0]
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fa5c 	bl	800ca38 <USBD_CtlError>
        err++;
 800c580:	7afb      	ldrb	r3, [r7, #11]
 800c582:	3301      	adds	r3, #1
 800c584:	72fb      	strb	r3, [r7, #11]
      break;
 800c586:	e03b      	b.n	800c600 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c58e:	695b      	ldr	r3, [r3, #20]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d00b      	beq.n	800c5ac <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c59a:	695b      	ldr	r3, [r3, #20]
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	7c12      	ldrb	r2, [r2, #16]
 800c5a0:	f107 0108 	add.w	r1, r7, #8
 800c5a4:	4610      	mov	r0, r2
 800c5a6:	4798      	blx	r3
 800c5a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5aa:	e029      	b.n	800c600 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c5ac:	6839      	ldr	r1, [r7, #0]
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 fa42 	bl	800ca38 <USBD_CtlError>
        err++;
 800c5b4:	7afb      	ldrb	r3, [r7, #11]
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	72fb      	strb	r3, [r7, #11]
      break;
 800c5ba:	e021      	b.n	800c600 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5c2:	699b      	ldr	r3, [r3, #24]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d00b      	beq.n	800c5e0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5ce:	699b      	ldr	r3, [r3, #24]
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	7c12      	ldrb	r2, [r2, #16]
 800c5d4:	f107 0108 	add.w	r1, r7, #8
 800c5d8:	4610      	mov	r0, r2
 800c5da:	4798      	blx	r3
 800c5dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5de:	e00f      	b.n	800c600 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 fa28 	bl	800ca38 <USBD_CtlError>
        err++;
 800c5e8:	7afb      	ldrb	r3, [r7, #11]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	72fb      	strb	r3, [r7, #11]
      break;
 800c5ee:	e007      	b.n	800c600 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c5f0:	6839      	ldr	r1, [r7, #0]
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 fa20 	bl	800ca38 <USBD_CtlError>
      err++;
 800c5f8:	7afb      	ldrb	r3, [r7, #11]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c5fe:	bf00      	nop
    }
    break;
 800c600:	e037      	b.n	800c672 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	7c1b      	ldrb	r3, [r3, #16]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d109      	bne.n	800c61e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c612:	f107 0208 	add.w	r2, r7, #8
 800c616:	4610      	mov	r0, r2
 800c618:	4798      	blx	r3
 800c61a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c61c:	e029      	b.n	800c672 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c61e:	6839      	ldr	r1, [r7, #0]
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 fa09 	bl	800ca38 <USBD_CtlError>
      err++;
 800c626:	7afb      	ldrb	r3, [r7, #11]
 800c628:	3301      	adds	r3, #1
 800c62a:	72fb      	strb	r3, [r7, #11]
    break;
 800c62c:	e021      	b.n	800c672 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	7c1b      	ldrb	r3, [r3, #16]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d10d      	bne.n	800c652 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c63e:	f107 0208 	add.w	r2, r7, #8
 800c642:	4610      	mov	r0, r2
 800c644:	4798      	blx	r3
 800c646:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	3301      	adds	r3, #1
 800c64c:	2207      	movs	r2, #7
 800c64e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c650:	e00f      	b.n	800c672 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c652:	6839      	ldr	r1, [r7, #0]
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 f9ef 	bl	800ca38 <USBD_CtlError>
      err++;
 800c65a:	7afb      	ldrb	r3, [r7, #11]
 800c65c:	3301      	adds	r3, #1
 800c65e:	72fb      	strb	r3, [r7, #11]
    break;
 800c660:	e007      	b.n	800c672 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800c662:	6839      	ldr	r1, [r7, #0]
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 f9e7 	bl	800ca38 <USBD_CtlError>
    err++;
 800c66a:	7afb      	ldrb	r3, [r7, #11]
 800c66c:	3301      	adds	r3, #1
 800c66e:	72fb      	strb	r3, [r7, #11]
    break;
 800c670:	bf00      	nop
  }

  if (err != 0U)
 800c672:	7afb      	ldrb	r3, [r7, #11]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d11e      	bne.n	800c6b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	88db      	ldrh	r3, [r3, #6]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d016      	beq.n	800c6ae <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800c680:	893b      	ldrh	r3, [r7, #8]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d00e      	beq.n	800c6a4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	88da      	ldrh	r2, [r3, #6]
 800c68a:	893b      	ldrh	r3, [r7, #8]
 800c68c:	4293      	cmp	r3, r2
 800c68e:	bf28      	it	cs
 800c690:	4613      	movcs	r3, r2
 800c692:	b29b      	uxth	r3, r3
 800c694:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c696:	893b      	ldrh	r3, [r7, #8]
 800c698:	461a      	mov	r2, r3
 800c69a:	68f9      	ldr	r1, [r7, #12]
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 fa3c 	bl	800cb1a <USBD_CtlSendData>
 800c6a2:	e009      	b.n	800c6b8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c6a4:	6839      	ldr	r1, [r7, #0]
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 f9c6 	bl	800ca38 <USBD_CtlError>
 800c6ac:	e004      	b.n	800c6b8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 fa8d 	bl	800cbce <USBD_CtlSendStatus>
 800c6b4:	e000      	b.n	800c6b8 <USBD_GetDescriptor+0x2cc>
    return;
 800c6b6:	bf00      	nop
    }
  }
}
 800c6b8:	3710      	adds	r7, #16
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop

0800c6c0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	889b      	ldrh	r3, [r3, #4]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d130      	bne.n	800c734 <USBD_SetAddress+0x74>
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	88db      	ldrh	r3, [r3, #6]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d12c      	bne.n	800c734 <USBD_SetAddress+0x74>
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	885b      	ldrh	r3, [r3, #2]
 800c6de:	2b7f      	cmp	r3, #127	; 0x7f
 800c6e0:	d828      	bhi.n	800c734 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	885b      	ldrh	r3, [r3, #2]
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6f4:	2b03      	cmp	r3, #3
 800c6f6:	d104      	bne.n	800c702 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c6f8:	6839      	ldr	r1, [r7, #0]
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 f99c 	bl	800ca38 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c700:	e01c      	b.n	800c73c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	7bfa      	ldrb	r2, [r7, #15]
 800c706:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c70a:	7bfb      	ldrb	r3, [r7, #15]
 800c70c:	4619      	mov	r1, r3
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f002 f84a 	bl	800e7a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 fa5a 	bl	800cbce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c71a:	7bfb      	ldrb	r3, [r7, #15]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d004      	beq.n	800c72a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2202      	movs	r2, #2
 800c724:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c728:	e008      	b.n	800c73c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2201      	movs	r2, #1
 800c72e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c732:	e003      	b.n	800c73c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c734:	6839      	ldr	r1, [r7, #0]
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 f97e 	bl	800ca38 <USBD_CtlError>
  }
}
 800c73c:	bf00      	nop
 800c73e:	3710      	adds	r7, #16
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c74e:	2300      	movs	r3, #0
 800c750:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	885b      	ldrh	r3, [r3, #2]
 800c756:	b2da      	uxtb	r2, r3
 800c758:	4b4b      	ldr	r3, [pc, #300]	; (800c888 <USBD_SetConfig+0x144>)
 800c75a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c75c:	4b4a      	ldr	r3, [pc, #296]	; (800c888 <USBD_SetConfig+0x144>)
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	2b01      	cmp	r3, #1
 800c762:	d905      	bls.n	800c770 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c764:	6839      	ldr	r1, [r7, #0]
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 f966 	bl	800ca38 <USBD_CtlError>
    return USBD_FAIL;
 800c76c:	2303      	movs	r3, #3
 800c76e:	e087      	b.n	800c880 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c776:	2b02      	cmp	r3, #2
 800c778:	d002      	beq.n	800c780 <USBD_SetConfig+0x3c>
 800c77a:	2b03      	cmp	r3, #3
 800c77c:	d025      	beq.n	800c7ca <USBD_SetConfig+0x86>
 800c77e:	e071      	b.n	800c864 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c780:	4b41      	ldr	r3, [pc, #260]	; (800c888 <USBD_SetConfig+0x144>)
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d01c      	beq.n	800c7c2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c788:	4b3f      	ldr	r3, [pc, #252]	; (800c888 <USBD_SetConfig+0x144>)
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	461a      	mov	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c792:	4b3d      	ldr	r3, [pc, #244]	; (800c888 <USBD_SetConfig+0x144>)
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	4619      	mov	r1, r3
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f7ff f9a7 	bl	800baec <USBD_SetClassConfig>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c7a2:	7bfb      	ldrb	r3, [r7, #15]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d004      	beq.n	800c7b2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c7a8:	6839      	ldr	r1, [r7, #0]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f944 	bl	800ca38 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c7b0:	e065      	b.n	800c87e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 fa0b 	bl	800cbce <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2203      	movs	r2, #3
 800c7bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c7c0:	e05d      	b.n	800c87e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 fa03 	bl	800cbce <USBD_CtlSendStatus>
    break;
 800c7c8:	e059      	b.n	800c87e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c7ca:	4b2f      	ldr	r3, [pc, #188]	; (800c888 <USBD_SetConfig+0x144>)
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d112      	bne.n	800c7f8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2202      	movs	r2, #2
 800c7d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c7da:	4b2b      	ldr	r3, [pc, #172]	; (800c888 <USBD_SetConfig+0x144>)
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	461a      	mov	r2, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7e4:	4b28      	ldr	r3, [pc, #160]	; (800c888 <USBD_SetConfig+0x144>)
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f7ff f99a 	bl	800bb24 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 f9ec 	bl	800cbce <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c7f6:	e042      	b.n	800c87e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c7f8:	4b23      	ldr	r3, [pc, #140]	; (800c888 <USBD_SetConfig+0x144>)
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	429a      	cmp	r2, r3
 800c804:	d02a      	beq.n	800c85c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	b2db      	uxtb	r3, r3
 800c80c:	4619      	mov	r1, r3
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f7ff f988 	bl	800bb24 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c814:	4b1c      	ldr	r3, [pc, #112]	; (800c888 <USBD_SetConfig+0x144>)
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	461a      	mov	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c81e:	4b1a      	ldr	r3, [pc, #104]	; (800c888 <USBD_SetConfig+0x144>)
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	4619      	mov	r1, r3
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f7ff f961 	bl	800baec <USBD_SetClassConfig>
 800c82a:	4603      	mov	r3, r0
 800c82c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c82e:	7bfb      	ldrb	r3, [r7, #15]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00f      	beq.n	800c854 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c834:	6839      	ldr	r1, [r7, #0]
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 f8fe 	bl	800ca38 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	b2db      	uxtb	r3, r3
 800c842:	4619      	mov	r1, r3
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f7ff f96d 	bl	800bb24 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2202      	movs	r2, #2
 800c84e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c852:	e014      	b.n	800c87e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f9ba 	bl	800cbce <USBD_CtlSendStatus>
    break;
 800c85a:	e010      	b.n	800c87e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 f9b6 	bl	800cbce <USBD_CtlSendStatus>
    break;
 800c862:	e00c      	b.n	800c87e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c864:	6839      	ldr	r1, [r7, #0]
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 f8e6 	bl	800ca38 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c86c:	4b06      	ldr	r3, [pc, #24]	; (800c888 <USBD_SetConfig+0x144>)
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	4619      	mov	r1, r3
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f7ff f956 	bl	800bb24 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c878:	2303      	movs	r3, #3
 800c87a:	73fb      	strb	r3, [r7, #15]
    break;
 800c87c:	bf00      	nop
  }

  return ret;
 800c87e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c880:	4618      	mov	r0, r3
 800c882:	3710      	adds	r7, #16
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}
 800c888:	20000218 	.word	0x20000218

0800c88c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	88db      	ldrh	r3, [r3, #6]
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	d004      	beq.n	800c8a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c89e:	6839      	ldr	r1, [r7, #0]
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 f8c9 	bl	800ca38 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c8a6:	e021      	b.n	800c8ec <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	db17      	blt.n	800c8e2 <USBD_GetConfig+0x56>
 800c8b2:	2b02      	cmp	r3, #2
 800c8b4:	dd02      	ble.n	800c8bc <USBD_GetConfig+0x30>
 800c8b6:	2b03      	cmp	r3, #3
 800c8b8:	d00b      	beq.n	800c8d2 <USBD_GetConfig+0x46>
 800c8ba:	e012      	b.n	800c8e2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	3308      	adds	r3, #8
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 f925 	bl	800cb1a <USBD_CtlSendData>
      break;
 800c8d0:	e00c      	b.n	800c8ec <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	3304      	adds	r3, #4
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	4619      	mov	r1, r3
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 f91d 	bl	800cb1a <USBD_CtlSendData>
      break;
 800c8e0:	e004      	b.n	800c8ec <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800c8e2:	6839      	ldr	r1, [r7, #0]
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 f8a7 	bl	800ca38 <USBD_CtlError>
      break;
 800c8ea:	bf00      	nop
}
 800c8ec:	bf00      	nop
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c904:	3b01      	subs	r3, #1
 800c906:	2b02      	cmp	r3, #2
 800c908:	d81e      	bhi.n	800c948 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	88db      	ldrh	r3, [r3, #6]
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d004      	beq.n	800c91c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c912:	6839      	ldr	r1, [r7, #0]
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 f88f 	bl	800ca38 <USBD_CtlError>
      break;
 800c91a:	e01a      	b.n	800c952 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2201      	movs	r2, #1
 800c920:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d005      	beq.n	800c938 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	68db      	ldr	r3, [r3, #12]
 800c930:	f043 0202 	orr.w	r2, r3, #2
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	330c      	adds	r3, #12
 800c93c:	2202      	movs	r2, #2
 800c93e:	4619      	mov	r1, r3
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 f8ea 	bl	800cb1a <USBD_CtlSendData>
    break;
 800c946:	e004      	b.n	800c952 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c948:	6839      	ldr	r1, [r7, #0]
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 f874 	bl	800ca38 <USBD_CtlError>
    break;
 800c950:	bf00      	nop
  }
}
 800c952:	bf00      	nop
 800c954:	3708      	adds	r7, #8
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b082      	sub	sp, #8
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
 800c962:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	885b      	ldrh	r3, [r3, #2]
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d106      	bne.n	800c97a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2201      	movs	r2, #1
 800c970:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 f92a 	bl	800cbce <USBD_CtlSendStatus>
  }
}
 800c97a:	bf00      	nop
 800c97c:	3708      	adds	r7, #8
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}

0800c982 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c982:	b580      	push	{r7, lr}
 800c984:	b082      	sub	sp, #8
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c992:	3b01      	subs	r3, #1
 800c994:	2b02      	cmp	r3, #2
 800c996:	d80b      	bhi.n	800c9b0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	885b      	ldrh	r3, [r3, #2]
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d10c      	bne.n	800c9ba <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 f910 	bl	800cbce <USBD_CtlSendStatus>
      }
      break;
 800c9ae:	e004      	b.n	800c9ba <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c9b0:	6839      	ldr	r1, [r7, #0]
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 f840 	bl	800ca38 <USBD_CtlError>
      break;
 800c9b8:	e000      	b.n	800c9bc <USBD_ClrFeature+0x3a>
      break;
 800c9ba:	bf00      	nop
  }
}
 800c9bc:	bf00      	nop
 800c9be:	3708      	adds	r7, #8
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	781a      	ldrb	r2, [r3, #0]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	781a      	ldrb	r2, [r3, #0]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c9ee:	68f8      	ldr	r0, [r7, #12]
 800c9f0:	f7ff fad3 	bl	800bf9a <SWAPBYTE>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	3301      	adds	r3, #1
 800ca00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	3301      	adds	r3, #1
 800ca06:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f7ff fac6 	bl	800bf9a <SWAPBYTE>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	461a      	mov	r2, r3
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ca22:	68f8      	ldr	r0, [r7, #12]
 800ca24:	f7ff fab9 	bl	800bf9a <SWAPBYTE>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	80da      	strh	r2, [r3, #6]
}
 800ca30:	bf00      	nop
 800ca32:	3710      	adds	r7, #16
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca42:	2180      	movs	r1, #128	; 0x80
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f001 fe45 	bl	800e6d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ca4a:	2100      	movs	r1, #0
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f001 fe41 	bl	800e6d4 <USBD_LL_StallEP>
}
 800ca52:	bf00      	nop
 800ca54:	3708      	adds	r7, #8
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ca5a:	b580      	push	{r7, lr}
 800ca5c:	b086      	sub	sp, #24
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	60f8      	str	r0, [r7, #12]
 800ca62:	60b9      	str	r1, [r7, #8]
 800ca64:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ca66:	2300      	movs	r3, #0
 800ca68:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d036      	beq.n	800cade <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ca74:	6938      	ldr	r0, [r7, #16]
 800ca76:	f000 f836 	bl	800cae6 <USBD_GetLen>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	005b      	lsls	r3, r3, #1
 800ca82:	b29a      	uxth	r2, r3
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca88:	7dfb      	ldrb	r3, [r7, #23]
 800ca8a:	68ba      	ldr	r2, [r7, #8]
 800ca8c:	4413      	add	r3, r2
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	7812      	ldrb	r2, [r2, #0]
 800ca92:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca94:	7dfb      	ldrb	r3, [r7, #23]
 800ca96:	3301      	adds	r3, #1
 800ca98:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca9a:	7dfb      	ldrb	r3, [r7, #23]
 800ca9c:	68ba      	ldr	r2, [r7, #8]
 800ca9e:	4413      	add	r3, r2
 800caa0:	2203      	movs	r2, #3
 800caa2:	701a      	strb	r2, [r3, #0]
  idx++;
 800caa4:	7dfb      	ldrb	r3, [r7, #23]
 800caa6:	3301      	adds	r3, #1
 800caa8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800caaa:	e013      	b.n	800cad4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800caac:	7dfb      	ldrb	r3, [r7, #23]
 800caae:	68ba      	ldr	r2, [r7, #8]
 800cab0:	4413      	add	r3, r2
 800cab2:	693a      	ldr	r2, [r7, #16]
 800cab4:	7812      	ldrb	r2, [r2, #0]
 800cab6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	3301      	adds	r3, #1
 800cabc:	613b      	str	r3, [r7, #16]
    idx++;
 800cabe:	7dfb      	ldrb	r3, [r7, #23]
 800cac0:	3301      	adds	r3, #1
 800cac2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cac4:	7dfb      	ldrb	r3, [r7, #23]
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	4413      	add	r3, r2
 800caca:	2200      	movs	r2, #0
 800cacc:	701a      	strb	r2, [r3, #0]
    idx++;
 800cace:	7dfb      	ldrb	r3, [r7, #23]
 800cad0:	3301      	adds	r3, #1
 800cad2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1e7      	bne.n	800caac <USBD_GetString+0x52>
 800cadc:	e000      	b.n	800cae0 <USBD_GetString+0x86>
    return;
 800cade:	bf00      	nop
  }
}
 800cae0:	3718      	adds	r7, #24
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cae6:	b480      	push	{r7}
 800cae8:	b085      	sub	sp, #20
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800caee:	2300      	movs	r3, #0
 800caf0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800caf6:	e005      	b.n	800cb04 <USBD_GetLen+0x1e>
  {
    len++;
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
 800cafa:	3301      	adds	r3, #1
 800cafc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	3301      	adds	r3, #1
 800cb02:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1f5      	bne.n	800caf8 <USBD_GetLen+0x12>
  }

  return len;
 800cb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3714      	adds	r7, #20
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr

0800cb1a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b084      	sub	sp, #16
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	60f8      	str	r0, [r7, #12]
 800cb22:	60b9      	str	r1, [r7, #8]
 800cb24:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2202      	movs	r2, #2
 800cb2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	2100      	movs	r1, #0
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f001 fe50 	bl	800e7e6 <USBD_LL_Transmit>

  return USBD_OK;
 800cb46:	2300      	movs	r3, #0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3710      	adds	r7, #16
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	68ba      	ldr	r2, [r7, #8]
 800cb60:	2100      	movs	r1, #0
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f001 fe3f 	bl	800e7e6 <USBD_LL_Transmit>

  return USBD_OK;
 800cb68:	2300      	movs	r3, #0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}

0800cb72 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b084      	sub	sp, #16
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	60f8      	str	r0, [r7, #12]
 800cb7a:	60b9      	str	r1, [r7, #8]
 800cb7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2203      	movs	r2, #3
 800cb82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	68ba      	ldr	r2, [r7, #8]
 800cb9a:	2100      	movs	r1, #0
 800cb9c:	68f8      	ldr	r0, [r7, #12]
 800cb9e:	f001 fe43 	bl	800e828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cba2:	2300      	movs	r3, #0
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3710      	adds	r7, #16
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	68ba      	ldr	r2, [r7, #8]
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	f001 fe32 	bl	800e828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbc4:	2300      	movs	r3, #0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3710      	adds	r7, #16
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b082      	sub	sp, #8
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2204      	movs	r2, #4
 800cbda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cbde:	2300      	movs	r3, #0
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f001 fdfe 	bl	800e7e6 <USBD_LL_Transmit>

  return USBD_OK;
 800cbea:	2300      	movs	r3, #0
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3708      	adds	r7, #8
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}

0800cbf4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2205      	movs	r2, #5
 800cc00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc04:	2300      	movs	r3, #0
 800cc06:	2200      	movs	r2, #0
 800cc08:	2100      	movs	r1, #0
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f001 fe0c 	bl	800e828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc10:	2300      	movs	r3, #0
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3708      	adds	r7, #8
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
	...

0800cc1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b087      	sub	sp, #28
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	4613      	mov	r3, r2
 800cc28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cc32:	4b1f      	ldr	r3, [pc, #124]	; (800ccb0 <FATFS_LinkDriverEx+0x94>)
 800cc34:	7a5b      	ldrb	r3, [r3, #9]
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d131      	bne.n	800cca0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cc3c:	4b1c      	ldr	r3, [pc, #112]	; (800ccb0 <FATFS_LinkDriverEx+0x94>)
 800cc3e:	7a5b      	ldrb	r3, [r3, #9]
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	461a      	mov	r2, r3
 800cc44:	4b1a      	ldr	r3, [pc, #104]	; (800ccb0 <FATFS_LinkDriverEx+0x94>)
 800cc46:	2100      	movs	r1, #0
 800cc48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cc4a:	4b19      	ldr	r3, [pc, #100]	; (800ccb0 <FATFS_LinkDriverEx+0x94>)
 800cc4c:	7a5b      	ldrb	r3, [r3, #9]
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	4a17      	ldr	r2, [pc, #92]	; (800ccb0 <FATFS_LinkDriverEx+0x94>)
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	4413      	add	r3, r2
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cc5a:	4b15      	ldr	r3, [pc, #84]	; (800ccb0 <FATFS_LinkDriverEx+0x94>)
 800cc5c:	7a5b      	ldrb	r3, [r3, #9]
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	461a      	mov	r2, r3
 800cc62:	4b13      	ldr	r3, [pc, #76]	; (800ccb0 <FATFS_LinkDriverEx+0x94>)
 800cc64:	4413      	add	r3, r2
 800cc66:	79fa      	ldrb	r2, [r7, #7]
 800cc68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cc6a:	4b11      	ldr	r3, [pc, #68]	; (800ccb0 <FATFS_LinkDriverEx+0x94>)
 800cc6c:	7a5b      	ldrb	r3, [r3, #9]
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	1c5a      	adds	r2, r3, #1
 800cc72:	b2d1      	uxtb	r1, r2
 800cc74:	4a0e      	ldr	r2, [pc, #56]	; (800ccb0 <FATFS_LinkDriverEx+0x94>)
 800cc76:	7251      	strb	r1, [r2, #9]
 800cc78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cc7a:	7dbb      	ldrb	r3, [r7, #22]
 800cc7c:	3330      	adds	r3, #48	; 0x30
 800cc7e:	b2da      	uxtb	r2, r3
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	3301      	adds	r3, #1
 800cc88:	223a      	movs	r2, #58	; 0x3a
 800cc8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	3302      	adds	r3, #2
 800cc90:	222f      	movs	r2, #47	; 0x2f
 800cc92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	3303      	adds	r3, #3
 800cc98:	2200      	movs	r2, #0
 800cc9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cca0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	371c      	adds	r7, #28
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr
 800ccae:	bf00      	nop
 800ccb0:	2000021c 	.word	0x2000021c

0800ccb4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	6839      	ldr	r1, [r7, #0]
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f7ff ffaa 	bl	800cc1c <FATFS_LinkDriverEx>
 800ccc8:	4603      	mov	r3, r0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3708      	adds	r7, #8
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
	...

0800ccd4 <AudioPlay_Play>:
 */
#include "audioplay.h"
extern I2S_HandleTypeDef hi2s2;

uint8_t AudioPlay_Play(uint16_t *pBuffer, uint32_t Size)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
	uint8_t ret=AUDIO_OK;
 800ccde:	2300      	movs	r3, #0
 800cce0:	73fb      	strb	r3, [r7, #15]

		if(HAL_I2S_Transmit_DMA(&hi2s2,(uint16_t*)pBuffer,
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cce8:	d203      	bcs.n	800ccf2 <AudioPlay_Play+0x1e>
									DMA_MAX(Size/AUDIODATA_SIZE))!=HAL_OK)
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	085b      	lsrs	r3, r3, #1
		if(HAL_I2S_Transmit_DMA(&hi2s2,(uint16_t*)pBuffer,
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	e001      	b.n	800ccf6 <AudioPlay_Play+0x22>
 800ccf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	6879      	ldr	r1, [r7, #4]
 800ccfa:	4806      	ldr	r0, [pc, #24]	; (800cd14 <AudioPlay_Play+0x40>)
 800ccfc:	f7f7 fc60 	bl	80045c0 <HAL_I2S_Transmit_DMA>
 800cd00:	4603      	mov	r3, r0
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d001      	beq.n	800cd0a <AudioPlay_Play+0x36>
		{
			ret=AUDIO_ERROR;
 800cd06:	2301      	movs	r3, #1
 800cd08:	73fb      	strb	r3, [r7, #15]
		}
	return ret;
 800cd0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3710      	adds	r7, #16
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	20000850 	.word	0x20000850

0800cd18 <AudioPlay_Stop>:
uint8_t AudioPlay_Stop()
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
	uint8_t ret=AUDIO_OK;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	71fb      	strb	r3, [r7, #7]

		if(HAL_I2S_DMAStop(&hi2s2)!=HAL_OK)
 800cd22:	4806      	ldr	r0, [pc, #24]	; (800cd3c <AudioPlay_Stop+0x24>)
 800cd24:	f7f7 fcf4 	bl	8004710 <HAL_I2S_DMAStop>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d001      	beq.n	800cd32 <AudioPlay_Stop+0x1a>
		{
			ret=AUDIO_ERROR;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	71fb      	strb	r3, [r7, #7]
		}

	return ret;
 800cd32:	79fb      	ldrb	r3, [r7, #7]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3708      	adds	r7, #8
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	20000850 	.word	0x20000850

0800cd40 <AudioPlay_ChangeBuffer>:

void AudioPlay_ChangeBuffer(uint16_t *pData, uint16_t Size)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	460b      	mov	r3, r1
 800cd4a:	807b      	strh	r3, [r7, #2]
		if (val>3 || val<-3)
		{
			val=val;
		}
	}*/
	HAL_I2S_Transmit_DMA(&hi2s2,(uint16_t*)pData,Size);
 800cd4c:	887b      	ldrh	r3, [r7, #2]
 800cd4e:	461a      	mov	r2, r3
 800cd50:	6879      	ldr	r1, [r7, #4]
 800cd52:	4803      	ldr	r0, [pc, #12]	; (800cd60 <AudioPlay_ChangeBuffer+0x20>)
 800cd54:	f7f7 fc34 	bl	80045c0 <HAL_I2S_Transmit_DMA>
}
 800cd58:	bf00      	nop
 800cd5a:	3708      	adds	r7, #8
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	20000850 	.word	0x20000850

0800cd64 <AudioPlay_HalfTransfer_CallBack>:

void AudioPlay_HalfTransfer_CallBack(void)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	af00      	add	r7, sp, #0
	HalfTransfer_CallBack_FS();
 800cd68:	f001 fab8 	bl	800e2dc <HalfTransfer_CallBack_FS>
}
 800cd6c:	bf00      	nop
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <AudioPlay_TransferComplete_CallBack>:
//------------------------------------------------------
void AudioPlay_TransferComplete_CallBack(void)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	af00      	add	r7, sp, #0
	TransferComplete_CallBack_FS();
 800cd74:	f001 faa8 	bl	800e2c8 <TransferComplete_CallBack_FS>
}
 800cd78:	bf00      	nop
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b082      	sub	sp, #8
 800cd80:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cd82:	2300      	movs	r3, #0
 800cd84:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cd86:	f000 f879 	bl	800ce7c <BSP_SD_IsDetected>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d001      	beq.n	800cd94 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800cd90:	2301      	movs	r3, #1
 800cd92:	e012      	b.n	800cdba <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800cd94:	480b      	ldr	r0, [pc, #44]	; (800cdc4 <BSP_SD_Init+0x48>)
 800cd96:	f7fa f9a9 	bl	80070ec <HAL_SD_Init>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cd9e:	79fb      	ldrb	r3, [r7, #7]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d109      	bne.n	800cdb8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800cda4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cda8:	4806      	ldr	r0, [pc, #24]	; (800cdc4 <BSP_SD_Init+0x48>)
 800cdaa:	f7fa ff9b 	bl	8007ce4 <HAL_SD_ConfigWideBusOperation>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d001      	beq.n	800cdb8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cdb8:	79fb      	ldrb	r3, [r7, #7]
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3708      	adds	r7, #8
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	2000076c 	.word	0x2000076c

0800cdc8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b088      	sub	sp, #32
 800cdcc:	af02      	add	r7, sp, #8
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	607a      	str	r2, [r7, #4]
 800cdd4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	9300      	str	r3, [sp, #0]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	68ba      	ldr	r2, [r7, #8]
 800cde2:	68f9      	ldr	r1, [r7, #12]
 800cde4:	4806      	ldr	r0, [pc, #24]	; (800ce00 <BSP_SD_ReadBlocks+0x38>)
 800cde6:	f7fa fa11 	bl	800720c <HAL_SD_ReadBlocks>
 800cdea:	4603      	mov	r3, r0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d001      	beq.n	800cdf4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800cdf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3718      	adds	r7, #24
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	2000076c 	.word	0x2000076c

0800ce04 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b088      	sub	sp, #32
 800ce08:	af02      	add	r7, sp, #8
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
 800ce10:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ce12:	2300      	movs	r3, #0
 800ce14:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	9300      	str	r3, [sp, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	68ba      	ldr	r2, [r7, #8]
 800ce1e:	68f9      	ldr	r1, [r7, #12]
 800ce20:	4806      	ldr	r0, [pc, #24]	; (800ce3c <BSP_SD_WriteBlocks+0x38>)
 800ce22:	f7fa fbed 	bl	8007600 <HAL_SD_WriteBlocks>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d001      	beq.n	800ce30 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800ce30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3718      	adds	r7, #24
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	2000076c 	.word	0x2000076c

0800ce40 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ce44:	4805      	ldr	r0, [pc, #20]	; (800ce5c <BSP_SD_GetCardState+0x1c>)
 800ce46:	f7fa ffc9 	bl	8007ddc <HAL_SD_GetCardState>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b04      	cmp	r3, #4
 800ce4e:	bf14      	ite	ne
 800ce50:	2301      	movne	r3, #1
 800ce52:	2300      	moveq	r3, #0
 800ce54:	b2db      	uxtb	r3, r3
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	2000076c 	.word	0x2000076c

0800ce60 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ce68:	6879      	ldr	r1, [r7, #4]
 800ce6a:	4803      	ldr	r0, [pc, #12]	; (800ce78 <BSP_SD_GetCardInfo+0x18>)
 800ce6c:	f7fa ff0e 	bl	8007c8c <HAL_SD_GetCardInfo>
}
 800ce70:	bf00      	nop
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	2000076c 	.word	0x2000076c

0800ce7c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ce82:	2301      	movs	r3, #1
 800ce84:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800ce86:	f000 f81d 	bl	800cec4 <BSP_PlatformIsDetected>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d101      	bne.n	800ce94 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ce90:	2300      	movs	r3, #0
 800ce92:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ce94:	79fb      	ldrb	r3, [r7, #7]
 800ce96:	b2db      	uxtb	r3, r3
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3708      	adds	r7, #8
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cea4:	4904      	ldr	r1, [pc, #16]	; (800ceb8 <MX_FATFS_Init+0x18>)
 800cea6:	4805      	ldr	r0, [pc, #20]	; (800cebc <MX_FATFS_Init+0x1c>)
 800cea8:	f7ff ff04 	bl	800ccb4 <FATFS_LinkDriver>
 800ceac:	4603      	mov	r3, r0
 800ceae:	461a      	mov	r2, r3
 800ceb0:	4b03      	ldr	r3, [pc, #12]	; (800cec0 <MX_FATFS_Init+0x20>)
 800ceb2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800ceb4:	bf00      	nop
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	20000264 	.word	0x20000264
 800cebc:	0800f514 	.word	0x0800f514
 800cec0:	20000260 	.word	0x20000260

0800cec4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ceca:	2301      	movs	r3, #1
 800cecc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800cece:	2180      	movs	r1, #128	; 0x80
 800ced0:	4806      	ldr	r0, [pc, #24]	; (800ceec <BSP_PlatformIsDetected+0x28>)
 800ced2:	f7f4 fe55 	bl	8001b80 <HAL_GPIO_ReadPin>
 800ced6:	4603      	mov	r3, r0
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d001      	beq.n	800cee0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800cedc:	2300      	movs	r3, #0
 800cede:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800cee0:	79fb      	ldrb	r3, [r7, #7]
}  
 800cee2:	4618      	mov	r0, r3
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	40020800 	.word	0x40020800

0800cef0 <hid_send_stop>:
	    0x09, 0xe2,                    //   USAGE (Mute)
	    0x09, 0xe9,                    //   USAGE (Volume Up)
	    0x09, 0xea,                    //   USAGE (Volume Down)
 */
static void hid_send_stop()
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	af00      	add	r7, sp, #0
	HID_Buffer[0]=0;
 800cef4:	4b10      	ldr	r3, [pc, #64]	; (800cf38 <hid_send_stop+0x48>)
 800cef6:	2200      	movs	r2, #0
 800cef8:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1]=0;
 800cefa:	4b0f      	ldr	r3, [pc, #60]	; (800cf38 <hid_send_stop+0x48>)
 800cefc:	2200      	movs	r2, #0
 800cefe:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2]=22;
 800cf00:	4b0d      	ldr	r3, [pc, #52]	; (800cf38 <hid_send_stop+0x48>)
 800cf02:	2216      	movs	r2, #22
 800cf04:	709a      	strb	r2, [r3, #2]
	//HID_Buffer[1]=0x00;
	//HID_Buffer[2]=0;
	USBD_HID_SendReport(&hUsbDeviceFS,HID_Buffer,8);
 800cf06:	2208      	movs	r2, #8
 800cf08:	490b      	ldr	r1, [pc, #44]	; (800cf38 <hid_send_stop+0x48>)
 800cf0a:	480c      	ldr	r0, [pc, #48]	; (800cf3c <hid_send_stop+0x4c>)
 800cf0c:	f7fe fd48 	bl	800b9a0 <USBD_HID_SendReport>
	HAL_Delay(20);
 800cf10:	2014      	movs	r0, #20
 800cf12:	f7f3 ff71 	bl	8000df8 <HAL_Delay>

	HID_Buffer[0]=0;
 800cf16:	4b08      	ldr	r3, [pc, #32]	; (800cf38 <hid_send_stop+0x48>)
 800cf18:	2200      	movs	r2, #0
 800cf1a:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1]=0;
 800cf1c:	4b06      	ldr	r3, [pc, #24]	; (800cf38 <hid_send_stop+0x48>)
 800cf1e:	2200      	movs	r2, #0
 800cf20:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2]=0;
 800cf22:	4b05      	ldr	r3, [pc, #20]	; (800cf38 <hid_send_stop+0x48>)
 800cf24:	2200      	movs	r2, #0
 800cf26:	709a      	strb	r2, [r3, #2]
	//HID_Buffer[2]=0;
	USBD_HID_SendReport(&hUsbDeviceFS,HID_Buffer,8);
 800cf28:	2208      	movs	r2, #8
 800cf2a:	4903      	ldr	r1, [pc, #12]	; (800cf38 <hid_send_stop+0x48>)
 800cf2c:	4803      	ldr	r0, [pc, #12]	; (800cf3c <hid_send_stop+0x4c>)
 800cf2e:	f7fe fd37 	bl	800b9a0 <USBD_HID_SendReport>
}
 800cf32:	bf00      	nop
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	20000724 	.word	0x20000724
 800cf3c:	200008a0 	.word	0x200008a0

0800cf40 <hid_send_start>:
static void hid_send_start()
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	af00      	add	r7, sp, #0
	HID_Buffer[0]=0;
 800cf44:	4b10      	ldr	r3, [pc, #64]	; (800cf88 <hid_send_start+0x48>)
 800cf46:	2200      	movs	r2, #0
 800cf48:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1]=0;
 800cf4a:	4b0f      	ldr	r3, [pc, #60]	; (800cf88 <hid_send_start+0x48>)
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2]=19;
 800cf50:	4b0d      	ldr	r3, [pc, #52]	; (800cf88 <hid_send_start+0x48>)
 800cf52:	2213      	movs	r2, #19
 800cf54:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS,HID_Buffer,8);
 800cf56:	2208      	movs	r2, #8
 800cf58:	490b      	ldr	r1, [pc, #44]	; (800cf88 <hid_send_start+0x48>)
 800cf5a:	480c      	ldr	r0, [pc, #48]	; (800cf8c <hid_send_start+0x4c>)
 800cf5c:	f7fe fd20 	bl	800b9a0 <USBD_HID_SendReport>
	HAL_Delay(20);
 800cf60:	2014      	movs	r0, #20
 800cf62:	f7f3 ff49 	bl	8000df8 <HAL_Delay>

	HID_Buffer[0]=0;
 800cf66:	4b08      	ldr	r3, [pc, #32]	; (800cf88 <hid_send_start+0x48>)
 800cf68:	2200      	movs	r2, #0
 800cf6a:	701a      	strb	r2, [r3, #0]
	HID_Buffer[1]=0;
 800cf6c:	4b06      	ldr	r3, [pc, #24]	; (800cf88 <hid_send_start+0x48>)
 800cf6e:	2200      	movs	r2, #0
 800cf70:	705a      	strb	r2, [r3, #1]
	HID_Buffer[2]=0;
 800cf72:	4b05      	ldr	r3, [pc, #20]	; (800cf88 <hid_send_start+0x48>)
 800cf74:	2200      	movs	r2, #0
 800cf76:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS,HID_Buffer,8);
 800cf78:	2208      	movs	r2, #8
 800cf7a:	4903      	ldr	r1, [pc, #12]	; (800cf88 <hid_send_start+0x48>)
 800cf7c:	4803      	ldr	r0, [pc, #12]	; (800cf8c <hid_send_start+0x4c>)
 800cf7e:	f7fe fd0f 	bl	800b9a0 <USBD_HID_SendReport>
}
 800cf82:	bf00      	nop
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	20000724 	.word	0x20000724
 800cf8c:	200008a0 	.word	0x200008a0

0800cf90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cf90:	b5b0      	push	{r4, r5, r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cf96:	f7f3 febd 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cf9a:	f000 f983 	bl	800d2a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cf9e:	f000 fb23 	bl	800d5e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800cfa2:	f000 fb01 	bl	800d5a8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800cfa6:	f001 f8b9 	bl	800e11c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800cfaa:	f000 f9fd 	bl	800d3a8 <MX_I2C1_Init>
  MX_I2S2_Init();
 800cfae:	f000 fa29 	bl	800d404 <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 800cfb2:	f000 fa55 	bl	800d460 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800cfb6:	f7ff ff73 	bl	800cea0 <MX_FATFS_Init>
  MX_TIM1_Init();
 800cfba:	f000 fa71 	bl	800d4a0 <MX_TIM1_Init>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800cfbe:	2100      	movs	r1, #0
 800cfc0:	48ad      	ldr	r0, [pc, #692]	; (800d278 <main+0x2e8>)
 800cfc2:	f7fb fe47 	bl	8008c54 <HAL_TIMEx_PWMN_Start>
  //setLed(0);
  //HAL_Delay(100);



  for( int u = 0; u<100; u++){
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	607b      	str	r3, [r7, #4]
 800cfca:	e052      	b.n	800d072 <main+0xe2>
	    a=0.995*a+0.005*getMagVal();
 800cfcc:	4bab      	ldr	r3, [pc, #684]	; (800d27c <main+0x2ec>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7f3 fa65 	bl	80004a0 <__aeabi_f2d>
 800cfd6:	a398      	add	r3, pc, #608	; (adr r3, 800d238 <main+0x2a8>)
 800cfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfdc:	f7f3 fab8 	bl	8000550 <__aeabi_dmul>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	460c      	mov	r4, r1
 800cfe4:	4625      	mov	r5, r4
 800cfe6:	461c      	mov	r4, r3
 800cfe8:	f001 f804 	bl	800dff4 <getMagVal>
 800cfec:	4603      	mov	r3, r0
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7f3 fa44 	bl	800047c <__aeabi_i2d>
 800cff4:	a392      	add	r3, pc, #584	; (adr r3, 800d240 <main+0x2b0>)
 800cff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffa:	f7f3 faa9 	bl	8000550 <__aeabi_dmul>
 800cffe:	4602      	mov	r2, r0
 800d000:	460b      	mov	r3, r1
 800d002:	4620      	mov	r0, r4
 800d004:	4629      	mov	r1, r5
 800d006:	f7f3 f8ed 	bl	80001e4 <__adddf3>
 800d00a:	4603      	mov	r3, r0
 800d00c:	460c      	mov	r4, r1
 800d00e:	4618      	mov	r0, r3
 800d010:	4621      	mov	r1, r4
 800d012:	f7f3 fcaf 	bl	8000974 <__aeabi_d2f>
 800d016:	4602      	mov	r2, r0
 800d018:	4b98      	ldr	r3, [pc, #608]	; (800d27c <main+0x2ec>)
 800d01a:	601a      	str	r2, [r3, #0]
	    b=0.7*b+0.3*getMagVal();
 800d01c:	4b98      	ldr	r3, [pc, #608]	; (800d280 <main+0x2f0>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4618      	mov	r0, r3
 800d022:	f7f3 fa3d 	bl	80004a0 <__aeabi_f2d>
 800d026:	a388      	add	r3, pc, #544	; (adr r3, 800d248 <main+0x2b8>)
 800d028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02c:	f7f3 fa90 	bl	8000550 <__aeabi_dmul>
 800d030:	4603      	mov	r3, r0
 800d032:	460c      	mov	r4, r1
 800d034:	4625      	mov	r5, r4
 800d036:	461c      	mov	r4, r3
 800d038:	f000 ffdc 	bl	800dff4 <getMagVal>
 800d03c:	4603      	mov	r3, r0
 800d03e:	4618      	mov	r0, r3
 800d040:	f7f3 fa1c 	bl	800047c <__aeabi_i2d>
 800d044:	a382      	add	r3, pc, #520	; (adr r3, 800d250 <main+0x2c0>)
 800d046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04a:	f7f3 fa81 	bl	8000550 <__aeabi_dmul>
 800d04e:	4602      	mov	r2, r0
 800d050:	460b      	mov	r3, r1
 800d052:	4620      	mov	r0, r4
 800d054:	4629      	mov	r1, r5
 800d056:	f7f3 f8c5 	bl	80001e4 <__adddf3>
 800d05a:	4603      	mov	r3, r0
 800d05c:	460c      	mov	r4, r1
 800d05e:	4618      	mov	r0, r3
 800d060:	4621      	mov	r1, r4
 800d062:	f7f3 fc87 	bl	8000974 <__aeabi_d2f>
 800d066:	4602      	mov	r2, r0
 800d068:	4b85      	ldr	r3, [pc, #532]	; (800d280 <main+0x2f0>)
 800d06a:	601a      	str	r2, [r3, #0]
  for( int u = 0; u<100; u++){
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	3301      	adds	r3, #1
 800d070:	607b      	str	r3, [r7, #4]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2b63      	cmp	r3, #99	; 0x63
 800d076:	dda9      	ble.n	800cfcc <main+0x3c>
  }

  if(a<13){phoneUp=1;}
 800d078:	4b80      	ldr	r3, [pc, #512]	; (800d27c <main+0x2ec>)
 800d07a:	edd3 7a00 	vldr	s15, [r3]
 800d07e:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800d082:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d08a:	d502      	bpl.n	800d092 <main+0x102>
 800d08c:	4b7d      	ldr	r3, [pc, #500]	; (800d284 <main+0x2f4>)
 800d08e:	2201      	movs	r2, #1
 800d090:	601a      	str	r2, [r3, #0]


  printf("dsfsda: \n");
 800d092:	487d      	ldr	r0, [pc, #500]	; (800d288 <main+0x2f8>)
 800d094:	f001 fea6 	bl	800ede4 <puts>
  while (1)
  {

	  //a=getMagVal();
    a=0.992*a+0.008*getMagVal();
 800d098:	4b78      	ldr	r3, [pc, #480]	; (800d27c <main+0x2ec>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7f3 f9ff 	bl	80004a0 <__aeabi_f2d>
 800d0a2:	a36d      	add	r3, pc, #436	; (adr r3, 800d258 <main+0x2c8>)
 800d0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a8:	f7f3 fa52 	bl	8000550 <__aeabi_dmul>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	460c      	mov	r4, r1
 800d0b0:	4625      	mov	r5, r4
 800d0b2:	461c      	mov	r4, r3
 800d0b4:	f000 ff9e 	bl	800dff4 <getMagVal>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7f3 f9de 	bl	800047c <__aeabi_i2d>
 800d0c0:	a367      	add	r3, pc, #412	; (adr r3, 800d260 <main+0x2d0>)
 800d0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c6:	f7f3 fa43 	bl	8000550 <__aeabi_dmul>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	4629      	mov	r1, r5
 800d0d2:	f7f3 f887 	bl	80001e4 <__adddf3>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	460c      	mov	r4, r1
 800d0da:	4618      	mov	r0, r3
 800d0dc:	4621      	mov	r1, r4
 800d0de:	f7f3 fc49 	bl	8000974 <__aeabi_d2f>
 800d0e2:	4602      	mov	r2, r0
 800d0e4:	4b65      	ldr	r3, [pc, #404]	; (800d27c <main+0x2ec>)
 800d0e6:	601a      	str	r2, [r3, #0]
    b=0.95*b+0.05*getMagVal();
 800d0e8:	4b65      	ldr	r3, [pc, #404]	; (800d280 <main+0x2f0>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f7f3 f9d7 	bl	80004a0 <__aeabi_f2d>
 800d0f2:	a35d      	add	r3, pc, #372	; (adr r3, 800d268 <main+0x2d8>)
 800d0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f8:	f7f3 fa2a 	bl	8000550 <__aeabi_dmul>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	460c      	mov	r4, r1
 800d100:	4625      	mov	r5, r4
 800d102:	461c      	mov	r4, r3
 800d104:	f000 ff76 	bl	800dff4 <getMagVal>
 800d108:	4603      	mov	r3, r0
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7f3 f9b6 	bl	800047c <__aeabi_i2d>
 800d110:	a357      	add	r3, pc, #348	; (adr r3, 800d270 <main+0x2e0>)
 800d112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d116:	f7f3 fa1b 	bl	8000550 <__aeabi_dmul>
 800d11a:	4602      	mov	r2, r0
 800d11c:	460b      	mov	r3, r1
 800d11e:	4620      	mov	r0, r4
 800d120:	4629      	mov	r1, r5
 800d122:	f7f3 f85f 	bl	80001e4 <__adddf3>
 800d126:	4603      	mov	r3, r0
 800d128:	460c      	mov	r4, r1
 800d12a:	4618      	mov	r0, r3
 800d12c:	4621      	mov	r1, r4
 800d12e:	f7f3 fc21 	bl	8000974 <__aeabi_d2f>
 800d132:	4602      	mov	r2, r0
 800d134:	4b52      	ldr	r3, [pc, #328]	; (800d280 <main+0x2f0>)
 800d136:	601a      	str	r2, [r3, #0]
    d = a-b;
 800d138:	4b50      	ldr	r3, [pc, #320]	; (800d27c <main+0x2ec>)
 800d13a:	ed93 7a00 	vldr	s14, [r3]
 800d13e:	4b50      	ldr	r3, [pc, #320]	; (800d280 <main+0x2f0>)
 800d140:	edd3 7a00 	vldr	s15, [r3]
 800d144:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d148:	4b50      	ldr	r3, [pc, #320]	; (800d28c <main+0x2fc>)
 800d14a:	edc3 7a00 	vstr	s15, [r3]
    if (d>MAG_VAL){
 800d14e:	4b4f      	ldr	r3, [pc, #316]	; (800d28c <main+0x2fc>)
 800d150:	edd3 7a00 	vldr	s15, [r3]
 800d154:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800d158:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d160:	dd03      	ble.n	800d16a <main+0x1da>
	  	  phoneUp=1;
 800d162:	4b48      	ldr	r3, [pc, #288]	; (800d284 <main+0x2f4>)
 800d164:	2201      	movs	r2, #1
 800d166:	601a      	str	r2, [r3, #0]
 800d168:	e00c      	b.n	800d184 <main+0x1f4>
  	} else if (d<-MAG_VAL) {
 800d16a:	4b48      	ldr	r3, [pc, #288]	; (800d28c <main+0x2fc>)
 800d16c:	edd3 7a00 	vldr	s15, [r3]
 800d170:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 800d174:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d17c:	d502      	bpl.n	800d184 <main+0x1f4>
  		  phoneUp=0;
 800d17e:	4b41      	ldr	r3, [pc, #260]	; (800d284 <main+0x2f4>)
 800d180:	2200      	movs	r2, #0
 800d182:	601a      	str	r2, [r3, #0]
  	}

	if (phoneUp!=phoneUp_){
 800d184:	4b3f      	ldr	r3, [pc, #252]	; (800d284 <main+0x2f4>)
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	4b41      	ldr	r3, [pc, #260]	; (800d290 <main+0x300>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d02c      	beq.n	800d1ea <main+0x25a>
		if (phoneUp){
 800d190:	4b3c      	ldr	r3, [pc, #240]	; (800d284 <main+0x2f4>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d014      	beq.n	800d1c2 <main+0x232>
			hid_send_start();
 800d198:	f7ff fed2 	bl	800cf40 <hid_send_start>
			//setLed(500);
			targetBright = 500;
 800d19c:	4b3d      	ldr	r3, [pc, #244]	; (800d294 <main+0x304>)
 800d19e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d1a2:	601a      	str	r2, [r3, #0]
			targetBright=targetBright-targetBright%increment;
 800d1a4:	4b3b      	ldr	r3, [pc, #236]	; (800d294 <main+0x304>)
 800d1a6:	6819      	ldr	r1, [r3, #0]
 800d1a8:	4b3a      	ldr	r3, [pc, #232]	; (800d294 <main+0x304>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a3a      	ldr	r2, [pc, #232]	; (800d298 <main+0x308>)
 800d1ae:	6812      	ldr	r2, [r2, #0]
 800d1b0:	fb93 f0f2 	sdiv	r0, r3, r2
 800d1b4:	fb02 f200 	mul.w	r2, r2, r0
 800d1b8:	1a9b      	subs	r3, r3, r2
 800d1ba:	1acb      	subs	r3, r1, r3
 800d1bc:	4a35      	ldr	r2, [pc, #212]	; (800d294 <main+0x304>)
 800d1be:	6013      	str	r3, [r2, #0]
 800d1c0:	e013      	b.n	800d1ea <main+0x25a>
		}else{
			hid_send_stop();
 800d1c2:	f7ff fe95 	bl	800cef0 <hid_send_stop>
			//setLed(65533);
			targetBright = 65533;
 800d1c6:	4b33      	ldr	r3, [pc, #204]	; (800d294 <main+0x304>)
 800d1c8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800d1cc:	601a      	str	r2, [r3, #0]
			targetBright=targetBright-targetBright%increment;
 800d1ce:	4b31      	ldr	r3, [pc, #196]	; (800d294 <main+0x304>)
 800d1d0:	6819      	ldr	r1, [r3, #0]
 800d1d2:	4b30      	ldr	r3, [pc, #192]	; (800d294 <main+0x304>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4a30      	ldr	r2, [pc, #192]	; (800d298 <main+0x308>)
 800d1d8:	6812      	ldr	r2, [r2, #0]
 800d1da:	fb93 f0f2 	sdiv	r0, r3, r2
 800d1de:	fb02 f200 	mul.w	r2, r2, r0
 800d1e2:	1a9b      	subs	r3, r3, r2
 800d1e4:	1acb      	subs	r3, r1, r3
 800d1e6:	4a2b      	ldr	r2, [pc, #172]	; (800d294 <main+0x304>)
 800d1e8:	6013      	str	r3, [r2, #0]
		}
	 }
	  phoneUp_=phoneUp;
 800d1ea:	4b26      	ldr	r3, [pc, #152]	; (800d284 <main+0x2f4>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a28      	ldr	r2, [pc, #160]	; (800d290 <main+0x300>)
 800d1f0:	6013      	str	r3, [r2, #0]

		if(ledBright!=targetBright){
 800d1f2:	4b2a      	ldr	r3, [pc, #168]	; (800d29c <main+0x30c>)
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	4b27      	ldr	r3, [pc, #156]	; (800d294 <main+0x304>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d018      	beq.n	800d230 <main+0x2a0>
			if(targetBright>ledBright){ ledBright+=increment;}
 800d1fe:	4b25      	ldr	r3, [pc, #148]	; (800d294 <main+0x304>)
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	4b26      	ldr	r3, [pc, #152]	; (800d29c <main+0x30c>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	429a      	cmp	r2, r3
 800d208:	dd07      	ble.n	800d21a <main+0x28a>
 800d20a:	4b24      	ldr	r3, [pc, #144]	; (800d29c <main+0x30c>)
 800d20c:	681a      	ldr	r2, [r3, #0]
 800d20e:	4b22      	ldr	r3, [pc, #136]	; (800d298 <main+0x308>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	4413      	add	r3, r2
 800d214:	4a21      	ldr	r2, [pc, #132]	; (800d29c <main+0x30c>)
 800d216:	6013      	str	r3, [r2, #0]
 800d218:	e006      	b.n	800d228 <main+0x298>
			else { ledBright-=increment;}
 800d21a:	4b20      	ldr	r3, [pc, #128]	; (800d29c <main+0x30c>)
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	4b1e      	ldr	r3, [pc, #120]	; (800d298 <main+0x308>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	1ad3      	subs	r3, r2, r3
 800d224:	4a1d      	ldr	r2, [pc, #116]	; (800d29c <main+0x30c>)
 800d226:	6013      	str	r3, [r2, #0]
			TIM1->CCR1=ledBright;
 800d228:	4b1c      	ldr	r3, [pc, #112]	; (800d29c <main+0x30c>)
 800d22a:	681a      	ldr	r2, [r3, #0]
 800d22c:	4b1c      	ldr	r3, [pc, #112]	; (800d2a0 <main+0x310>)
 800d22e:	635a      	str	r2, [r3, #52]	; 0x34
			//HAL_Delay(1);
		}
	  //printf("d: %d \n",(int)(d*1000));
	  HAL_Delay(1 );
 800d230:	2001      	movs	r0, #1
 800d232:	f7f3 fde1 	bl	8000df8 <HAL_Delay>
    a=0.992*a+0.008*getMagVal();
 800d236:	e72f      	b.n	800d098 <main+0x108>
 800d238:	3d70a3d7 	.word	0x3d70a3d7
 800d23c:	3fefd70a 	.word	0x3fefd70a
 800d240:	47ae147b 	.word	0x47ae147b
 800d244:	3f747ae1 	.word	0x3f747ae1
 800d248:	66666666 	.word	0x66666666
 800d24c:	3fe66666 	.word	0x3fe66666
 800d250:	33333333 	.word	0x33333333
 800d254:	3fd33333 	.word	0x3fd33333
 800d258:	c8b43958 	.word	0xc8b43958
 800d25c:	3fefbe76 	.word	0x3fefbe76
 800d260:	d2f1a9fc 	.word	0xd2f1a9fc
 800d264:	3f80624d 	.word	0x3f80624d
 800d268:	66666666 	.word	0x66666666
 800d26c:	3fee6666 	.word	0x3fee6666
 800d270:	9999999a 	.word	0x9999999a
 800d274:	3fa99999 	.word	0x3fa99999
 800d278:	2000072c 	.word	0x2000072c
 800d27c:	20000230 	.word	0x20000230
 800d280:	20000234 	.word	0x20000234
 800d284:	2000022c 	.word	0x2000022c
 800d288:	0800f4c4 	.word	0x0800f4c4
 800d28c:	20000238 	.word	0x20000238
 800d290:	2000011c 	.word	0x2000011c
 800d294:	20000720 	.word	0x20000720
 800d298:	20000120 	.word	0x20000120
 800d29c:	20000228 	.word	0x20000228
 800d2a0:	40010000 	.word	0x40010000

0800d2a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b098      	sub	sp, #96	; 0x60
 800d2a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d2aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d2ae:	2230      	movs	r2, #48	; 0x30
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f001 fc8a 	bl	800ebcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d2b8:	f107 031c 	add.w	r3, r7, #28
 800d2bc:	2200      	movs	r2, #0
 800d2be:	601a      	str	r2, [r3, #0]
 800d2c0:	605a      	str	r2, [r3, #4]
 800d2c2:	609a      	str	r2, [r3, #8]
 800d2c4:	60da      	str	r2, [r3, #12]
 800d2c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d2c8:	f107 0308 	add.w	r3, r7, #8
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	601a      	str	r2, [r3, #0]
 800d2d0:	605a      	str	r2, [r3, #4]
 800d2d2:	609a      	str	r2, [r3, #8]
 800d2d4:	60da      	str	r2, [r3, #12]
 800d2d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d2d8:	2300      	movs	r3, #0
 800d2da:	607b      	str	r3, [r7, #4]
 800d2dc:	4b30      	ldr	r3, [pc, #192]	; (800d3a0 <SystemClock_Config+0xfc>)
 800d2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e0:	4a2f      	ldr	r2, [pc, #188]	; (800d3a0 <SystemClock_Config+0xfc>)
 800d2e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2e6:	6413      	str	r3, [r2, #64]	; 0x40
 800d2e8:	4b2d      	ldr	r3, [pc, #180]	; (800d3a0 <SystemClock_Config+0xfc>)
 800d2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d2f0:	607b      	str	r3, [r7, #4]
 800d2f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	603b      	str	r3, [r7, #0]
 800d2f8:	4b2a      	ldr	r3, [pc, #168]	; (800d3a4 <SystemClock_Config+0x100>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800d300:	4a28      	ldr	r2, [pc, #160]	; (800d3a4 <SystemClock_Config+0x100>)
 800d302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d306:	6013      	str	r3, [r2, #0]
 800d308:	4b26      	ldr	r3, [pc, #152]	; (800d3a4 <SystemClock_Config+0x100>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d310:	603b      	str	r3, [r7, #0]
 800d312:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d314:	2301      	movs	r3, #1
 800d316:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d31c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d31e:	2302      	movs	r3, #2
 800d320:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d322:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d326:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800d328:	2308      	movs	r3, #8
 800d32a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 800d32c:	23fa      	movs	r3, #250	; 0xfa
 800d32e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800d330:	2306      	movs	r3, #6
 800d332:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800d334:	2308      	movs	r3, #8
 800d336:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d338:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7f9 f935 	bl	80065ac <HAL_RCC_OscConfig>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d001      	beq.n	800d34c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800d348:	f000 f9e8 	bl	800d71c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d34c:	230f      	movs	r3, #15
 800d34e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d350:	2302      	movs	r3, #2
 800d352:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d354:	2300      	movs	r3, #0
 800d356:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800d358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d35c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d35e:	2300      	movs	r3, #0
 800d360:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800d362:	f107 031c 	add.w	r3, r7, #28
 800d366:	2102      	movs	r1, #2
 800d368:	4618      	mov	r0, r3
 800d36a:	f7f9 fb8f 	bl	8006a8c <HAL_RCC_ClockConfig>
 800d36e:	4603      	mov	r3, r0
 800d370:	2b00      	cmp	r3, #0
 800d372:	d001      	beq.n	800d378 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800d374:	f000 f9d2 	bl	800d71c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800d378:	2301      	movs	r3, #1
 800d37a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800d37c:	23c0      	movs	r3, #192	; 0xc0
 800d37e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800d380:	2302      	movs	r3, #2
 800d382:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d384:	f107 0308 	add.w	r3, r7, #8
 800d388:	4618      	mov	r0, r3
 800d38a:	f7f9 fd67 	bl	8006e5c <HAL_RCCEx_PeriphCLKConfig>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d001      	beq.n	800d398 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800d394:	f000 f9c2 	bl	800d71c <Error_Handler>
  }
}
 800d398:	bf00      	nop
 800d39a:	3760      	adds	r7, #96	; 0x60
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	40023800 	.word	0x40023800
 800d3a4:	40007000 	.word	0x40007000

0800d3a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800d3ac:	4b12      	ldr	r3, [pc, #72]	; (800d3f8 <MX_I2C1_Init+0x50>)
 800d3ae:	4a13      	ldr	r2, [pc, #76]	; (800d3fc <MX_I2C1_Init+0x54>)
 800d3b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800d3b2:	4b11      	ldr	r3, [pc, #68]	; (800d3f8 <MX_I2C1_Init+0x50>)
 800d3b4:	4a12      	ldr	r2, [pc, #72]	; (800d400 <MX_I2C1_Init+0x58>)
 800d3b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d3b8:	4b0f      	ldr	r3, [pc, #60]	; (800d3f8 <MX_I2C1_Init+0x50>)
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800d3be:	4b0e      	ldr	r3, [pc, #56]	; (800d3f8 <MX_I2C1_Init+0x50>)
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d3c4:	4b0c      	ldr	r3, [pc, #48]	; (800d3f8 <MX_I2C1_Init+0x50>)
 800d3c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d3ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d3cc:	4b0a      	ldr	r3, [pc, #40]	; (800d3f8 <MX_I2C1_Init+0x50>)
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800d3d2:	4b09      	ldr	r3, [pc, #36]	; (800d3f8 <MX_I2C1_Init+0x50>)
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d3d8:	4b07      	ldr	r3, [pc, #28]	; (800d3f8 <MX_I2C1_Init+0x50>)
 800d3da:	2200      	movs	r2, #0
 800d3dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d3de:	4b06      	ldr	r3, [pc, #24]	; (800d3f8 <MX_I2C1_Init+0x50>)
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d3e4:	4804      	ldr	r0, [pc, #16]	; (800d3f8 <MX_I2C1_Init+0x50>)
 800d3e6:	f7f4 fbe3 	bl	8001bb0 <HAL_I2C_Init>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d001      	beq.n	800d3f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800d3f0:	f000 f994 	bl	800d71c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800d3f4:	bf00      	nop
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	200006cc 	.word	0x200006cc
 800d3fc:	40005400 	.word	0x40005400
 800d400:	000186a0 	.word	0x000186a0

0800d404 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800d408:	4b13      	ldr	r3, [pc, #76]	; (800d458 <MX_I2S2_Init+0x54>)
 800d40a:	4a14      	ldr	r2, [pc, #80]	; (800d45c <MX_I2S2_Init+0x58>)
 800d40c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800d40e:	4b12      	ldr	r3, [pc, #72]	; (800d458 <MX_I2S2_Init+0x54>)
 800d410:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d414:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800d416:	4b10      	ldr	r3, [pc, #64]	; (800d458 <MX_I2S2_Init+0x54>)
 800d418:	2200      	movs	r2, #0
 800d41a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800d41c:	4b0e      	ldr	r3, [pc, #56]	; (800d458 <MX_I2S2_Init+0x54>)
 800d41e:	2200      	movs	r2, #0
 800d420:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800d422:	4b0d      	ldr	r3, [pc, #52]	; (800d458 <MX_I2S2_Init+0x54>)
 800d424:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d428:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800d42a:	4b0b      	ldr	r3, [pc, #44]	; (800d458 <MX_I2S2_Init+0x54>)
 800d42c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800d430:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800d432:	4b09      	ldr	r3, [pc, #36]	; (800d458 <MX_I2S2_Init+0x54>)
 800d434:	2200      	movs	r2, #0
 800d436:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800d438:	4b07      	ldr	r3, [pc, #28]	; (800d458 <MX_I2S2_Init+0x54>)
 800d43a:	2200      	movs	r2, #0
 800d43c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800d43e:	4b06      	ldr	r3, [pc, #24]	; (800d458 <MX_I2S2_Init+0x54>)
 800d440:	2200      	movs	r2, #0
 800d442:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800d444:	4804      	ldr	r0, [pc, #16]	; (800d458 <MX_I2S2_Init+0x54>)
 800d446:	f7f6 ff7b 	bl	8004340 <HAL_I2S_Init>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d001      	beq.n	800d454 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 800d450:	f000 f964 	bl	800d71c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800d454:	bf00      	nop
 800d456:	bd80      	pop	{r7, pc}
 800d458:	20000850 	.word	0x20000850
 800d45c:	40003800 	.word	0x40003800

0800d460 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800d460:	b480      	push	{r7}
 800d462:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800d464:	4b0c      	ldr	r3, [pc, #48]	; (800d498 <MX_SDIO_SD_Init+0x38>)
 800d466:	4a0d      	ldr	r2, [pc, #52]	; (800d49c <MX_SDIO_SD_Init+0x3c>)
 800d468:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800d46a:	4b0b      	ldr	r3, [pc, #44]	; (800d498 <MX_SDIO_SD_Init+0x38>)
 800d46c:	2200      	movs	r2, #0
 800d46e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800d470:	4b09      	ldr	r3, [pc, #36]	; (800d498 <MX_SDIO_SD_Init+0x38>)
 800d472:	2200      	movs	r2, #0
 800d474:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d476:	4b08      	ldr	r3, [pc, #32]	; (800d498 <MX_SDIO_SD_Init+0x38>)
 800d478:	2200      	movs	r2, #0
 800d47a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800d47c:	4b06      	ldr	r3, [pc, #24]	; (800d498 <MX_SDIO_SD_Init+0x38>)
 800d47e:	2200      	movs	r2, #0
 800d480:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d482:	4b05      	ldr	r3, [pc, #20]	; (800d498 <MX_SDIO_SD_Init+0x38>)
 800d484:	2200      	movs	r2, #0
 800d486:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800d488:	4b03      	ldr	r3, [pc, #12]	; (800d498 <MX_SDIO_SD_Init+0x38>)
 800d48a:	2200      	movs	r2, #0
 800d48c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800d48e:	bf00      	nop
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr
 800d498:	2000076c 	.word	0x2000076c
 800d49c:	40012c00 	.word	0x40012c00

0800d4a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b092      	sub	sp, #72	; 0x48
 800d4a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d4a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	601a      	str	r2, [r3, #0]
 800d4ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d4b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	601a      	str	r2, [r3, #0]
 800d4b8:	605a      	str	r2, [r3, #4]
 800d4ba:	609a      	str	r2, [r3, #8]
 800d4bc:	60da      	str	r2, [r3, #12]
 800d4be:	611a      	str	r2, [r3, #16]
 800d4c0:	615a      	str	r2, [r3, #20]
 800d4c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800d4c4:	1d3b      	adds	r3, r7, #4
 800d4c6:	2220      	movs	r2, #32
 800d4c8:	2100      	movs	r1, #0
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f001 fb7e 	bl	800ebcc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800d4d0:	4b33      	ldr	r3, [pc, #204]	; (800d5a0 <MX_TIM1_Init+0x100>)
 800d4d2:	4a34      	ldr	r2, [pc, #208]	; (800d5a4 <MX_TIM1_Init+0x104>)
 800d4d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800d4d6:	4b32      	ldr	r3, [pc, #200]	; (800d5a0 <MX_TIM1_Init+0x100>)
 800d4d8:	2200      	movs	r2, #0
 800d4da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d4dc:	4b30      	ldr	r3, [pc, #192]	; (800d5a0 <MX_TIM1_Init+0x100>)
 800d4de:	2200      	movs	r2, #0
 800d4e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 800d4e2:	4b2f      	ldr	r3, [pc, #188]	; (800d5a0 <MX_TIM1_Init+0x100>)
 800d4e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d4e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d4ea:	4b2d      	ldr	r3, [pc, #180]	; (800d5a0 <MX_TIM1_Init+0x100>)
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800d4f0:	4b2b      	ldr	r3, [pc, #172]	; (800d5a0 <MX_TIM1_Init+0x100>)
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d4f6:	4b2a      	ldr	r3, [pc, #168]	; (800d5a0 <MX_TIM1_Init+0x100>)
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800d4fc:	4828      	ldr	r0, [pc, #160]	; (800d5a0 <MX_TIM1_Init+0x100>)
 800d4fe:	f7fa ff71 	bl	80083e4 <HAL_TIM_PWM_Init>
 800d502:	4603      	mov	r3, r0
 800d504:	2b00      	cmp	r3, #0
 800d506:	d001      	beq.n	800d50c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800d508:	f000 f908 	bl	800d71c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d50c:	2300      	movs	r3, #0
 800d50e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d510:	2300      	movs	r3, #0
 800d512:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800d514:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d518:	4619      	mov	r1, r3
 800d51a:	4821      	ldr	r0, [pc, #132]	; (800d5a0 <MX_TIM1_Init+0x100>)
 800d51c:	f7fb fbc4 	bl	8008ca8 <HAL_TIMEx_MasterConfigSynchronization>
 800d520:	4603      	mov	r3, r0
 800d522:	2b00      	cmp	r3, #0
 800d524:	d001      	beq.n	800d52a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800d526:	f000 f8f9 	bl	800d71c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d52a:	2360      	movs	r3, #96	; 0x60
 800d52c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800d52e:	2300      	movs	r3, #0
 800d530:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d532:	2300      	movs	r3, #0
 800d534:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d536:	2300      	movs	r3, #0
 800d538:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d53a:	2300      	movs	r3, #0
 800d53c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d53e:	2300      	movs	r3, #0
 800d540:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d542:	2300      	movs	r3, #0
 800d544:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d54a:	2200      	movs	r2, #0
 800d54c:	4619      	mov	r1, r3
 800d54e:	4814      	ldr	r0, [pc, #80]	; (800d5a0 <MX_TIM1_Init+0x100>)
 800d550:	f7fb f87c 	bl	800864c <HAL_TIM_PWM_ConfigChannel>
 800d554:	4603      	mov	r3, r0
 800d556:	2b00      	cmp	r3, #0
 800d558:	d001      	beq.n	800d55e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800d55a:	f000 f8df 	bl	800d71c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800d55e:	2300      	movs	r3, #0
 800d560:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800d562:	2300      	movs	r3, #0
 800d564:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800d566:	2300      	movs	r3, #0
 800d568:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800d56a:	2300      	movs	r3, #0
 800d56c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800d56e:	2300      	movs	r3, #0
 800d570:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d572:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d576:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800d578:	2300      	movs	r3, #0
 800d57a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800d57c:	1d3b      	adds	r3, r7, #4
 800d57e:	4619      	mov	r1, r3
 800d580:	4807      	ldr	r0, [pc, #28]	; (800d5a0 <MX_TIM1_Init+0x100>)
 800d582:	f7fb fbff 	bl	8008d84 <HAL_TIMEx_ConfigBreakDeadTime>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d001      	beq.n	800d590 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800d58c:	f000 f8c6 	bl	800d71c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800d590:	4803      	ldr	r0, [pc, #12]	; (800d5a0 <MX_TIM1_Init+0x100>)
 800d592:	f000 fb77 	bl	800dc84 <HAL_TIM_MspPostInit>

}
 800d596:	bf00      	nop
 800d598:	3748      	adds	r7, #72	; 0x48
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	2000072c 	.word	0x2000072c
 800d5a4:	40010000 	.word	0x40010000

0800d5a8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	607b      	str	r3, [r7, #4]
 800d5b2:	4b0c      	ldr	r3, [pc, #48]	; (800d5e4 <MX_DMA_Init+0x3c>)
 800d5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5b6:	4a0b      	ldr	r2, [pc, #44]	; (800d5e4 <MX_DMA_Init+0x3c>)
 800d5b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d5bc:	6313      	str	r3, [r2, #48]	; 0x30
 800d5be:	4b09      	ldr	r3, [pc, #36]	; (800d5e4 <MX_DMA_Init+0x3c>)
 800d5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d5c6:	607b      	str	r3, [r7, #4]
 800d5c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	2100      	movs	r1, #0
 800d5ce:	200f      	movs	r0, #15
 800d5d0:	f7f3 fd0f 	bl	8000ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800d5d4:	200f      	movs	r0, #15
 800d5d6:	f7f3 fd28 	bl	800102a <HAL_NVIC_EnableIRQ>

}
 800d5da:	bf00      	nop
 800d5dc:	3708      	adds	r7, #8
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	40023800 	.word	0x40023800

0800d5e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b08a      	sub	sp, #40	; 0x28
 800d5ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d5ee:	f107 0314 	add.w	r3, r7, #20
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	601a      	str	r2, [r3, #0]
 800d5f6:	605a      	str	r2, [r3, #4]
 800d5f8:	609a      	str	r2, [r3, #8]
 800d5fa:	60da      	str	r2, [r3, #12]
 800d5fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d5fe:	2300      	movs	r3, #0
 800d600:	613b      	str	r3, [r7, #16]
 800d602:	4b31      	ldr	r3, [pc, #196]	; (800d6c8 <MX_GPIO_Init+0xe0>)
 800d604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d606:	4a30      	ldr	r2, [pc, #192]	; (800d6c8 <MX_GPIO_Init+0xe0>)
 800d608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d60c:	6313      	str	r3, [r2, #48]	; 0x30
 800d60e:	4b2e      	ldr	r3, [pc, #184]	; (800d6c8 <MX_GPIO_Init+0xe0>)
 800d610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d616:	613b      	str	r3, [r7, #16]
 800d618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d61a:	2300      	movs	r3, #0
 800d61c:	60fb      	str	r3, [r7, #12]
 800d61e:	4b2a      	ldr	r3, [pc, #168]	; (800d6c8 <MX_GPIO_Init+0xe0>)
 800d620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d622:	4a29      	ldr	r2, [pc, #164]	; (800d6c8 <MX_GPIO_Init+0xe0>)
 800d624:	f043 0304 	orr.w	r3, r3, #4
 800d628:	6313      	str	r3, [r2, #48]	; 0x30
 800d62a:	4b27      	ldr	r3, [pc, #156]	; (800d6c8 <MX_GPIO_Init+0xe0>)
 800d62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d62e:	f003 0304 	and.w	r3, r3, #4
 800d632:	60fb      	str	r3, [r7, #12]
 800d634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d636:	2300      	movs	r3, #0
 800d638:	60bb      	str	r3, [r7, #8]
 800d63a:	4b23      	ldr	r3, [pc, #140]	; (800d6c8 <MX_GPIO_Init+0xe0>)
 800d63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d63e:	4a22      	ldr	r2, [pc, #136]	; (800d6c8 <MX_GPIO_Init+0xe0>)
 800d640:	f043 0302 	orr.w	r3, r3, #2
 800d644:	6313      	str	r3, [r2, #48]	; 0x30
 800d646:	4b20      	ldr	r3, [pc, #128]	; (800d6c8 <MX_GPIO_Init+0xe0>)
 800d648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d64a:	f003 0302 	and.w	r3, r3, #2
 800d64e:	60bb      	str	r3, [r7, #8]
 800d650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d652:	2300      	movs	r3, #0
 800d654:	607b      	str	r3, [r7, #4]
 800d656:	4b1c      	ldr	r3, [pc, #112]	; (800d6c8 <MX_GPIO_Init+0xe0>)
 800d658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d65a:	4a1b      	ldr	r2, [pc, #108]	; (800d6c8 <MX_GPIO_Init+0xe0>)
 800d65c:	f043 0301 	orr.w	r3, r3, #1
 800d660:	6313      	str	r3, [r2, #48]	; 0x30
 800d662:	4b19      	ldr	r3, [pc, #100]	; (800d6c8 <MX_GPIO_Init+0xe0>)
 800d664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d666:	f003 0301 	and.w	r3, r3, #1
 800d66a:	607b      	str	r3, [r7, #4]
 800d66c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d66e:	2300      	movs	r3, #0
 800d670:	603b      	str	r3, [r7, #0]
 800d672:	4b15      	ldr	r3, [pc, #84]	; (800d6c8 <MX_GPIO_Init+0xe0>)
 800d674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d676:	4a14      	ldr	r2, [pc, #80]	; (800d6c8 <MX_GPIO_Init+0xe0>)
 800d678:	f043 0308 	orr.w	r3, r3, #8
 800d67c:	6313      	str	r3, [r2, #48]	; 0x30
 800d67e:	4b12      	ldr	r3, [pc, #72]	; (800d6c8 <MX_GPIO_Init+0xe0>)
 800d680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d682:	f003 0308 	and.w	r3, r3, #8
 800d686:	603b      	str	r3, [r7, #0]
 800d688:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800d68a:	2380      	movs	r3, #128	; 0x80
 800d68c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d68e:	2301      	movs	r3, #1
 800d690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800d692:	2302      	movs	r3, #2
 800d694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d696:	2300      	movs	r3, #0
 800d698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d69a:	f107 0314 	add.w	r3, r7, #20
 800d69e:	4619      	mov	r1, r3
 800d6a0:	480a      	ldr	r0, [pc, #40]	; (800d6cc <MX_GPIO_Init+0xe4>)
 800d6a2:	f7f4 f8eb 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : CardDet_Pin */
  GPIO_InitStruct.Pin = CardDet_Pin;
 800d6a6:	2380      	movs	r3, #128	; 0x80
 800d6a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CardDet_GPIO_Port, &GPIO_InitStruct);
 800d6b2:	f107 0314 	add.w	r3, r7, #20
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	4805      	ldr	r0, [pc, #20]	; (800d6d0 <MX_GPIO_Init+0xe8>)
 800d6ba:	f7f4 f8df 	bl	800187c <HAL_GPIO_Init>

}
 800d6be:	bf00      	nop
 800d6c0:	3728      	adds	r7, #40	; 0x28
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	40023800 	.word	0x40023800
 800d6cc:	40020000 	.word	0x40020000
 800d6d0:	40020800 	.word	0x40020800

0800d6d4 <HAL_I2S_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s2)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
	if(hi2s2->Instance==I2S2)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a04      	ldr	r2, [pc, #16]	; (800d6f4 <HAL_I2S_TxCpltCallback+0x20>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d101      	bne.n	800d6ea <HAL_I2S_TxCpltCallback+0x16>
	{
		AudioPlay_TransferComplete_CallBack();
 800d6e6:	f7ff fb43 	bl	800cd70 <AudioPlay_TransferComplete_CallBack>
	}
}
 800d6ea:	bf00      	nop
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	40003800 	.word	0x40003800

0800d6f8 <HAL_I2S_TxHalfCpltCallback>:
//---------------------------------------------------------
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s2)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
	if(hi2s2->Instance==I2S2)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a04      	ldr	r2, [pc, #16]	; (800d718 <HAL_I2S_TxHalfCpltCallback+0x20>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d101      	bne.n	800d70e <HAL_I2S_TxHalfCpltCallback+0x16>
	{
		AudioPlay_HalfTransfer_CallBack();
 800d70a:	f7ff fb2b 	bl	800cd64 <AudioPlay_HalfTransfer_CallBack>
	}
}
 800d70e:	bf00      	nop
 800d710:	3708      	adds	r7, #8
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	40003800 	.word	0x40003800

0800d71c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d71c:	b480      	push	{r7}
 800d71e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800d720:	bf00      	nop
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
	...

0800d72c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	4603      	mov	r3, r0
 800d734:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d736:	4b0b      	ldr	r3, [pc, #44]	; (800d764 <SD_CheckStatus+0x38>)
 800d738:	2201      	movs	r2, #1
 800d73a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d73c:	f7ff fb80 	bl	800ce40 <BSP_SD_GetCardState>
 800d740:	4603      	mov	r3, r0
 800d742:	2b00      	cmp	r3, #0
 800d744:	d107      	bne.n	800d756 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d746:	4b07      	ldr	r3, [pc, #28]	; (800d764 <SD_CheckStatus+0x38>)
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	f023 0301 	bic.w	r3, r3, #1
 800d750:	b2da      	uxtb	r2, r3
 800d752:	4b04      	ldr	r3, [pc, #16]	; (800d764 <SD_CheckStatus+0x38>)
 800d754:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d756:	4b03      	ldr	r3, [pc, #12]	; (800d764 <SD_CheckStatus+0x38>)
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	b2db      	uxtb	r3, r3
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	20000124 	.word	0x20000124

0800d768 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	4603      	mov	r3, r0
 800d770:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800d772:	4b0b      	ldr	r3, [pc, #44]	; (800d7a0 <SD_initialize+0x38>)
 800d774:	2201      	movs	r2, #1
 800d776:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d778:	f7ff fb00 	bl	800cd7c <BSP_SD_Init>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d107      	bne.n	800d792 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d782:	79fb      	ldrb	r3, [r7, #7]
 800d784:	4618      	mov	r0, r3
 800d786:	f7ff ffd1 	bl	800d72c <SD_CheckStatus>
 800d78a:	4603      	mov	r3, r0
 800d78c:	461a      	mov	r2, r3
 800d78e:	4b04      	ldr	r3, [pc, #16]	; (800d7a0 <SD_initialize+0x38>)
 800d790:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d792:	4b03      	ldr	r3, [pc, #12]	; (800d7a0 <SD_initialize+0x38>)
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	b2db      	uxtb	r3, r3
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3708      	adds	r7, #8
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	20000124 	.word	0x20000124

0800d7a4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d7ae:	79fb      	ldrb	r3, [r7, #7]
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7ff ffbb 	bl	800d72c <SD_CheckStatus>
 800d7b6:	4603      	mov	r3, r0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b086      	sub	sp, #24
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	60b9      	str	r1, [r7, #8]
 800d7c8:	607a      	str	r2, [r7, #4]
 800d7ca:	603b      	str	r3, [r7, #0]
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d7d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d7d8:	683a      	ldr	r2, [r7, #0]
 800d7da:	6879      	ldr	r1, [r7, #4]
 800d7dc:	68b8      	ldr	r0, [r7, #8]
 800d7de:	f7ff faf3 	bl	800cdc8 <BSP_SD_ReadBlocks>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d107      	bne.n	800d7f8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d7e8:	bf00      	nop
 800d7ea:	f7ff fb29 	bl	800ce40 <BSP_SD_GetCardState>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d1fa      	bne.n	800d7ea <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d7f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3718      	adds	r7, #24
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b086      	sub	sp, #24
 800d806:	af00      	add	r7, sp, #0
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	607a      	str	r2, [r7, #4]
 800d80c:	603b      	str	r3, [r7, #0]
 800d80e:	4603      	mov	r3, r0
 800d810:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d812:	2301      	movs	r3, #1
 800d814:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d816:	f04f 33ff 	mov.w	r3, #4294967295
 800d81a:	683a      	ldr	r2, [r7, #0]
 800d81c:	6879      	ldr	r1, [r7, #4]
 800d81e:	68b8      	ldr	r0, [r7, #8]
 800d820:	f7ff faf0 	bl	800ce04 <BSP_SD_WriteBlocks>
 800d824:	4603      	mov	r3, r0
 800d826:	2b00      	cmp	r3, #0
 800d828:	d107      	bne.n	800d83a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d82a:	bf00      	nop
 800d82c:	f7ff fb08 	bl	800ce40 <BSP_SD_GetCardState>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d1fa      	bne.n	800d82c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d836:	2300      	movs	r3, #0
 800d838:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d83a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3718      	adds	r7, #24
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b08c      	sub	sp, #48	; 0x30
 800d848:	af00      	add	r7, sp, #0
 800d84a:	4603      	mov	r3, r0
 800d84c:	603a      	str	r2, [r7, #0]
 800d84e:	71fb      	strb	r3, [r7, #7]
 800d850:	460b      	mov	r3, r1
 800d852:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d854:	2301      	movs	r3, #1
 800d856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d85a:	4b25      	ldr	r3, [pc, #148]	; (800d8f0 <SD_ioctl+0xac>)
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	f003 0301 	and.w	r3, r3, #1
 800d864:	2b00      	cmp	r3, #0
 800d866:	d001      	beq.n	800d86c <SD_ioctl+0x28>
 800d868:	2303      	movs	r3, #3
 800d86a:	e03c      	b.n	800d8e6 <SD_ioctl+0xa2>

  switch (cmd)
 800d86c:	79bb      	ldrb	r3, [r7, #6]
 800d86e:	2b03      	cmp	r3, #3
 800d870:	d834      	bhi.n	800d8dc <SD_ioctl+0x98>
 800d872:	a201      	add	r2, pc, #4	; (adr r2, 800d878 <SD_ioctl+0x34>)
 800d874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d878:	0800d889 	.word	0x0800d889
 800d87c:	0800d891 	.word	0x0800d891
 800d880:	0800d8a9 	.word	0x0800d8a9
 800d884:	0800d8c3 	.word	0x0800d8c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d888:	2300      	movs	r3, #0
 800d88a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d88e:	e028      	b.n	800d8e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d890:	f107 030c 	add.w	r3, r7, #12
 800d894:	4618      	mov	r0, r3
 800d896:	f7ff fae3 	bl	800ce60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d89a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d8a6:	e01c      	b.n	800d8e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d8a8:	f107 030c 	add.w	r3, r7, #12
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7ff fad7 	bl	800ce60 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b4:	b29a      	uxth	r2, r3
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d8c0:	e00f      	b.n	800d8e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d8c2:	f107 030c 	add.w	r3, r7, #12
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7ff faca 	bl	800ce60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ce:	0a5a      	lsrs	r2, r3, #9
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d8da:	e002      	b.n	800d8e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d8dc:	2304      	movs	r3, #4
 800d8de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d8e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3730      	adds	r7, #48	; 0x30
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	20000124 	.word	0x20000124

0800d8f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	607b      	str	r3, [r7, #4]
 800d8fe:	4b10      	ldr	r3, [pc, #64]	; (800d940 <HAL_MspInit+0x4c>)
 800d900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d902:	4a0f      	ldr	r2, [pc, #60]	; (800d940 <HAL_MspInit+0x4c>)
 800d904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d908:	6453      	str	r3, [r2, #68]	; 0x44
 800d90a:	4b0d      	ldr	r3, [pc, #52]	; (800d940 <HAL_MspInit+0x4c>)
 800d90c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d90e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d912:	607b      	str	r3, [r7, #4]
 800d914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d916:	2300      	movs	r3, #0
 800d918:	603b      	str	r3, [r7, #0]
 800d91a:	4b09      	ldr	r3, [pc, #36]	; (800d940 <HAL_MspInit+0x4c>)
 800d91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d91e:	4a08      	ldr	r2, [pc, #32]	; (800d940 <HAL_MspInit+0x4c>)
 800d920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d924:	6413      	str	r3, [r2, #64]	; 0x40
 800d926:	4b06      	ldr	r3, [pc, #24]	; (800d940 <HAL_MspInit+0x4c>)
 800d928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d92a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d92e:	603b      	str	r3, [r7, #0]
 800d930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d932:	bf00      	nop
 800d934:	370c      	adds	r7, #12
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop
 800d940:	40023800 	.word	0x40023800

0800d944 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b08a      	sub	sp, #40	; 0x28
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d94c:	f107 0314 	add.w	r3, r7, #20
 800d950:	2200      	movs	r2, #0
 800d952:	601a      	str	r2, [r3, #0]
 800d954:	605a      	str	r2, [r3, #4]
 800d956:	609a      	str	r2, [r3, #8]
 800d958:	60da      	str	r2, [r3, #12]
 800d95a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4a1d      	ldr	r2, [pc, #116]	; (800d9d8 <HAL_I2C_MspInit+0x94>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d133      	bne.n	800d9ce <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d966:	2300      	movs	r3, #0
 800d968:	613b      	str	r3, [r7, #16]
 800d96a:	4b1c      	ldr	r3, [pc, #112]	; (800d9dc <HAL_I2C_MspInit+0x98>)
 800d96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d96e:	4a1b      	ldr	r2, [pc, #108]	; (800d9dc <HAL_I2C_MspInit+0x98>)
 800d970:	f043 0302 	orr.w	r3, r3, #2
 800d974:	6313      	str	r3, [r2, #48]	; 0x30
 800d976:	4b19      	ldr	r3, [pc, #100]	; (800d9dc <HAL_I2C_MspInit+0x98>)
 800d978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d97a:	f003 0302 	and.w	r3, r3, #2
 800d97e:	613b      	str	r3, [r7, #16]
 800d980:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d982:	23c0      	movs	r3, #192	; 0xc0
 800d984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d986:	2312      	movs	r3, #18
 800d988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d98a:	2301      	movs	r3, #1
 800d98c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d98e:	2300      	movs	r3, #0
 800d990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800d992:	2304      	movs	r3, #4
 800d994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d996:	f107 0314 	add.w	r3, r7, #20
 800d99a:	4619      	mov	r1, r3
 800d99c:	4810      	ldr	r0, [pc, #64]	; (800d9e0 <HAL_I2C_MspInit+0x9c>)
 800d99e:	f7f3 ff6d 	bl	800187c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	60fb      	str	r3, [r7, #12]
 800d9a6:	4b0d      	ldr	r3, [pc, #52]	; (800d9dc <HAL_I2C_MspInit+0x98>)
 800d9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9aa:	4a0c      	ldr	r2, [pc, #48]	; (800d9dc <HAL_I2C_MspInit+0x98>)
 800d9ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d9b0:	6413      	str	r3, [r2, #64]	; 0x40
 800d9b2:	4b0a      	ldr	r3, [pc, #40]	; (800d9dc <HAL_I2C_MspInit+0x98>)
 800d9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d9ba:	60fb      	str	r3, [r7, #12]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800d9be:	2200      	movs	r2, #0
 800d9c0:	2100      	movs	r1, #0
 800d9c2:	201f      	movs	r0, #31
 800d9c4:	f7f3 fb15 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800d9c8:	201f      	movs	r0, #31
 800d9ca:	f7f3 fb2e 	bl	800102a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800d9ce:	bf00      	nop
 800d9d0:	3728      	adds	r7, #40	; 0x28
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	40005400 	.word	0x40005400
 800d9dc:	40023800 	.word	0x40023800
 800d9e0:	40020400 	.word	0x40020400

0800d9e4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b08a      	sub	sp, #40	; 0x28
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9ec:	f107 0314 	add.w	r3, r7, #20
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	601a      	str	r2, [r3, #0]
 800d9f4:	605a      	str	r2, [r3, #4]
 800d9f6:	609a      	str	r2, [r3, #8]
 800d9f8:	60da      	str	r2, [r3, #12]
 800d9fa:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a52      	ldr	r2, [pc, #328]	; (800db4c <HAL_I2S_MspInit+0x168>)
 800da02:	4293      	cmp	r3, r2
 800da04:	f040 809d 	bne.w	800db42 <HAL_I2S_MspInit+0x15e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800da08:	2300      	movs	r3, #0
 800da0a:	613b      	str	r3, [r7, #16]
 800da0c:	4b50      	ldr	r3, [pc, #320]	; (800db50 <HAL_I2S_MspInit+0x16c>)
 800da0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da10:	4a4f      	ldr	r2, [pc, #316]	; (800db50 <HAL_I2S_MspInit+0x16c>)
 800da12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800da16:	6413      	str	r3, [r2, #64]	; 0x40
 800da18:	4b4d      	ldr	r3, [pc, #308]	; (800db50 <HAL_I2S_MspInit+0x16c>)
 800da1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da20:	613b      	str	r3, [r7, #16]
 800da22:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800da24:	2300      	movs	r3, #0
 800da26:	60fb      	str	r3, [r7, #12]
 800da28:	4b49      	ldr	r3, [pc, #292]	; (800db50 <HAL_I2S_MspInit+0x16c>)
 800da2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da2c:	4a48      	ldr	r2, [pc, #288]	; (800db50 <HAL_I2S_MspInit+0x16c>)
 800da2e:	f043 0304 	orr.w	r3, r3, #4
 800da32:	6313      	str	r3, [r2, #48]	; 0x30
 800da34:	4b46      	ldr	r3, [pc, #280]	; (800db50 <HAL_I2S_MspInit+0x16c>)
 800da36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da38:	f003 0304 	and.w	r3, r3, #4
 800da3c:	60fb      	str	r3, [r7, #12]
 800da3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800da40:	2300      	movs	r3, #0
 800da42:	60bb      	str	r3, [r7, #8]
 800da44:	4b42      	ldr	r3, [pc, #264]	; (800db50 <HAL_I2S_MspInit+0x16c>)
 800da46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da48:	4a41      	ldr	r2, [pc, #260]	; (800db50 <HAL_I2S_MspInit+0x16c>)
 800da4a:	f043 0302 	orr.w	r3, r3, #2
 800da4e:	6313      	str	r3, [r2, #48]	; 0x30
 800da50:	4b3f      	ldr	r3, [pc, #252]	; (800db50 <HAL_I2S_MspInit+0x16c>)
 800da52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da54:	f003 0302 	and.w	r3, r3, #2
 800da58:	60bb      	str	r3, [r7, #8]
 800da5a:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800da5c:	2308      	movs	r3, #8
 800da5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da60:	2302      	movs	r3, #2
 800da62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da64:	2300      	movs	r3, #0
 800da66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800da68:	2300      	movs	r3, #0
 800da6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800da6c:	2305      	movs	r3, #5
 800da6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800da70:	f107 0314 	add.w	r3, r7, #20
 800da74:	4619      	mov	r1, r3
 800da76:	4837      	ldr	r0, [pc, #220]	; (800db54 <HAL_I2S_MspInit+0x170>)
 800da78:	f7f3 ff00 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800da7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800da80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da82:	2302      	movs	r3, #2
 800da84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da86:	2300      	movs	r3, #0
 800da88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800da8a:	2300      	movs	r3, #0
 800da8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800da8e:	2305      	movs	r3, #5
 800da90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800da92:	f107 0314 	add.w	r3, r7, #20
 800da96:	4619      	mov	r1, r3
 800da98:	482f      	ldr	r0, [pc, #188]	; (800db58 <HAL_I2S_MspInit+0x174>)
 800da9a:	f7f3 feef 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800da9e:	2340      	movs	r3, #64	; 0x40
 800daa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800daa2:	2302      	movs	r3, #2
 800daa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800daa6:	2300      	movs	r3, #0
 800daa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800daaa:	2301      	movs	r3, #1
 800daac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800daae:	2305      	movs	r3, #5
 800dab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dab2:	f107 0314 	add.w	r3, r7, #20
 800dab6:	4619      	mov	r1, r3
 800dab8:	4826      	ldr	r0, [pc, #152]	; (800db54 <HAL_I2S_MspInit+0x170>)
 800daba:	f7f3 fedf 	bl	800187c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800dabe:	4b27      	ldr	r3, [pc, #156]	; (800db5c <HAL_I2S_MspInit+0x178>)
 800dac0:	4a27      	ldr	r2, [pc, #156]	; (800db60 <HAL_I2S_MspInit+0x17c>)
 800dac2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800dac4:	4b25      	ldr	r3, [pc, #148]	; (800db5c <HAL_I2S_MspInit+0x178>)
 800dac6:	2200      	movs	r2, #0
 800dac8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800daca:	4b24      	ldr	r3, [pc, #144]	; (800db5c <HAL_I2S_MspInit+0x178>)
 800dacc:	2240      	movs	r2, #64	; 0x40
 800dace:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800dad0:	4b22      	ldr	r3, [pc, #136]	; (800db5c <HAL_I2S_MspInit+0x178>)
 800dad2:	2200      	movs	r2, #0
 800dad4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800dad6:	4b21      	ldr	r3, [pc, #132]	; (800db5c <HAL_I2S_MspInit+0x178>)
 800dad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dadc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800dade:	4b1f      	ldr	r3, [pc, #124]	; (800db5c <HAL_I2S_MspInit+0x178>)
 800dae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dae4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800dae6:	4b1d      	ldr	r3, [pc, #116]	; (800db5c <HAL_I2S_MspInit+0x178>)
 800dae8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800daec:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800daee:	4b1b      	ldr	r3, [pc, #108]	; (800db5c <HAL_I2S_MspInit+0x178>)
 800daf0:	2200      	movs	r2, #0
 800daf2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800daf4:	4b19      	ldr	r3, [pc, #100]	; (800db5c <HAL_I2S_MspInit+0x178>)
 800daf6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800dafa:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800dafc:	4b17      	ldr	r3, [pc, #92]	; (800db5c <HAL_I2S_MspInit+0x178>)
 800dafe:	2204      	movs	r2, #4
 800db00:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800db02:	4b16      	ldr	r3, [pc, #88]	; (800db5c <HAL_I2S_MspInit+0x178>)
 800db04:	2203      	movs	r2, #3
 800db06:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_INC8;
 800db08:	4b14      	ldr	r3, [pc, #80]	; (800db5c <HAL_I2S_MspInit+0x178>)
 800db0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800db0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800db10:	4b12      	ldr	r3, [pc, #72]	; (800db5c <HAL_I2S_MspInit+0x178>)
 800db12:	2200      	movs	r2, #0
 800db14:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800db16:	4811      	ldr	r0, [pc, #68]	; (800db5c <HAL_I2S_MspInit+0x178>)
 800db18:	f7f3 faa2 	bl	8001060 <HAL_DMA_Init>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d001      	beq.n	800db26 <HAL_I2S_MspInit+0x142>
    {
      Error_Handler();
 800db22:	f7ff fdfb 	bl	800d71c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	4a0c      	ldr	r2, [pc, #48]	; (800db5c <HAL_I2S_MspInit+0x178>)
 800db2a:	639a      	str	r2, [r3, #56]	; 0x38
 800db2c:	4a0b      	ldr	r2, [pc, #44]	; (800db5c <HAL_I2S_MspInit+0x178>)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800db32:	2200      	movs	r2, #0
 800db34:	2100      	movs	r1, #0
 800db36:	2024      	movs	r0, #36	; 0x24
 800db38:	f7f3 fa5b 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800db3c:	2024      	movs	r0, #36	; 0x24
 800db3e:	f7f3 fa74 	bl	800102a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800db42:	bf00      	nop
 800db44:	3728      	adds	r7, #40	; 0x28
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	40003800 	.word	0x40003800
 800db50:	40023800 	.word	0x40023800
 800db54:	40020800 	.word	0x40020800
 800db58:	40020400 	.word	0x40020400
 800db5c:	200007f0 	.word	0x200007f0
 800db60:	40026070 	.word	0x40026070

0800db64 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b08a      	sub	sp, #40	; 0x28
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db6c:	f107 0314 	add.w	r3, r7, #20
 800db70:	2200      	movs	r2, #0
 800db72:	601a      	str	r2, [r3, #0]
 800db74:	605a      	str	r2, [r3, #4]
 800db76:	609a      	str	r2, [r3, #8]
 800db78:	60da      	str	r2, [r3, #12]
 800db7a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4a28      	ldr	r2, [pc, #160]	; (800dc24 <HAL_SD_MspInit+0xc0>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d14a      	bne.n	800dc1c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800db86:	2300      	movs	r3, #0
 800db88:	613b      	str	r3, [r7, #16]
 800db8a:	4b27      	ldr	r3, [pc, #156]	; (800dc28 <HAL_SD_MspInit+0xc4>)
 800db8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db8e:	4a26      	ldr	r2, [pc, #152]	; (800dc28 <HAL_SD_MspInit+0xc4>)
 800db90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800db94:	6453      	str	r3, [r2, #68]	; 0x44
 800db96:	4b24      	ldr	r3, [pc, #144]	; (800dc28 <HAL_SD_MspInit+0xc4>)
 800db98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db9e:	613b      	str	r3, [r7, #16]
 800dba0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dba2:	2300      	movs	r3, #0
 800dba4:	60fb      	str	r3, [r7, #12]
 800dba6:	4b20      	ldr	r3, [pc, #128]	; (800dc28 <HAL_SD_MspInit+0xc4>)
 800dba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbaa:	4a1f      	ldr	r2, [pc, #124]	; (800dc28 <HAL_SD_MspInit+0xc4>)
 800dbac:	f043 0304 	orr.w	r3, r3, #4
 800dbb0:	6313      	str	r3, [r2, #48]	; 0x30
 800dbb2:	4b1d      	ldr	r3, [pc, #116]	; (800dc28 <HAL_SD_MspInit+0xc4>)
 800dbb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbb6:	f003 0304 	and.w	r3, r3, #4
 800dbba:	60fb      	str	r3, [r7, #12]
 800dbbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	60bb      	str	r3, [r7, #8]
 800dbc2:	4b19      	ldr	r3, [pc, #100]	; (800dc28 <HAL_SD_MspInit+0xc4>)
 800dbc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbc6:	4a18      	ldr	r2, [pc, #96]	; (800dc28 <HAL_SD_MspInit+0xc4>)
 800dbc8:	f043 0308 	orr.w	r3, r3, #8
 800dbcc:	6313      	str	r3, [r2, #48]	; 0x30
 800dbce:	4b16      	ldr	r3, [pc, #88]	; (800dc28 <HAL_SD_MspInit+0xc4>)
 800dbd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbd2:	f003 0308 	and.w	r3, r3, #8
 800dbd6:	60bb      	str	r3, [r7, #8]
 800dbd8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800dbda:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800dbde:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbe0:	2302      	movs	r3, #2
 800dbe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dbe8:	2303      	movs	r3, #3
 800dbea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800dbec:	230c      	movs	r3, #12
 800dbee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dbf0:	f107 0314 	add.w	r3, r7, #20
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	480d      	ldr	r0, [pc, #52]	; (800dc2c <HAL_SD_MspInit+0xc8>)
 800dbf8:	f7f3 fe40 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800dbfc:	2304      	movs	r3, #4
 800dbfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc00:	2302      	movs	r3, #2
 800dc02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc04:	2300      	movs	r3, #0
 800dc06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc08:	2303      	movs	r3, #3
 800dc0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800dc0c:	230c      	movs	r3, #12
 800dc0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800dc10:	f107 0314 	add.w	r3, r7, #20
 800dc14:	4619      	mov	r1, r3
 800dc16:	4806      	ldr	r0, [pc, #24]	; (800dc30 <HAL_SD_MspInit+0xcc>)
 800dc18:	f7f3 fe30 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800dc1c:	bf00      	nop
 800dc1e:	3728      	adds	r7, #40	; 0x28
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	40012c00 	.word	0x40012c00
 800dc28:	40023800 	.word	0x40023800
 800dc2c:	40020800 	.word	0x40020800
 800dc30:	40020c00 	.word	0x40020c00

0800dc34 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a0e      	ldr	r2, [pc, #56]	; (800dc7c <HAL_TIM_PWM_MspInit+0x48>)
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d115      	bne.n	800dc72 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800dc46:	2300      	movs	r3, #0
 800dc48:	60fb      	str	r3, [r7, #12]
 800dc4a:	4b0d      	ldr	r3, [pc, #52]	; (800dc80 <HAL_TIM_PWM_MspInit+0x4c>)
 800dc4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc4e:	4a0c      	ldr	r2, [pc, #48]	; (800dc80 <HAL_TIM_PWM_MspInit+0x4c>)
 800dc50:	f043 0301 	orr.w	r3, r3, #1
 800dc54:	6453      	str	r3, [r2, #68]	; 0x44
 800dc56:	4b0a      	ldr	r3, [pc, #40]	; (800dc80 <HAL_TIM_PWM_MspInit+0x4c>)
 800dc58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc5a:	f003 0301 	and.w	r3, r3, #1
 800dc5e:	60fb      	str	r3, [r7, #12]
 800dc60:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800dc62:	2200      	movs	r2, #0
 800dc64:	2100      	movs	r1, #0
 800dc66:	201b      	movs	r0, #27
 800dc68:	f7f3 f9c3 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800dc6c:	201b      	movs	r0, #27
 800dc6e:	f7f3 f9dc 	bl	800102a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800dc72:	bf00      	nop
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	40010000 	.word	0x40010000
 800dc80:	40023800 	.word	0x40023800

0800dc84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b088      	sub	sp, #32
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc8c:	f107 030c 	add.w	r3, r7, #12
 800dc90:	2200      	movs	r2, #0
 800dc92:	601a      	str	r2, [r3, #0]
 800dc94:	605a      	str	r2, [r3, #4]
 800dc96:	609a      	str	r2, [r3, #8]
 800dc98:	60da      	str	r2, [r3, #12]
 800dc9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a12      	ldr	r2, [pc, #72]	; (800dcec <HAL_TIM_MspPostInit+0x68>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d11e      	bne.n	800dce4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dca6:	2300      	movs	r3, #0
 800dca8:	60bb      	str	r3, [r7, #8]
 800dcaa:	4b11      	ldr	r3, [pc, #68]	; (800dcf0 <HAL_TIM_MspPostInit+0x6c>)
 800dcac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcae:	4a10      	ldr	r2, [pc, #64]	; (800dcf0 <HAL_TIM_MspPostInit+0x6c>)
 800dcb0:	f043 0302 	orr.w	r3, r3, #2
 800dcb4:	6313      	str	r3, [r2, #48]	; 0x30
 800dcb6:	4b0e      	ldr	r3, [pc, #56]	; (800dcf0 <HAL_TIM_MspPostInit+0x6c>)
 800dcb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcba:	f003 0302 	and.w	r3, r3, #2
 800dcbe:	60bb      	str	r3, [r7, #8]
 800dcc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PB13     ------> TIM1_CH1N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800dcc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dcc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcc8:	2302      	movs	r3, #2
 800dcca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dccc:	2300      	movs	r3, #0
 800dcce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dcd8:	f107 030c 	add.w	r3, r7, #12
 800dcdc:	4619      	mov	r1, r3
 800dcde:	4805      	ldr	r0, [pc, #20]	; (800dcf4 <HAL_TIM_MspPostInit+0x70>)
 800dce0:	f7f3 fdcc 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800dce4:	bf00      	nop
 800dce6:	3720      	adds	r7, #32
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	40010000 	.word	0x40010000
 800dcf0:	40023800 	.word	0x40023800
 800dcf4:	40020400 	.word	0x40020400

0800dcf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800dcfc:	bf00      	nop
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd04:	4770      	bx	lr

0800dd06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800dd06:	b480      	push	{r7}
 800dd08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800dd0a:	e7fe      	b.n	800dd0a <HardFault_Handler+0x4>

0800dd0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800dd10:	e7fe      	b.n	800dd10 <MemManage_Handler+0x4>

0800dd12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800dd12:	b480      	push	{r7}
 800dd14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800dd16:	e7fe      	b.n	800dd16 <BusFault_Handler+0x4>

0800dd18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800dd1c:	e7fe      	b.n	800dd1c <UsageFault_Handler+0x4>

0800dd1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800dd1e:	b480      	push	{r7}
 800dd20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800dd22:	bf00      	nop
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr

0800dd2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800dd30:	bf00      	nop
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr

0800dd3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800dd3a:	b480      	push	{r7}
 800dd3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800dd3e:	bf00      	nop
 800dd40:	46bd      	mov	sp, r7
 800dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd46:	4770      	bx	lr

0800dd48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800dd4c:	f7f3 f834 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800dd50:	bf00      	nop
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800dd58:	4802      	ldr	r0, [pc, #8]	; (800dd64 <DMA1_Stream4_IRQHandler+0x10>)
 800dd5a:	f7f3 fb19 	bl	8001390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800dd5e:	bf00      	nop
 800dd60:	bd80      	pop	{r7, pc}
 800dd62:	bf00      	nop
 800dd64:	200007f0 	.word	0x200007f0

0800dd68 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800dd6c:	4802      	ldr	r0, [pc, #8]	; (800dd78 <TIM1_CC_IRQHandler+0x10>)
 800dd6e:	f7fa fb64 	bl	800843a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800dd72:	bf00      	nop
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	2000072c 	.word	0x2000072c

0800dd7c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800dd80:	4802      	ldr	r0, [pc, #8]	; (800dd8c <I2C1_EV_IRQHandler+0x10>)
 800dd82:	f7f4 fc9f 	bl	80026c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800dd86:	bf00      	nop
 800dd88:	bd80      	pop	{r7, pc}
 800dd8a:	bf00      	nop
 800dd8c:	200006cc 	.word	0x200006cc

0800dd90 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 800dd94:	4802      	ldr	r0, [pc, #8]	; (800dda0 <SPI2_IRQHandler+0x10>)
 800dd96:	f7f6 fe95 	bl	8004ac4 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800dd9a:	bf00      	nop
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	bf00      	nop
 800dda0:	20000850 	.word	0x20000850

0800dda4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800dda8:	4802      	ldr	r0, [pc, #8]	; (800ddb4 <OTG_FS_IRQHandler+0x10>)
 800ddaa:	f7f7 fbcb 	bl	8005544 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800ddae:	bf00      	nop
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	20000b70 	.word	0x20000b70

0800ddb8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b083      	sub	sp, #12
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800ddc0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800ddc4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800ddc8:	f003 0301 	and.w	r3, r3, #1
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d013      	beq.n	800ddf8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800ddd0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800ddd4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800ddd8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d00b      	beq.n	800ddf8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800dde0:	e000      	b.n	800dde4 <ITM_SendChar+0x2c>
    {
      __NOP();
 800dde2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800dde4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d0f9      	beq.n	800dde2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800ddee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800ddf2:	687a      	ldr	r2, [r7, #4]
 800ddf4:	b2d2      	uxtb	r2, r2
 800ddf6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800ddf8:	687b      	ldr	r3, [r7, #4]
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	370c      	adds	r7, #12
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr

0800de06 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800de06:	b580      	push	{r7, lr}
 800de08:	b086      	sub	sp, #24
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	60f8      	str	r0, [r7, #12]
 800de0e:	60b9      	str	r1, [r7, #8]
 800de10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800de12:	2300      	movs	r3, #0
 800de14:	617b      	str	r3, [r7, #20]
 800de16:	e00a      	b.n	800de2e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800de18:	f3af 8000 	nop.w
 800de1c:	4601      	mov	r1, r0
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	1c5a      	adds	r2, r3, #1
 800de22:	60ba      	str	r2, [r7, #8]
 800de24:	b2ca      	uxtb	r2, r1
 800de26:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	3301      	adds	r3, #1
 800de2c:	617b      	str	r3, [r7, #20]
 800de2e:	697a      	ldr	r2, [r7, #20]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	429a      	cmp	r2, r3
 800de34:	dbf0      	blt.n	800de18 <_read+0x12>
	}

return len;
 800de36:	687b      	ldr	r3, [r7, #4]
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3718      	adds	r7, #24
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <_write>:


int _write ( int file, char *ptr, int len )
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b086      	sub	sp, #24
 800de44:	af00      	add	r7, sp, #0
 800de46:	60f8      	str	r0, [r7, #12]
 800de48:	60b9      	str	r1, [r7, #8]
 800de4a:	607a      	str	r2, [r7, #4]
  int i = 0;
 800de4c:	2300      	movs	r3, #0
 800de4e:	617b      	str	r3, [r7, #20]
  for ( i = 0; i < len; i++ )
 800de50:	2300      	movs	r3, #0
 800de52:	617b      	str	r3, [r7, #20]
 800de54:	e009      	b.n	800de6a <_write+0x2a>
    ITM_SendChar ( *ptr++ );
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	1c5a      	adds	r2, r3, #1
 800de5a:	60ba      	str	r2, [r7, #8]
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	4618      	mov	r0, r3
 800de60:	f7ff ffaa 	bl	800ddb8 <ITM_SendChar>
  for ( i = 0; i < len; i++ )
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	3301      	adds	r3, #1
 800de68:	617b      	str	r3, [r7, #20]
 800de6a:	697a      	ldr	r2, [r7, #20]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	429a      	cmp	r2, r3
 800de70:	dbf1      	blt.n	800de56 <_write+0x16>
  return len;
 800de72:	687b      	ldr	r3, [r7, #4]
}
 800de74:	4618      	mov	r0, r3
 800de76:	3718      	adds	r7, #24
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <_close>:
}

*/

int _close(int file)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b083      	sub	sp, #12
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
	return -1;
 800de84:	f04f 33ff 	mov.w	r3, #4294967295
}
 800de88:	4618      	mov	r0, r3
 800de8a:	370c      	adds	r7, #12
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr

0800de94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800de94:	b480      	push	{r7}
 800de96:	b083      	sub	sp, #12
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800dea4:	605a      	str	r2, [r3, #4]
	return 0;
 800dea6:	2300      	movs	r3, #0
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	370c      	adds	r7, #12
 800deac:	46bd      	mov	sp, r7
 800deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb2:	4770      	bx	lr

0800deb4 <_isatty>:

int _isatty(int file)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b083      	sub	sp, #12
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
	return 1;
 800debc:	2301      	movs	r3, #1
}
 800debe:	4618      	mov	r0, r3
 800dec0:	370c      	adds	r7, #12
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr

0800deca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800deca:	b480      	push	{r7}
 800decc:	b085      	sub	sp, #20
 800dece:	af00      	add	r7, sp, #0
 800ded0:	60f8      	str	r0, [r7, #12]
 800ded2:	60b9      	str	r1, [r7, #8]
 800ded4:	607a      	str	r2, [r7, #4]
	return 0;
 800ded6:	2300      	movs	r3, #0
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3714      	adds	r7, #20
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr

0800dee4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800deec:	4b11      	ldr	r3, [pc, #68]	; (800df34 <_sbrk+0x50>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d102      	bne.n	800defa <_sbrk+0x16>
		heap_end = &end;
 800def4:	4b0f      	ldr	r3, [pc, #60]	; (800df34 <_sbrk+0x50>)
 800def6:	4a10      	ldr	r2, [pc, #64]	; (800df38 <_sbrk+0x54>)
 800def8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800defa:	4b0e      	ldr	r3, [pc, #56]	; (800df34 <_sbrk+0x50>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800df00:	4b0c      	ldr	r3, [pc, #48]	; (800df34 <_sbrk+0x50>)
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	4413      	add	r3, r2
 800df08:	466a      	mov	r2, sp
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d907      	bls.n	800df1e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800df0e:	f000 fe23 	bl	800eb58 <__errno>
 800df12:	4602      	mov	r2, r0
 800df14:	230c      	movs	r3, #12
 800df16:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800df18:	f04f 33ff 	mov.w	r3, #4294967295
 800df1c:	e006      	b.n	800df2c <_sbrk+0x48>
	}

	heap_end += incr;
 800df1e:	4b05      	ldr	r3, [pc, #20]	; (800df34 <_sbrk+0x50>)
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	4413      	add	r3, r2
 800df26:	4a03      	ldr	r2, [pc, #12]	; (800df34 <_sbrk+0x50>)
 800df28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800df2a:	68fb      	ldr	r3, [r7, #12]
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3710      	adds	r7, #16
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}
 800df34:	2000023c 	.word	0x2000023c
 800df38:	20001180 	.word	0x20001180

0800df3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800df3c:	b480      	push	{r7}
 800df3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800df40:	4b08      	ldr	r3, [pc, #32]	; (800df64 <SystemInit+0x28>)
 800df42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df46:	4a07      	ldr	r2, [pc, #28]	; (800df64 <SystemInit+0x28>)
 800df48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800df4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800df50:	4b04      	ldr	r3, [pc, #16]	; (800df64 <SystemInit+0x28>)
 800df52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800df56:	609a      	str	r2, [r3, #8]
#endif
}
 800df58:	bf00      	nop
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr
 800df62:	bf00      	nop
 800df64:	e000ed00 	.word	0xe000ed00

0800df68 <tlv_init>:
extern I2C_HandleTypeDef hi2c1;
static int inited=0;
uint8_t i2cData[7];

int tlv_init()
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af02      	add	r7, sp, #8

	uint8_t regs[2]={0x00,0x02}; // no int, lp=0,fast=1; master controlled mode
 800df6e:	2300      	movs	r3, #0
 800df70:	713b      	strb	r3, [r7, #4]
 800df72:	2302      	movs	r3, #2
 800df74:	717b      	strb	r3, [r7, #5]


	for (addr=2; addr<255; addr++)
 800df76:	4b1c      	ldr	r3, [pc, #112]	; (800dfe8 <tlv_init+0x80>)
 800df78:	2202      	movs	r2, #2
 800df7a:	801a      	strh	r2, [r3, #0]
 800df7c:	e014      	b.n	800dfa8 <tlv_init+0x40>
	{
		if (HAL_I2C_Master_Transmit(&hi2c1, addr, regs, 2, 5) ==HAL_OK)
 800df7e:	4b1a      	ldr	r3, [pc, #104]	; (800dfe8 <tlv_init+0x80>)
 800df80:	8819      	ldrh	r1, [r3, #0]
 800df82:	1d3a      	adds	r2, r7, #4
 800df84:	2305      	movs	r3, #5
 800df86:	9300      	str	r3, [sp, #0]
 800df88:	2302      	movs	r3, #2
 800df8a:	4818      	ldr	r0, [pc, #96]	; (800dfec <tlv_init+0x84>)
 800df8c:	f7f3 ff48 	bl	8001e20 <HAL_I2C_Master_Transmit>
 800df90:	4603      	mov	r3, r0
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00d      	beq.n	800dfb2 <tlv_init+0x4a>
		{
			break;
		}
		HAL_Delay(5);
 800df96:	2005      	movs	r0, #5
 800df98:	f7f2 ff2e 	bl	8000df8 <HAL_Delay>
	for (addr=2; addr<255; addr++)
 800df9c:	4b12      	ldr	r3, [pc, #72]	; (800dfe8 <tlv_init+0x80>)
 800df9e:	881b      	ldrh	r3, [r3, #0]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	b29a      	uxth	r2, r3
 800dfa4:	4b10      	ldr	r3, [pc, #64]	; (800dfe8 <tlv_init+0x80>)
 800dfa6:	801a      	strh	r2, [r3, #0]
 800dfa8:	4b0f      	ldr	r3, [pc, #60]	; (800dfe8 <tlv_init+0x80>)
 800dfaa:	881b      	ldrh	r3, [r3, #0]
 800dfac:	2bfe      	cmp	r3, #254	; 0xfe
 800dfae:	d9e6      	bls.n	800df7e <tlv_init+0x16>
 800dfb0:	e000      	b.n	800dfb4 <tlv_init+0x4c>
			break;
 800dfb2:	bf00      	nop
	}

	//uint8_t regs[2]={0x00,0x02}; // no int, lp=0,fast=1; master controlled mode
	//HAL_I2C_Master_Transmit(&hi2c1, addr, regs, 2, 5)

	if (HAL_I2C_IsDeviceReady(&hi2c1, addr, 1, 20) ==HAL_OK || addr<255){
 800dfb4:	4b0c      	ldr	r3, [pc, #48]	; (800dfe8 <tlv_init+0x80>)
 800dfb6:	8819      	ldrh	r1, [r3, #0]
 800dfb8:	2314      	movs	r3, #20
 800dfba:	2201      	movs	r2, #1
 800dfbc:	480b      	ldr	r0, [pc, #44]	; (800dfec <tlv_init+0x84>)
 800dfbe:	f7f4 fa53 	bl	8002468 <HAL_I2C_IsDeviceReady>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d003      	beq.n	800dfd0 <tlv_init+0x68>
 800dfc8:	4b07      	ldr	r3, [pc, #28]	; (800dfe8 <tlv_init+0x80>)
 800dfca:	881b      	ldrh	r3, [r3, #0]
 800dfcc:	2bfe      	cmp	r3, #254	; 0xfe
 800dfce:	d804      	bhi.n	800dfda <tlv_init+0x72>
		inited=1;
 800dfd0:	4b07      	ldr	r3, [pc, #28]	; (800dff0 <tlv_init+0x88>)
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	601a      	str	r2, [r3, #0]
		return 1;
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	e001      	b.n	800dfde <tlv_init+0x76>
	} else {
		return -1;
 800dfda:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3708      	adds	r7, #8
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	20000240 	.word	0x20000240
 800dfec:	200006cc 	.word	0x200006cc
 800dff0:	20000244 	.word	0x20000244

0800dff4 <getMagVal>:
{
	HAL_I2C_Master_Transmit(&hi2c1, addr, 0, 1, 20);
	return 1;
}
int getMagVal()
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b08a      	sub	sp, #40	; 0x28
 800dff8:	af04      	add	r7, sp, #16
	if (!inited)
 800dffa:	4b44      	ldr	r3, [pc, #272]	; (800e10c <getMagVal+0x118>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d104      	bne.n	800e00c <getMagVal+0x18>
		{
			tlv_init();
 800e002:	f7ff ffb1 	bl	800df68 <tlv_init>
			HAL_Delay(30);
 800e006:	201e      	movs	r0, #30
 800e008:	f7f2 fef6 	bl	8000df8 <HAL_Delay>
	int16_t by_value;
	int16_t bx_value;
	int magnitude;
	//uint8_t tlvData[8];
	//uint8_t res=	HAL_I2C_Master_Receive(&hi2c1, addr, tlvData, 7, 10);
	for(int y = 0;y<6;y++){
 800e00c:	2300      	movs	r3, #0
 800e00e:	613b      	str	r3, [r7, #16]
 800e010:	e00f      	b.n	800e032 <getMagVal+0x3e>
		if(HAL_I2C_IsDeviceReady(&hi2c1, addr, 1, 20) == HAL_BUSY ){
 800e012:	4b3f      	ldr	r3, [pc, #252]	; (800e110 <getMagVal+0x11c>)
 800e014:	8819      	ldrh	r1, [r3, #0]
 800e016:	2314      	movs	r3, #20
 800e018:	2201      	movs	r2, #1
 800e01a:	483e      	ldr	r0, [pc, #248]	; (800e114 <getMagVal+0x120>)
 800e01c:	f7f4 fa24 	bl	8002468 <HAL_I2C_IsDeviceReady>
 800e020:	4603      	mov	r3, r0
 800e022:	2b02      	cmp	r3, #2
 800e024:	d102      	bne.n	800e02c <getMagVal+0x38>
			HAL_Delay(30);
 800e026:	201e      	movs	r0, #30
 800e028:	f7f2 fee6 	bl	8000df8 <HAL_Delay>
	for(int y = 0;y<6;y++){
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	3301      	adds	r3, #1
 800e030:	613b      	str	r3, [r7, #16]
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	2b05      	cmp	r3, #5
 800e036:	ddec      	ble.n	800e012 <getMagVal+0x1e>
		}
	}
	if(HAL_I2C_Mem_Read(&hi2c1, addr, 0x01, 7, i2cData,7,10)== HAL_OK){
 800e038:	4b35      	ldr	r3, [pc, #212]	; (800e110 <getMagVal+0x11c>)
 800e03a:	8819      	ldrh	r1, [r3, #0]
 800e03c:	230a      	movs	r3, #10
 800e03e:	9302      	str	r3, [sp, #8]
 800e040:	2307      	movs	r3, #7
 800e042:	9301      	str	r3, [sp, #4]
 800e044:	4b34      	ldr	r3, [pc, #208]	; (800e118 <getMagVal+0x124>)
 800e046:	9300      	str	r3, [sp, #0]
 800e048:	2307      	movs	r3, #7
 800e04a:	2201      	movs	r2, #1
 800e04c:	4831      	ldr	r0, [pc, #196]	; (800e114 <getMagVal+0x120>)
 800e04e:	f7f3 ffe5 	bl	800201c <HAL_I2C_Mem_Read>
 800e052:	4603      	mov	r3, r0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d152      	bne.n	800e0fe <getMagVal+0x10a>
			{
				tlv_init();
				HAL_Delay(30);
			}
			*/
		uint8_t bz_high = i2cData[2];
 800e058:	4b2f      	ldr	r3, [pc, #188]	; (800e118 <getMagVal+0x124>)
 800e05a:	789b      	ldrb	r3, [r3, #2]
 800e05c:	73fb      	strb	r3, [r7, #15]
		uint8_t bz_low = i2cData[5];
 800e05e:	4b2e      	ldr	r3, [pc, #184]	; (800e118 <getMagVal+0x124>)
 800e060:	795b      	ldrb	r3, [r3, #5]
 800e062:	73bb      	strb	r3, [r7, #14]
		bz_value = (bz_high << 8) | ((bz_low & 0x0F)<<4);
 800e064:	7bfb      	ldrb	r3, [r7, #15]
 800e066:	021b      	lsls	r3, r3, #8
 800e068:	b21a      	sxth	r2, r3
 800e06a:	7bbb      	ldrb	r3, [r7, #14]
 800e06c:	011b      	lsls	r3, r3, #4
 800e06e:	b21b      	sxth	r3, r3
 800e070:	b2db      	uxtb	r3, r3
 800e072:	b21b      	sxth	r3, r3
 800e074:	4313      	orrs	r3, r2
 800e076:	81bb      	strh	r3, [r7, #12]
		bz_value>>=4;
 800e078:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e07c:	111b      	asrs	r3, r3, #4
 800e07e:	81bb      	strh	r3, [r7, #12]

		uint8_t by_high = i2cData[1];
 800e080:	4b25      	ldr	r3, [pc, #148]	; (800e118 <getMagVal+0x124>)
 800e082:	785b      	ldrb	r3, [r3, #1]
 800e084:	72fb      	strb	r3, [r7, #11]
		uint8_t by_low = i2cData[4];
 800e086:	4b24      	ldr	r3, [pc, #144]	; (800e118 <getMagVal+0x124>)
 800e088:	791b      	ldrb	r3, [r3, #4]
 800e08a:	72bb      	strb	r3, [r7, #10]
		by_value = (by_high << 8) | ((by_low & 0x0F)<<4);
 800e08c:	7afb      	ldrb	r3, [r7, #11]
 800e08e:	021b      	lsls	r3, r3, #8
 800e090:	b21a      	sxth	r2, r3
 800e092:	7abb      	ldrb	r3, [r7, #10]
 800e094:	011b      	lsls	r3, r3, #4
 800e096:	b21b      	sxth	r3, r3
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	b21b      	sxth	r3, r3
 800e09c:	4313      	orrs	r3, r2
 800e09e:	813b      	strh	r3, [r7, #8]
		by_value>>=4;
 800e0a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e0a4:	111b      	asrs	r3, r3, #4
 800e0a6:	813b      	strh	r3, [r7, #8]

		uint8_t bx_high = i2cData[0];
 800e0a8:	4b1b      	ldr	r3, [pc, #108]	; (800e118 <getMagVal+0x124>)
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	71fb      	strb	r3, [r7, #7]
		uint8_t bx_low = i2cData[4];
 800e0ae:	4b1a      	ldr	r3, [pc, #104]	; (800e118 <getMagVal+0x124>)
 800e0b0:	791b      	ldrb	r3, [r3, #4]
 800e0b2:	71bb      	strb	r3, [r7, #6]
		bx_value = (bx_high << 8) | bx_low;
 800e0b4:	79fb      	ldrb	r3, [r7, #7]
 800e0b6:	021b      	lsls	r3, r3, #8
 800e0b8:	b21a      	sxth	r2, r3
 800e0ba:	79bb      	ldrb	r3, [r7, #6]
 800e0bc:	b21b      	sxth	r3, r3
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	80bb      	strh	r3, [r7, #4]
		bx_value>>=4;
 800e0c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e0c6:	111b      	asrs	r3, r3, #4
 800e0c8:	80bb      	strh	r3, [r7, #4]
		//if (bz_value>4000){bz_value=0;}

 		magnitude=abs(bz_value)+abs(by_value)+abs(bx_value);
 800e0ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e0ce:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800e0d2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800e0d6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	bfb8      	it	lt
 800e0de:	425b      	neglt	r3, r3
 800e0e0:	441a      	add	r2, r3
 800e0e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	bfb8      	it	lt
 800e0ea:	425b      	neglt	r3, r3
 800e0ec:	4413      	add	r3, r2
 800e0ee:	617b      	str	r3, [r7, #20]

 		if(magnitude>50){magnitude=50;}
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	2b32      	cmp	r3, #50	; 0x32
 800e0f4:	dd01      	ble.n	800e0fa <getMagVal+0x106>
 800e0f6:	2332      	movs	r3, #50	; 0x32
 800e0f8:	617b      	str	r3, [r7, #20]
		return(magnitude);
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	e001      	b.n	800e102 <getMagVal+0x10e>
	} else { return -1;}
 800e0fe:	f04f 33ff 	mov.w	r3, #4294967295

}
 800e102:	4618      	mov	r0, r3
 800e104:	3718      	adds	r7, #24
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}
 800e10a:	bf00      	nop
 800e10c:	20000244 	.word	0x20000244
 800e110:	20000240 	.word	0x20000240
 800e114:	200006cc 	.word	0x200006cc
 800e118:	20000898 	.word	0x20000898

0800e11c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e120:	2200      	movs	r2, #0
 800e122:	4912      	ldr	r1, [pc, #72]	; (800e16c <MX_USB_DEVICE_Init+0x50>)
 800e124:	4812      	ldr	r0, [pc, #72]	; (800e170 <MX_USB_DEVICE_Init+0x54>)
 800e126:	f7fd fc73 	bl	800ba10 <USBD_Init>
 800e12a:	4603      	mov	r3, r0
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d001      	beq.n	800e134 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e130:	f7ff faf4 	bl	800d71c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800e134:	490f      	ldr	r1, [pc, #60]	; (800e174 <MX_USB_DEVICE_Init+0x58>)
 800e136:	480e      	ldr	r0, [pc, #56]	; (800e170 <MX_USB_DEVICE_Init+0x54>)
 800e138:	f7fd fca0 	bl	800ba7c <USBD_RegisterClass>
 800e13c:	4603      	mov	r3, r0
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d001      	beq.n	800e146 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e142:	f7ff faeb 	bl	800d71c <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800e146:	490c      	ldr	r1, [pc, #48]	; (800e178 <MX_USB_DEVICE_Init+0x5c>)
 800e148:	4809      	ldr	r0, [pc, #36]	; (800e170 <MX_USB_DEVICE_Init+0x54>)
 800e14a:	f7fd fabf 	bl	800b6cc <USBD_AUDIO_RegisterInterface>
 800e14e:	4603      	mov	r3, r0
 800e150:	2b00      	cmp	r3, #0
 800e152:	d001      	beq.n	800e158 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e154:	f7ff fae2 	bl	800d71c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e158:	4805      	ldr	r0, [pc, #20]	; (800e170 <MX_USB_DEVICE_Init+0x54>)
 800e15a:	f7fd fcb0 	bl	800babe <USBD_Start>
 800e15e:	4603      	mov	r3, r0
 800e160:	2b00      	cmp	r3, #0
 800e162:	d001      	beq.n	800e168 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e164:	f7ff fada 	bl	800d71c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e168:	bf00      	nop
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	20000148 	.word	0x20000148
 800e170:	200008a0 	.word	0x200008a0
 800e174:	20000008 	.word	0x20000008
 800e178:	2000012c 	.word	0x2000012c

0800e17c <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use 
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b085      	sub	sp, #20
 800e180:	af00      	add	r7, sp, #0
 800e182:	60f8      	str	r0, [r7, #12]
 800e184:	60b9      	str	r1, [r7, #8]
 800e186:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  //HAL_I2S_Transmit_DMA(&hi2s2, sine, 8192);
  return (USBD_OK);
 800e188:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3714      	adds	r7, #20
 800e18e:	46bd      	mov	sp, r7
 800e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e194:	4770      	bx	lr

0800e196 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800e196:	b580      	push	{r7, lr}
 800e198:	b082      	sub	sp, #8
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  AudioPlay_Stop();
 800e19e:	f7fe fdbb 	bl	800cd18 <AudioPlay_Stop>
	return (USBD_OK);
 800e1a2:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	4613      	mov	r3, r2
 800e1b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	//if (packetReceived>=-80)  {}//packetReceived-=80;
	packetReceived-=size;
 800e1ba:	4b25      	ldr	r3, [pc, #148]	; (800e250 <AUDIO_AudioCmd_FS+0xa4>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	461a      	mov	r2, r3
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	1ad3      	subs	r3, r2, r3
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	4b22      	ldr	r3, [pc, #136]	; (800e250 <AUDIO_AudioCmd_FS+0xa4>)
 800e1c8:	601a      	str	r2, [r3, #0]
	if (packetReceived<-(2*7680) && playing)
 800e1ca:	4b21      	ldr	r3, [pc, #132]	; (800e250 <AUDIO_AudioCmd_FS+0xa4>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f513 5f70 	cmn.w	r3, #15360	; 0x3c00
 800e1d2:	da11      	bge.n	800e1f8 <AUDIO_AudioCmd_FS+0x4c>
 800e1d4:	4b1f      	ldr	r3, [pc, #124]	; (800e254 <AUDIO_AudioCmd_FS+0xa8>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d00d      	beq.n	800e1f8 <AUDIO_AudioCmd_FS+0x4c>
	{	memset(pbuf,0,AUDIO_TOTAL_BUF_SIZE);
 800e1dc:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800e1e0:	2100      	movs	r1, #0
 800e1e2:	68f8      	ldr	r0, [r7, #12]
 800e1e4:	f000 fcf2 	bl	800ebcc <memset>
		packetReceived=0;
 800e1e8:	4b19      	ldr	r3, [pc, #100]	; (800e250 <AUDIO_AudioCmd_FS+0xa4>)
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	601a      	str	r2, [r3, #0]
		cmd=AUDIO_CMD_STOP;
 800e1ee:	2304      	movs	r3, #4
 800e1f0:	71fb      	strb	r3, [r7, #7]
		playing=0;
 800e1f2:	4b18      	ldr	r3, [pc, #96]	; (800e254 <AUDIO_AudioCmd_FS+0xa8>)
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	601a      	str	r2, [r3, #0]
	}

	//if (packetReceived<0) return (USBD_OK);;
	switch(cmd)
 800e1f8:	79fb      	ldrb	r3, [r7, #7]
 800e1fa:	2b02      	cmp	r3, #2
 800e1fc:	d011      	beq.n	800e222 <AUDIO_AudioCmd_FS+0x76>
 800e1fe:	2b04      	cmp	r3, #4
 800e200:	d01e      	beq.n	800e240 <AUDIO_AudioCmd_FS+0x94>
 800e202:	2b01      	cmp	r3, #1
 800e204:	d11f      	bne.n	800e246 <AUDIO_AudioCmd_FS+0x9a>
  {
    case AUDIO_CMD_START:
    	packetReceived-=2*size;
 800e206:	4b12      	ldr	r3, [pc, #72]	; (800e250 <AUDIO_AudioCmd_FS+0xa4>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	461a      	mov	r2, r3
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	005b      	lsls	r3, r3, #1
 800e210:	1ad3      	subs	r3, r2, r3
 800e212:	461a      	mov	r2, r3
 800e214:	4b0e      	ldr	r3, [pc, #56]	; (800e250 <AUDIO_AudioCmd_FS+0xa4>)
 800e216:	601a      	str	r2, [r3, #0]
    	//if (packetReceived>=-80)
    	AudioPlay_Play((uint16_t*) pbuf, size);
 800e218:	68b9      	ldr	r1, [r7, #8]
 800e21a:	68f8      	ldr	r0, [r7, #12]
 800e21c:	f7fe fd5a 	bl	800ccd4 <AudioPlay_Play>
    	//else AudioPlay_Play(nulls, size);
	break;
 800e220:	e011      	b.n	800e246 <AUDIO_AudioCmd_FS+0x9a>
    case AUDIO_CMD_PLAY:
    	packetReceived-=size;
 800e222:	4b0b      	ldr	r3, [pc, #44]	; (800e250 <AUDIO_AudioCmd_FS+0xa4>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	461a      	mov	r2, r3
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	1ad3      	subs	r3, r2, r3
 800e22c:	461a      	mov	r2, r3
 800e22e:	4b08      	ldr	r3, [pc, #32]	; (800e250 <AUDIO_AudioCmd_FS+0xa4>)
 800e230:	601a      	str	r2, [r3, #0]
    	//if (packetReceived>=-80)
    	AudioPlay_ChangeBuffer((uint16_t*) pbuf, size);
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	b29b      	uxth	r3, r3
 800e236:	4619      	mov	r1, r3
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f7fe fd81 	bl	800cd40 <AudioPlay_ChangeBuffer>
    	//else AudioPlay_ChangeBuffer(nulls, size);
    break;	
 800e23e:	e002      	b.n	800e246 <AUDIO_AudioCmd_FS+0x9a>
    case AUDIO_CMD_STOP:
    	AudioPlay_Stop();
 800e240:	f7fe fd6a 	bl	800cd18 <AudioPlay_Stop>
    	break;
 800e244:	bf00      	nop

  }
  //UNUSED(pbuf);
  //UNUSED(size);
 // UNUSED(cmd);
	return (USBD_OK);
 800e246:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3710      	adds	r7, #16
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	20000248 	.word	0x20000248
 800e254:	2000024c 	.word	0x2000024c

0800e258 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800e258:	b480      	push	{r7}
 800e25a:	b083      	sub	sp, #12
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	4603      	mov	r3, r0
 800e260:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  //UNUSED(vol);
  //HAL_I2S_Transmit_DMA(&hi2s2, sine, vol*64);
  return (USBD_OK);
 800e262:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e264:	4618      	mov	r0, r3
 800e266:	370c      	adds	r7, #12
 800e268:	46bd      	mov	sp, r7
 800e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26e:	4770      	bx	lr

0800e270 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800e270:	b480      	push	{r7}
 800e272:	b083      	sub	sp, #12
 800e274:	af00      	add	r7, sp, #0
 800e276:	4603      	mov	r3, r0
 800e278:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  //HAL_I2S_Transmit_DMA(&hi2s2, sine, 4096);
  return (USBD_OK);
 800e27a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	370c      	adds	r7, #12
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr

0800e288 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800e288:	b480      	push	{r7}
 800e28a:	b085      	sub	sp, #20
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	4613      	mov	r3, r2
 800e294:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  //UNUSED(pbuf);
  //UNUSED(size);
  UNUSED(cmd);
  packetReceived+=size;
 800e296:	4b07      	ldr	r3, [pc, #28]	; (800e2b4 <AUDIO_PeriodicTC_FS+0x2c>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	461a      	mov	r2, r3
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	4413      	add	r3, r2
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	4b04      	ldr	r3, [pc, #16]	; (800e2b4 <AUDIO_PeriodicTC_FS+0x2c>)
 800e2a4:	601a      	str	r2, [r3, #0]
  //HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) pbuf , size);
  return (USBD_OK);
 800e2a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3714      	adds	r7, #20
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr
 800e2b4:	20000248 	.word	0x20000248

0800e2b8 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800e2bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <TransferComplete_CallBack_FS>:
/**
  * @brief  Manages the DMA full transfer complete event.
  * @retval None
  */
void TransferComplete_CallBack_FS(void)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	af00      	add	r7, sp, #0
	/*if (packetReceived<=0)
			{
				packetReceived=0;
				AudioPlay_Stop();
			} else*/
	USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_FULL);
 800e2cc:	2102      	movs	r1, #2
 800e2ce:	4802      	ldr	r0, [pc, #8]	; (800e2d8 <TransferComplete_CallBack_FS+0x10>)
 800e2d0:	f7fd f82c 	bl	800b32c <USBD_AUDIO_Sync>
  /* USER CODE END 7 */
}
 800e2d4:	bf00      	nop
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	200008a0 	.word	0x200008a0

0800e2dc <HalfTransfer_CallBack_FS>:
/**
  * @brief  Manages the DMA Half transfer complete event.
  * @retval None
  */
void HalfTransfer_CallBack_FS(void)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	af00      	add	r7, sp, #0
	/*if (packetReceived<=0)
			{
				packetReceived=0;
				AudioPlay_Stop();
			} else*/
	USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_HALF);
 800e2e0:	2101      	movs	r1, #1
 800e2e2:	4802      	ldr	r0, [pc, #8]	; (800e2ec <HalfTransfer_CallBack_FS+0x10>)
 800e2e4:	f7fd f822 	bl	800b32c <USBD_AUDIO_Sync>
  /* USER CODE END 8 */
}
 800e2e8:	bf00      	nop
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	200008a0 	.word	0x200008a0

0800e2f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b08a      	sub	sp, #40	; 0x28
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e2f8:	f107 0314 	add.w	r3, r7, #20
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	601a      	str	r2, [r3, #0]
 800e300:	605a      	str	r2, [r3, #4]
 800e302:	609a      	str	r2, [r3, #8]
 800e304:	60da      	str	r2, [r3, #12]
 800e306:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e310:	d13a      	bne.n	800e388 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e312:	2300      	movs	r3, #0
 800e314:	613b      	str	r3, [r7, #16]
 800e316:	4b1e      	ldr	r3, [pc, #120]	; (800e390 <HAL_PCD_MspInit+0xa0>)
 800e318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e31a:	4a1d      	ldr	r2, [pc, #116]	; (800e390 <HAL_PCD_MspInit+0xa0>)
 800e31c:	f043 0301 	orr.w	r3, r3, #1
 800e320:	6313      	str	r3, [r2, #48]	; 0x30
 800e322:	4b1b      	ldr	r3, [pc, #108]	; (800e390 <HAL_PCD_MspInit+0xa0>)
 800e324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e326:	f003 0301 	and.w	r3, r3, #1
 800e32a:	613b      	str	r3, [r7, #16]
 800e32c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e32e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e334:	2302      	movs	r3, #2
 800e336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e338:	2300      	movs	r3, #0
 800e33a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e33c:	2303      	movs	r3, #3
 800e33e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e340:	230a      	movs	r3, #10
 800e342:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e344:	f107 0314 	add.w	r3, r7, #20
 800e348:	4619      	mov	r1, r3
 800e34a:	4812      	ldr	r0, [pc, #72]	; (800e394 <HAL_PCD_MspInit+0xa4>)
 800e34c:	f7f3 fa96 	bl	800187c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e350:	4b0f      	ldr	r3, [pc, #60]	; (800e390 <HAL_PCD_MspInit+0xa0>)
 800e352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e354:	4a0e      	ldr	r2, [pc, #56]	; (800e390 <HAL_PCD_MspInit+0xa0>)
 800e356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e35a:	6353      	str	r3, [r2, #52]	; 0x34
 800e35c:	2300      	movs	r3, #0
 800e35e:	60fb      	str	r3, [r7, #12]
 800e360:	4b0b      	ldr	r3, [pc, #44]	; (800e390 <HAL_PCD_MspInit+0xa0>)
 800e362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e364:	4a0a      	ldr	r2, [pc, #40]	; (800e390 <HAL_PCD_MspInit+0xa0>)
 800e366:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e36a:	6453      	str	r3, [r2, #68]	; 0x44
 800e36c:	4b08      	ldr	r3, [pc, #32]	; (800e390 <HAL_PCD_MspInit+0xa0>)
 800e36e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e374:	60fb      	str	r3, [r7, #12]
 800e376:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e378:	2200      	movs	r2, #0
 800e37a:	2100      	movs	r1, #0
 800e37c:	2043      	movs	r0, #67	; 0x43
 800e37e:	f7f2 fe38 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e382:	2043      	movs	r0, #67	; 0x43
 800e384:	f7f2 fe51 	bl	800102a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e388:	bf00      	nop
 800e38a:	3728      	adds	r7, #40	; 0x28
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	40023800 	.word	0x40023800
 800e394:	40020000 	.word	0x40020000

0800e398 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	4610      	mov	r0, r2
 800e3b0:	f7fd fbd0 	bl	800bb54 <USBD_LL_SetupStage>
}
 800e3b4:	bf00      	nop
 800e3b6:	3708      	adds	r7, #8
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e3ce:	78fa      	ldrb	r2, [r7, #3]
 800e3d0:	6879      	ldr	r1, [r7, #4]
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	00db      	lsls	r3, r3, #3
 800e3d6:	1a9b      	subs	r3, r3, r2
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	440b      	add	r3, r1
 800e3dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	78fb      	ldrb	r3, [r7, #3]
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	f7fd fc08 	bl	800bbfa <USBD_LL_DataOutStage>
}
 800e3ea:	bf00      	nop
 800e3ec:	3708      	adds	r7, #8
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}

0800e3f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3f2:	b580      	push	{r7, lr}
 800e3f4:	b082      	sub	sp, #8
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
 800e3fa:	460b      	mov	r3, r1
 800e3fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e404:	78fa      	ldrb	r2, [r7, #3]
 800e406:	6879      	ldr	r1, [r7, #4]
 800e408:	4613      	mov	r3, r2
 800e40a:	00db      	lsls	r3, r3, #3
 800e40c:	1a9b      	subs	r3, r3, r2
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	440b      	add	r3, r1
 800e412:	3348      	adds	r3, #72	; 0x48
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	78fb      	ldrb	r3, [r7, #3]
 800e418:	4619      	mov	r1, r3
 800e41a:	f7fd fc51 	bl	800bcc0 <USBD_LL_DataInStage>
}
 800e41e:	bf00      	nop
 800e420:	3708      	adds	r7, #8
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}

0800e426 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e426:	b580      	push	{r7, lr}
 800e428:	b082      	sub	sp, #8
 800e42a:	af00      	add	r7, sp, #0
 800e42c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e434:	4618      	mov	r0, r3
 800e436:	f7fd fd55 	bl	800bee4 <USBD_LL_SOF>
}
 800e43a:	bf00      	nop
 800e43c:	3708      	adds	r7, #8
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}

0800e442 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800e442:	b580      	push	{r7, lr}
 800e444:	b084      	sub	sp, #16
 800e446:	af00      	add	r7, sp, #0
 800e448:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e44a:	2301      	movs	r3, #1
 800e44c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	68db      	ldr	r3, [r3, #12]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d102      	bne.n	800e45c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e456:	2300      	movs	r3, #0
 800e458:	73fb      	strb	r3, [r7, #15]
 800e45a:	e008      	b.n	800e46e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	68db      	ldr	r3, [r3, #12]
 800e460:	2b02      	cmp	r3, #2
 800e462:	d102      	bne.n	800e46a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e464:	2301      	movs	r3, #1
 800e466:	73fb      	strb	r3, [r7, #15]
 800e468:	e001      	b.n	800e46e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e46a:	f7ff f957 	bl	800d71c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e474:	7bfa      	ldrb	r2, [r7, #15]
 800e476:	4611      	mov	r1, r2
 800e478:	4618      	mov	r0, r3
 800e47a:	f7fd fcf8 	bl	800be6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e484:	4618      	mov	r0, r3
 800e486:	f7fd fcb1 	bl	800bdec <USBD_LL_Reset>
}
 800e48a:	bf00      	nop
 800e48c:	3710      	adds	r7, #16
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
	...

0800e494 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7fd fcf3 	bl	800be8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	6812      	ldr	r2, [r2, #0]
 800e4b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e4ba:	f043 0301 	orr.w	r3, r3, #1
 800e4be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6a1b      	ldr	r3, [r3, #32]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d005      	beq.n	800e4d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e4c8:	4b04      	ldr	r3, [pc, #16]	; (800e4dc <HAL_PCD_SuspendCallback+0x48>)
 800e4ca:	691b      	ldr	r3, [r3, #16]
 800e4cc:	4a03      	ldr	r2, [pc, #12]	; (800e4dc <HAL_PCD_SuspendCallback+0x48>)
 800e4ce:	f043 0306 	orr.w	r3, r3, #6
 800e4d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e4d4:	bf00      	nop
 800e4d6:	3708      	adds	r7, #8
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}
 800e4dc:	e000ed00 	.word	0xe000ed00

0800e4e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7fd fce2 	bl	800beb8 <USBD_LL_Resume>
}
 800e4f4:	bf00      	nop
 800e4f6:	3708      	adds	r7, #8
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b082      	sub	sp, #8
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	460b      	mov	r3, r1
 800e506:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e50e:	78fa      	ldrb	r2, [r7, #3]
 800e510:	4611      	mov	r1, r2
 800e512:	4618      	mov	r0, r3
 800e514:	f7fd fd0d 	bl	800bf32 <USBD_LL_IsoOUTIncomplete>
}
 800e518:	bf00      	nop
 800e51a:	3708      	adds	r7, #8
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	460b      	mov	r3, r1
 800e52a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e532:	78fa      	ldrb	r2, [r7, #3]
 800e534:	4611      	mov	r1, r2
 800e536:	4618      	mov	r0, r3
 800e538:	f7fd fcee 	bl	800bf18 <USBD_LL_IsoINIncomplete>
}
 800e53c:	bf00      	nop
 800e53e:	3708      	adds	r7, #8
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b082      	sub	sp, #8
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e552:	4618      	mov	r0, r3
 800e554:	f7fd fcfa 	bl	800bf4c <USBD_LL_DevConnected>
}
 800e558:	bf00      	nop
 800e55a:	3708      	adds	r7, #8
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b082      	sub	sp, #8
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fd fcf7 	bl	800bf62 <USBD_LL_DevDisconnected>
}
 800e574:	bf00      	nop
 800e576:	3708      	adds	r7, #8
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}

0800e57c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d13c      	bne.n	800e606 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e58c:	4a20      	ldr	r2, [pc, #128]	; (800e610 <USBD_LL_Init+0x94>)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	4a1e      	ldr	r2, [pc, #120]	; (800e610 <USBD_LL_Init+0x94>)
 800e598:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e59c:	4b1c      	ldr	r3, [pc, #112]	; (800e610 <USBD_LL_Init+0x94>)
 800e59e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e5a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e5a4:	4b1a      	ldr	r3, [pc, #104]	; (800e610 <USBD_LL_Init+0x94>)
 800e5a6:	2204      	movs	r2, #4
 800e5a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e5aa:	4b19      	ldr	r3, [pc, #100]	; (800e610 <USBD_LL_Init+0x94>)
 800e5ac:	2202      	movs	r2, #2
 800e5ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e5b0:	4b17      	ldr	r3, [pc, #92]	; (800e610 <USBD_LL_Init+0x94>)
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e5b6:	4b16      	ldr	r3, [pc, #88]	; (800e610 <USBD_LL_Init+0x94>)
 800e5b8:	2202      	movs	r2, #2
 800e5ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800e5bc:	4b14      	ldr	r3, [pc, #80]	; (800e610 <USBD_LL_Init+0x94>)
 800e5be:	2201      	movs	r2, #1
 800e5c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e5c2:	4b13      	ldr	r3, [pc, #76]	; (800e610 <USBD_LL_Init+0x94>)
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e5c8:	4b11      	ldr	r3, [pc, #68]	; (800e610 <USBD_LL_Init+0x94>)
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e5ce:	4b10      	ldr	r3, [pc, #64]	; (800e610 <USBD_LL_Init+0x94>)
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e5d4:	4b0e      	ldr	r3, [pc, #56]	; (800e610 <USBD_LL_Init+0x94>)
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e5da:	480d      	ldr	r0, [pc, #52]	; (800e610 <USBD_LL_Init+0x94>)
 800e5dc:	f7f6 fe62 	bl	80052a4 <HAL_PCD_Init>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d001      	beq.n	800e5ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e5e6:	f7ff f899 	bl	800d71c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e5ea:	2180      	movs	r1, #128	; 0x80
 800e5ec:	4808      	ldr	r0, [pc, #32]	; (800e610 <USBD_LL_Init+0x94>)
 800e5ee:	f7f7 ffc0 	bl	8006572 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e5f2:	2240      	movs	r2, #64	; 0x40
 800e5f4:	2100      	movs	r1, #0
 800e5f6:	4806      	ldr	r0, [pc, #24]	; (800e610 <USBD_LL_Init+0x94>)
 800e5f8:	f7f7 ff74 	bl	80064e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e5fc:	2280      	movs	r2, #128	; 0x80
 800e5fe:	2101      	movs	r1, #1
 800e600:	4803      	ldr	r0, [pc, #12]	; (800e610 <USBD_LL_Init+0x94>)
 800e602:	f7f7 ff6f 	bl	80064e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e606:	2300      	movs	r3, #0
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3708      	adds	r7, #8
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	20000b70 	.word	0x20000b70

0800e614 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e61c:	2300      	movs	r3, #0
 800e61e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e620:	2300      	movs	r3, #0
 800e622:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7f6 ff57 	bl	80054de <HAL_PCD_Start>
 800e630:	4603      	mov	r3, r0
 800e632:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800e634:	7bfb      	ldrb	r3, [r7, #15]
 800e636:	4618      	mov	r0, r3
 800e638:	f000 f92a 	bl	800e890 <USBD_Get_USB_Status>
 800e63c:	4603      	mov	r3, r0
 800e63e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e640:	7bbb      	ldrb	r3, [r7, #14]
}
 800e642:	4618      	mov	r0, r3
 800e644:	3710      	adds	r7, #16
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}

0800e64a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b084      	sub	sp, #16
 800e64e:	af00      	add	r7, sp, #0
 800e650:	6078      	str	r0, [r7, #4]
 800e652:	4608      	mov	r0, r1
 800e654:	4611      	mov	r1, r2
 800e656:	461a      	mov	r2, r3
 800e658:	4603      	mov	r3, r0
 800e65a:	70fb      	strb	r3, [r7, #3]
 800e65c:	460b      	mov	r3, r1
 800e65e:	70bb      	strb	r3, [r7, #2]
 800e660:	4613      	mov	r3, r2
 800e662:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e664:	2300      	movs	r3, #0
 800e666:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e668:	2300      	movs	r3, #0
 800e66a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e672:	78bb      	ldrb	r3, [r7, #2]
 800e674:	883a      	ldrh	r2, [r7, #0]
 800e676:	78f9      	ldrb	r1, [r7, #3]
 800e678:	f7f7 fb3b 	bl	8005cf2 <HAL_PCD_EP_Open>
 800e67c:	4603      	mov	r3, r0
 800e67e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e680:	7bfb      	ldrb	r3, [r7, #15]
 800e682:	4618      	mov	r0, r3
 800e684:	f000 f904 	bl	800e890 <USBD_Get_USB_Status>
 800e688:	4603      	mov	r3, r0
 800e68a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e68c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3710      	adds	r7, #16
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e696:	b580      	push	{r7, lr}
 800e698:	b084      	sub	sp, #16
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	6078      	str	r0, [r7, #4]
 800e69e:	460b      	mov	r3, r1
 800e6a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e6b0:	78fa      	ldrb	r2, [r7, #3]
 800e6b2:	4611      	mov	r1, r2
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7f7 fb84 	bl	8005dc2 <HAL_PCD_EP_Close>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800e6be:	7bfb      	ldrb	r3, [r7, #15]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f000 f8e5 	bl	800e890 <USBD_Get_USB_Status>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800e6ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3710      	adds	r7, #16
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	460b      	mov	r3, r1
 800e6de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e6ee:	78fa      	ldrb	r2, [r7, #3]
 800e6f0:	4611      	mov	r1, r2
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7f7 fc5c 	bl	8005fb0 <HAL_PCD_EP_SetStall>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6fc:	7bfb      	ldrb	r3, [r7, #15]
 800e6fe:	4618      	mov	r0, r3
 800e700:	f000 f8c6 	bl	800e890 <USBD_Get_USB_Status>
 800e704:	4603      	mov	r3, r0
 800e706:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800e708:	7bbb      	ldrb	r3, [r7, #14]
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3710      	adds	r7, #16
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}

0800e712 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e712:	b580      	push	{r7, lr}
 800e714:	b084      	sub	sp, #16
 800e716:	af00      	add	r7, sp, #0
 800e718:	6078      	str	r0, [r7, #4]
 800e71a:	460b      	mov	r3, r1
 800e71c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e71e:	2300      	movs	r3, #0
 800e720:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e722:	2300      	movs	r3, #0
 800e724:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e72c:	78fa      	ldrb	r2, [r7, #3]
 800e72e:	4611      	mov	r1, r2
 800e730:	4618      	mov	r0, r3
 800e732:	f7f7 fca1 	bl	8006078 <HAL_PCD_EP_ClrStall>
 800e736:	4603      	mov	r3, r0
 800e738:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800e73a:	7bfb      	ldrb	r3, [r7, #15]
 800e73c:	4618      	mov	r0, r3
 800e73e:	f000 f8a7 	bl	800e890 <USBD_Get_USB_Status>
 800e742:	4603      	mov	r3, r0
 800e744:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800e746:	7bbb      	ldrb	r3, [r7, #14]
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3710      	adds	r7, #16
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e750:	b480      	push	{r7}
 800e752:	b085      	sub	sp, #20
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	460b      	mov	r3, r1
 800e75a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e762:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800e764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	da0b      	bge.n	800e784 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800e76c:	78fb      	ldrb	r3, [r7, #3]
 800e76e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e772:	68f9      	ldr	r1, [r7, #12]
 800e774:	4613      	mov	r3, r2
 800e776:	00db      	lsls	r3, r3, #3
 800e778:	1a9b      	subs	r3, r3, r2
 800e77a:	009b      	lsls	r3, r3, #2
 800e77c:	440b      	add	r3, r1
 800e77e:	333e      	adds	r3, #62	; 0x3e
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	e00b      	b.n	800e79c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800e784:	78fb      	ldrb	r3, [r7, #3]
 800e786:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e78a:	68f9      	ldr	r1, [r7, #12]
 800e78c:	4613      	mov	r3, r2
 800e78e:	00db      	lsls	r3, r3, #3
 800e790:	1a9b      	subs	r3, r3, r2
 800e792:	009b      	lsls	r3, r3, #2
 800e794:	440b      	add	r3, r1
 800e796:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e79a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3714      	adds	r7, #20
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr

0800e7a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	460b      	mov	r3, r1
 800e7b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e7c2:	78fa      	ldrb	r2, [r7, #3]
 800e7c4:	4611      	mov	r1, r2
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f7f7 fa6e 	bl	8005ca8 <HAL_PCD_SetAddress>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7d0:	7bfb      	ldrb	r3, [r7, #15]
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f000 f85c 	bl	800e890 <USBD_Get_USB_Status>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800e7dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3710      	adds	r7, #16
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}

0800e7e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e7e6:	b580      	push	{r7, lr}
 800e7e8:	b086      	sub	sp, #24
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	60f8      	str	r0, [r7, #12]
 800e7ee:	607a      	str	r2, [r7, #4]
 800e7f0:	603b      	str	r3, [r7, #0]
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e804:	7af9      	ldrb	r1, [r7, #11]
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	f7f7 fb87 	bl	8005f1c <HAL_PCD_EP_Transmit>
 800e80e:	4603      	mov	r3, r0
 800e810:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800e812:	7dfb      	ldrb	r3, [r7, #23]
 800e814:	4618      	mov	r0, r3
 800e816:	f000 f83b 	bl	800e890 <USBD_Get_USB_Status>
 800e81a:	4603      	mov	r3, r0
 800e81c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800e81e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e820:	4618      	mov	r0, r3
 800e822:	3718      	adds	r7, #24
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b086      	sub	sp, #24
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	60f8      	str	r0, [r7, #12]
 800e830:	607a      	str	r2, [r7, #4]
 800e832:	603b      	str	r3, [r7, #0]
 800e834:	460b      	mov	r3, r1
 800e836:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e838:	2300      	movs	r3, #0
 800e83a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e83c:	2300      	movs	r3, #0
 800e83e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e846:	7af9      	ldrb	r1, [r7, #11]
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	687a      	ldr	r2, [r7, #4]
 800e84c:	f7f7 fb03 	bl	8005e56 <HAL_PCD_EP_Receive>
 800e850:	4603      	mov	r3, r0
 800e852:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800e854:	7dfb      	ldrb	r3, [r7, #23]
 800e856:	4618      	mov	r0, r3
 800e858:	f000 f81a 	bl	800e890 <USBD_Get_USB_Status>
 800e85c:	4603      	mov	r3, r0
 800e85e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800e860:	7dbb      	ldrb	r3, [r7, #22]
}
 800e862:	4618      	mov	r0, r3
 800e864:	3718      	adds	r7, #24
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}

0800e86a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e86a:	b580      	push	{r7, lr}
 800e86c:	b082      	sub	sp, #8
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
 800e872:	460b      	mov	r3, r1
 800e874:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e87c:	78fa      	ldrb	r2, [r7, #3]
 800e87e:	4611      	mov	r1, r2
 800e880:	4618      	mov	r0, r3
 800e882:	f7f7 fb33 	bl	8005eec <HAL_PCD_EP_GetRxCount>
 800e886:	4603      	mov	r3, r0
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3708      	adds	r7, #8
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e890:	b480      	push	{r7}
 800e892:	b085      	sub	sp, #20
 800e894:	af00      	add	r7, sp, #0
 800e896:	4603      	mov	r3, r0
 800e898:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e89a:	2300      	movs	r3, #0
 800e89c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e89e:	79fb      	ldrb	r3, [r7, #7]
 800e8a0:	2b03      	cmp	r3, #3
 800e8a2:	d817      	bhi.n	800e8d4 <USBD_Get_USB_Status+0x44>
 800e8a4:	a201      	add	r2, pc, #4	; (adr r2, 800e8ac <USBD_Get_USB_Status+0x1c>)
 800e8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8aa:	bf00      	nop
 800e8ac:	0800e8bd 	.word	0x0800e8bd
 800e8b0:	0800e8c3 	.word	0x0800e8c3
 800e8b4:	0800e8c9 	.word	0x0800e8c9
 800e8b8:	0800e8cf 	.word	0x0800e8cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	73fb      	strb	r3, [r7, #15]
    break;
 800e8c0:	e00b      	b.n	800e8da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e8c2:	2303      	movs	r3, #3
 800e8c4:	73fb      	strb	r3, [r7, #15]
    break;
 800e8c6:	e008      	b.n	800e8da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800e8cc:	e005      	b.n	800e8da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e8ce:	2303      	movs	r3, #3
 800e8d0:	73fb      	strb	r3, [r7, #15]
    break;
 800e8d2:	e002      	b.n	800e8da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e8d4:	2303      	movs	r3, #3
 800e8d6:	73fb      	strb	r3, [r7, #15]
    break;
 800e8d8:	bf00      	nop
  }
  return usb_status;
 800e8da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3714      	adds	r7, #20
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	6039      	str	r1, [r7, #0]
 800e8f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	2212      	movs	r2, #18
 800e8f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e8fa:	4b03      	ldr	r3, [pc, #12]	; (800e908 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	370c      	adds	r7, #12
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr
 800e908:	20000164 	.word	0x20000164

0800e90c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b083      	sub	sp, #12
 800e910:	af00      	add	r7, sp, #0
 800e912:	4603      	mov	r3, r0
 800e914:	6039      	str	r1, [r7, #0]
 800e916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	2204      	movs	r2, #4
 800e91c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e91e:	4b03      	ldr	r3, [pc, #12]	; (800e92c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e920:	4618      	mov	r0, r3
 800e922:	370c      	adds	r7, #12
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr
 800e92c:	20000178 	.word	0x20000178

0800e930 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	4603      	mov	r3, r0
 800e938:	6039      	str	r1, [r7, #0]
 800e93a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e93c:	79fb      	ldrb	r3, [r7, #7]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d105      	bne.n	800e94e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e942:	683a      	ldr	r2, [r7, #0]
 800e944:	4907      	ldr	r1, [pc, #28]	; (800e964 <USBD_FS_ProductStrDescriptor+0x34>)
 800e946:	4808      	ldr	r0, [pc, #32]	; (800e968 <USBD_FS_ProductStrDescriptor+0x38>)
 800e948:	f7fe f887 	bl	800ca5a <USBD_GetString>
 800e94c:	e004      	b.n	800e958 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e94e:	683a      	ldr	r2, [r7, #0]
 800e950:	4904      	ldr	r1, [pc, #16]	; (800e964 <USBD_FS_ProductStrDescriptor+0x34>)
 800e952:	4805      	ldr	r0, [pc, #20]	; (800e968 <USBD_FS_ProductStrDescriptor+0x38>)
 800e954:	f7fe f881 	bl	800ca5a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e958:	4b02      	ldr	r3, [pc, #8]	; (800e964 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3708      	adds	r7, #8
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	20000f78 	.word	0x20000f78
 800e968:	0800f4d0 	.word	0x0800f4d0

0800e96c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	4603      	mov	r3, r0
 800e974:	6039      	str	r1, [r7, #0]
 800e976:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e978:	683a      	ldr	r2, [r7, #0]
 800e97a:	4904      	ldr	r1, [pc, #16]	; (800e98c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e97c:	4804      	ldr	r0, [pc, #16]	; (800e990 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e97e:	f7fe f86c 	bl	800ca5a <USBD_GetString>
  return USBD_StrDesc;
 800e982:	4b02      	ldr	r3, [pc, #8]	; (800e98c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e984:	4618      	mov	r0, r3
 800e986:	3708      	adds	r7, #8
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	20000f78 	.word	0x20000f78
 800e990:	0800f4dc 	.word	0x0800f4dc

0800e994 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
 800e99a:	4603      	mov	r3, r0
 800e99c:	6039      	str	r1, [r7, #0]
 800e99e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	221a      	movs	r2, #26
 800e9a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e9a6:	f000 f843 	bl	800ea30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e9aa:	4b02      	ldr	r3, [pc, #8]	; (800e9b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3708      	adds	r7, #8
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	2000017c 	.word	0x2000017c

0800e9b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	4603      	mov	r3, r0
 800e9c0:	6039      	str	r1, [r7, #0]
 800e9c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e9c4:	79fb      	ldrb	r3, [r7, #7]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d105      	bne.n	800e9d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e9ca:	683a      	ldr	r2, [r7, #0]
 800e9cc:	4907      	ldr	r1, [pc, #28]	; (800e9ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800e9ce:	4808      	ldr	r0, [pc, #32]	; (800e9f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e9d0:	f7fe f843 	bl	800ca5a <USBD_GetString>
 800e9d4:	e004      	b.n	800e9e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e9d6:	683a      	ldr	r2, [r7, #0]
 800e9d8:	4904      	ldr	r1, [pc, #16]	; (800e9ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800e9da:	4805      	ldr	r0, [pc, #20]	; (800e9f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e9dc:	f7fe f83d 	bl	800ca5a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e9e0:	4b02      	ldr	r3, [pc, #8]	; (800e9ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3708      	adds	r7, #8
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	20000f78 	.word	0x20000f78
 800e9f0:	0800f4ec 	.word	0x0800f4ec

0800e9f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	6039      	str	r1, [r7, #0]
 800e9fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ea00:	79fb      	ldrb	r3, [r7, #7]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d105      	bne.n	800ea12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ea06:	683a      	ldr	r2, [r7, #0]
 800ea08:	4907      	ldr	r1, [pc, #28]	; (800ea28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ea0a:	4808      	ldr	r0, [pc, #32]	; (800ea2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ea0c:	f7fe f825 	bl	800ca5a <USBD_GetString>
 800ea10:	e004      	b.n	800ea1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ea12:	683a      	ldr	r2, [r7, #0]
 800ea14:	4904      	ldr	r1, [pc, #16]	; (800ea28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ea16:	4805      	ldr	r0, [pc, #20]	; (800ea2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ea18:	f7fe f81f 	bl	800ca5a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea1c:	4b02      	ldr	r3, [pc, #8]	; (800ea28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3708      	adds	r7, #8
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	20000f78 	.word	0x20000f78
 800ea2c:	0800f4fc 	.word	0x0800f4fc

0800ea30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ea36:	4b0f      	ldr	r3, [pc, #60]	; (800ea74 <Get_SerialNum+0x44>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ea3c:	4b0e      	ldr	r3, [pc, #56]	; (800ea78 <Get_SerialNum+0x48>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ea42:	4b0e      	ldr	r3, [pc, #56]	; (800ea7c <Get_SerialNum+0x4c>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ea48:	68fa      	ldr	r2, [r7, #12]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	4413      	add	r3, r2
 800ea4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d009      	beq.n	800ea6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ea56:	2208      	movs	r2, #8
 800ea58:	4909      	ldr	r1, [pc, #36]	; (800ea80 <Get_SerialNum+0x50>)
 800ea5a:	68f8      	ldr	r0, [r7, #12]
 800ea5c:	f000 f814 	bl	800ea88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ea60:	2204      	movs	r2, #4
 800ea62:	4908      	ldr	r1, [pc, #32]	; (800ea84 <Get_SerialNum+0x54>)
 800ea64:	68b8      	ldr	r0, [r7, #8]
 800ea66:	f000 f80f 	bl	800ea88 <IntToUnicode>
  }
}
 800ea6a:	bf00      	nop
 800ea6c:	3710      	adds	r7, #16
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	1fff7a10 	.word	0x1fff7a10
 800ea78:	1fff7a14 	.word	0x1fff7a14
 800ea7c:	1fff7a18 	.word	0x1fff7a18
 800ea80:	2000017e 	.word	0x2000017e
 800ea84:	2000018e 	.word	0x2000018e

0800ea88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b087      	sub	sp, #28
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	4613      	mov	r3, r2
 800ea94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ea96:	2300      	movs	r3, #0
 800ea98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	75fb      	strb	r3, [r7, #23]
 800ea9e:	e027      	b.n	800eaf0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	0f1b      	lsrs	r3, r3, #28
 800eaa4:	2b09      	cmp	r3, #9
 800eaa6:	d80b      	bhi.n	800eac0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	0f1b      	lsrs	r3, r3, #28
 800eaac:	b2da      	uxtb	r2, r3
 800eaae:	7dfb      	ldrb	r3, [r7, #23]
 800eab0:	005b      	lsls	r3, r3, #1
 800eab2:	4619      	mov	r1, r3
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	440b      	add	r3, r1
 800eab8:	3230      	adds	r2, #48	; 0x30
 800eaba:	b2d2      	uxtb	r2, r2
 800eabc:	701a      	strb	r2, [r3, #0]
 800eabe:	e00a      	b.n	800ead6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	0f1b      	lsrs	r3, r3, #28
 800eac4:	b2da      	uxtb	r2, r3
 800eac6:	7dfb      	ldrb	r3, [r7, #23]
 800eac8:	005b      	lsls	r3, r3, #1
 800eaca:	4619      	mov	r1, r3
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	440b      	add	r3, r1
 800ead0:	3237      	adds	r2, #55	; 0x37
 800ead2:	b2d2      	uxtb	r2, r2
 800ead4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	011b      	lsls	r3, r3, #4
 800eada:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800eadc:	7dfb      	ldrb	r3, [r7, #23]
 800eade:	005b      	lsls	r3, r3, #1
 800eae0:	3301      	adds	r3, #1
 800eae2:	68ba      	ldr	r2, [r7, #8]
 800eae4:	4413      	add	r3, r2
 800eae6:	2200      	movs	r2, #0
 800eae8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800eaea:	7dfb      	ldrb	r3, [r7, #23]
 800eaec:	3301      	adds	r3, #1
 800eaee:	75fb      	strb	r3, [r7, #23]
 800eaf0:	7dfa      	ldrb	r2, [r7, #23]
 800eaf2:	79fb      	ldrb	r3, [r7, #7]
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d3d3      	bcc.n	800eaa0 <IntToUnicode+0x18>
  }
}
 800eaf8:	bf00      	nop
 800eafa:	371c      	adds	r7, #28
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr

0800eb04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800eb04:	f8df d034 	ldr.w	sp, [pc, #52]	; 800eb3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800eb08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800eb0a:	e003      	b.n	800eb14 <LoopCopyDataInit>

0800eb0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800eb0c:	4b0c      	ldr	r3, [pc, #48]	; (800eb40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800eb0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800eb10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800eb12:	3104      	adds	r1, #4

0800eb14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800eb14:	480b      	ldr	r0, [pc, #44]	; (800eb44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800eb16:	4b0c      	ldr	r3, [pc, #48]	; (800eb48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800eb18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800eb1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800eb1c:	d3f6      	bcc.n	800eb0c <CopyDataInit>
  ldr  r2, =_sbss
 800eb1e:	4a0b      	ldr	r2, [pc, #44]	; (800eb4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800eb20:	e002      	b.n	800eb28 <LoopFillZerobss>

0800eb22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800eb22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800eb24:	f842 3b04 	str.w	r3, [r2], #4

0800eb28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800eb28:	4b09      	ldr	r3, [pc, #36]	; (800eb50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800eb2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800eb2c:	d3f9      	bcc.n	800eb22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800eb2e:	f7ff fa05 	bl	800df3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800eb32:	f000 f817 	bl	800eb64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800eb36:	f7fe fa2b 	bl	800cf90 <main>
  bx  lr    
 800eb3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800eb3c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800eb40:	0800f5b4 	.word	0x0800f5b4
  ldr  r0, =_sdata
 800eb44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800eb48:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 800eb4c:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 800eb50:	2000117c 	.word	0x2000117c

0800eb54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800eb54:	e7fe      	b.n	800eb54 <ADC_IRQHandler>
	...

0800eb58 <__errno>:
 800eb58:	4b01      	ldr	r3, [pc, #4]	; (800eb60 <__errno+0x8>)
 800eb5a:	6818      	ldr	r0, [r3, #0]
 800eb5c:	4770      	bx	lr
 800eb5e:	bf00      	nop
 800eb60:	20000198 	.word	0x20000198

0800eb64 <__libc_init_array>:
 800eb64:	b570      	push	{r4, r5, r6, lr}
 800eb66:	4e0d      	ldr	r6, [pc, #52]	; (800eb9c <__libc_init_array+0x38>)
 800eb68:	4c0d      	ldr	r4, [pc, #52]	; (800eba0 <__libc_init_array+0x3c>)
 800eb6a:	1ba4      	subs	r4, r4, r6
 800eb6c:	10a4      	asrs	r4, r4, #2
 800eb6e:	2500      	movs	r5, #0
 800eb70:	42a5      	cmp	r5, r4
 800eb72:	d109      	bne.n	800eb88 <__libc_init_array+0x24>
 800eb74:	4e0b      	ldr	r6, [pc, #44]	; (800eba4 <__libc_init_array+0x40>)
 800eb76:	4c0c      	ldr	r4, [pc, #48]	; (800eba8 <__libc_init_array+0x44>)
 800eb78:	f000 fc98 	bl	800f4ac <_init>
 800eb7c:	1ba4      	subs	r4, r4, r6
 800eb7e:	10a4      	asrs	r4, r4, #2
 800eb80:	2500      	movs	r5, #0
 800eb82:	42a5      	cmp	r5, r4
 800eb84:	d105      	bne.n	800eb92 <__libc_init_array+0x2e>
 800eb86:	bd70      	pop	{r4, r5, r6, pc}
 800eb88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800eb8c:	4798      	blx	r3
 800eb8e:	3501      	adds	r5, #1
 800eb90:	e7ee      	b.n	800eb70 <__libc_init_array+0xc>
 800eb92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800eb96:	4798      	blx	r3
 800eb98:	3501      	adds	r5, #1
 800eb9a:	e7f2      	b.n	800eb82 <__libc_init_array+0x1e>
 800eb9c:	0800f5ac 	.word	0x0800f5ac
 800eba0:	0800f5ac 	.word	0x0800f5ac
 800eba4:	0800f5ac 	.word	0x0800f5ac
 800eba8:	0800f5b0 	.word	0x0800f5b0

0800ebac <malloc>:
 800ebac:	4b02      	ldr	r3, [pc, #8]	; (800ebb8 <malloc+0xc>)
 800ebae:	4601      	mov	r1, r0
 800ebb0:	6818      	ldr	r0, [r3, #0]
 800ebb2:	f000 b861 	b.w	800ec78 <_malloc_r>
 800ebb6:	bf00      	nop
 800ebb8:	20000198 	.word	0x20000198

0800ebbc <free>:
 800ebbc:	4b02      	ldr	r3, [pc, #8]	; (800ebc8 <free+0xc>)
 800ebbe:	4601      	mov	r1, r0
 800ebc0:	6818      	ldr	r0, [r3, #0]
 800ebc2:	f000 b80b 	b.w	800ebdc <_free_r>
 800ebc6:	bf00      	nop
 800ebc8:	20000198 	.word	0x20000198

0800ebcc <memset>:
 800ebcc:	4402      	add	r2, r0
 800ebce:	4603      	mov	r3, r0
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	d100      	bne.n	800ebd6 <memset+0xa>
 800ebd4:	4770      	bx	lr
 800ebd6:	f803 1b01 	strb.w	r1, [r3], #1
 800ebda:	e7f9      	b.n	800ebd0 <memset+0x4>

0800ebdc <_free_r>:
 800ebdc:	b538      	push	{r3, r4, r5, lr}
 800ebde:	4605      	mov	r5, r0
 800ebe0:	2900      	cmp	r1, #0
 800ebe2:	d045      	beq.n	800ec70 <_free_r+0x94>
 800ebe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebe8:	1f0c      	subs	r4, r1, #4
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	bfb8      	it	lt
 800ebee:	18e4      	addlt	r4, r4, r3
 800ebf0:	f000 fbae 	bl	800f350 <__malloc_lock>
 800ebf4:	4a1f      	ldr	r2, [pc, #124]	; (800ec74 <_free_r+0x98>)
 800ebf6:	6813      	ldr	r3, [r2, #0]
 800ebf8:	4610      	mov	r0, r2
 800ebfa:	b933      	cbnz	r3, 800ec0a <_free_r+0x2e>
 800ebfc:	6063      	str	r3, [r4, #4]
 800ebfe:	6014      	str	r4, [r2, #0]
 800ec00:	4628      	mov	r0, r5
 800ec02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec06:	f000 bba4 	b.w	800f352 <__malloc_unlock>
 800ec0a:	42a3      	cmp	r3, r4
 800ec0c:	d90c      	bls.n	800ec28 <_free_r+0x4c>
 800ec0e:	6821      	ldr	r1, [r4, #0]
 800ec10:	1862      	adds	r2, r4, r1
 800ec12:	4293      	cmp	r3, r2
 800ec14:	bf04      	itt	eq
 800ec16:	681a      	ldreq	r2, [r3, #0]
 800ec18:	685b      	ldreq	r3, [r3, #4]
 800ec1a:	6063      	str	r3, [r4, #4]
 800ec1c:	bf04      	itt	eq
 800ec1e:	1852      	addeq	r2, r2, r1
 800ec20:	6022      	streq	r2, [r4, #0]
 800ec22:	6004      	str	r4, [r0, #0]
 800ec24:	e7ec      	b.n	800ec00 <_free_r+0x24>
 800ec26:	4613      	mov	r3, r2
 800ec28:	685a      	ldr	r2, [r3, #4]
 800ec2a:	b10a      	cbz	r2, 800ec30 <_free_r+0x54>
 800ec2c:	42a2      	cmp	r2, r4
 800ec2e:	d9fa      	bls.n	800ec26 <_free_r+0x4a>
 800ec30:	6819      	ldr	r1, [r3, #0]
 800ec32:	1858      	adds	r0, r3, r1
 800ec34:	42a0      	cmp	r0, r4
 800ec36:	d10b      	bne.n	800ec50 <_free_r+0x74>
 800ec38:	6820      	ldr	r0, [r4, #0]
 800ec3a:	4401      	add	r1, r0
 800ec3c:	1858      	adds	r0, r3, r1
 800ec3e:	4282      	cmp	r2, r0
 800ec40:	6019      	str	r1, [r3, #0]
 800ec42:	d1dd      	bne.n	800ec00 <_free_r+0x24>
 800ec44:	6810      	ldr	r0, [r2, #0]
 800ec46:	6852      	ldr	r2, [r2, #4]
 800ec48:	605a      	str	r2, [r3, #4]
 800ec4a:	4401      	add	r1, r0
 800ec4c:	6019      	str	r1, [r3, #0]
 800ec4e:	e7d7      	b.n	800ec00 <_free_r+0x24>
 800ec50:	d902      	bls.n	800ec58 <_free_r+0x7c>
 800ec52:	230c      	movs	r3, #12
 800ec54:	602b      	str	r3, [r5, #0]
 800ec56:	e7d3      	b.n	800ec00 <_free_r+0x24>
 800ec58:	6820      	ldr	r0, [r4, #0]
 800ec5a:	1821      	adds	r1, r4, r0
 800ec5c:	428a      	cmp	r2, r1
 800ec5e:	bf04      	itt	eq
 800ec60:	6811      	ldreq	r1, [r2, #0]
 800ec62:	6852      	ldreq	r2, [r2, #4]
 800ec64:	6062      	str	r2, [r4, #4]
 800ec66:	bf04      	itt	eq
 800ec68:	1809      	addeq	r1, r1, r0
 800ec6a:	6021      	streq	r1, [r4, #0]
 800ec6c:	605c      	str	r4, [r3, #4]
 800ec6e:	e7c7      	b.n	800ec00 <_free_r+0x24>
 800ec70:	bd38      	pop	{r3, r4, r5, pc}
 800ec72:	bf00      	nop
 800ec74:	20000250 	.word	0x20000250

0800ec78 <_malloc_r>:
 800ec78:	b570      	push	{r4, r5, r6, lr}
 800ec7a:	1ccd      	adds	r5, r1, #3
 800ec7c:	f025 0503 	bic.w	r5, r5, #3
 800ec80:	3508      	adds	r5, #8
 800ec82:	2d0c      	cmp	r5, #12
 800ec84:	bf38      	it	cc
 800ec86:	250c      	movcc	r5, #12
 800ec88:	2d00      	cmp	r5, #0
 800ec8a:	4606      	mov	r6, r0
 800ec8c:	db01      	blt.n	800ec92 <_malloc_r+0x1a>
 800ec8e:	42a9      	cmp	r1, r5
 800ec90:	d903      	bls.n	800ec9a <_malloc_r+0x22>
 800ec92:	230c      	movs	r3, #12
 800ec94:	6033      	str	r3, [r6, #0]
 800ec96:	2000      	movs	r0, #0
 800ec98:	bd70      	pop	{r4, r5, r6, pc}
 800ec9a:	f000 fb59 	bl	800f350 <__malloc_lock>
 800ec9e:	4a21      	ldr	r2, [pc, #132]	; (800ed24 <_malloc_r+0xac>)
 800eca0:	6814      	ldr	r4, [r2, #0]
 800eca2:	4621      	mov	r1, r4
 800eca4:	b991      	cbnz	r1, 800eccc <_malloc_r+0x54>
 800eca6:	4c20      	ldr	r4, [pc, #128]	; (800ed28 <_malloc_r+0xb0>)
 800eca8:	6823      	ldr	r3, [r4, #0]
 800ecaa:	b91b      	cbnz	r3, 800ecb4 <_malloc_r+0x3c>
 800ecac:	4630      	mov	r0, r6
 800ecae:	f000 f8a1 	bl	800edf4 <_sbrk_r>
 800ecb2:	6020      	str	r0, [r4, #0]
 800ecb4:	4629      	mov	r1, r5
 800ecb6:	4630      	mov	r0, r6
 800ecb8:	f000 f89c 	bl	800edf4 <_sbrk_r>
 800ecbc:	1c43      	adds	r3, r0, #1
 800ecbe:	d124      	bne.n	800ed0a <_malloc_r+0x92>
 800ecc0:	230c      	movs	r3, #12
 800ecc2:	6033      	str	r3, [r6, #0]
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	f000 fb44 	bl	800f352 <__malloc_unlock>
 800ecca:	e7e4      	b.n	800ec96 <_malloc_r+0x1e>
 800eccc:	680b      	ldr	r3, [r1, #0]
 800ecce:	1b5b      	subs	r3, r3, r5
 800ecd0:	d418      	bmi.n	800ed04 <_malloc_r+0x8c>
 800ecd2:	2b0b      	cmp	r3, #11
 800ecd4:	d90f      	bls.n	800ecf6 <_malloc_r+0x7e>
 800ecd6:	600b      	str	r3, [r1, #0]
 800ecd8:	50cd      	str	r5, [r1, r3]
 800ecda:	18cc      	adds	r4, r1, r3
 800ecdc:	4630      	mov	r0, r6
 800ecde:	f000 fb38 	bl	800f352 <__malloc_unlock>
 800ece2:	f104 000b 	add.w	r0, r4, #11
 800ece6:	1d23      	adds	r3, r4, #4
 800ece8:	f020 0007 	bic.w	r0, r0, #7
 800ecec:	1ac3      	subs	r3, r0, r3
 800ecee:	d0d3      	beq.n	800ec98 <_malloc_r+0x20>
 800ecf0:	425a      	negs	r2, r3
 800ecf2:	50e2      	str	r2, [r4, r3]
 800ecf4:	e7d0      	b.n	800ec98 <_malloc_r+0x20>
 800ecf6:	428c      	cmp	r4, r1
 800ecf8:	684b      	ldr	r3, [r1, #4]
 800ecfa:	bf16      	itet	ne
 800ecfc:	6063      	strne	r3, [r4, #4]
 800ecfe:	6013      	streq	r3, [r2, #0]
 800ed00:	460c      	movne	r4, r1
 800ed02:	e7eb      	b.n	800ecdc <_malloc_r+0x64>
 800ed04:	460c      	mov	r4, r1
 800ed06:	6849      	ldr	r1, [r1, #4]
 800ed08:	e7cc      	b.n	800eca4 <_malloc_r+0x2c>
 800ed0a:	1cc4      	adds	r4, r0, #3
 800ed0c:	f024 0403 	bic.w	r4, r4, #3
 800ed10:	42a0      	cmp	r0, r4
 800ed12:	d005      	beq.n	800ed20 <_malloc_r+0xa8>
 800ed14:	1a21      	subs	r1, r4, r0
 800ed16:	4630      	mov	r0, r6
 800ed18:	f000 f86c 	bl	800edf4 <_sbrk_r>
 800ed1c:	3001      	adds	r0, #1
 800ed1e:	d0cf      	beq.n	800ecc0 <_malloc_r+0x48>
 800ed20:	6025      	str	r5, [r4, #0]
 800ed22:	e7db      	b.n	800ecdc <_malloc_r+0x64>
 800ed24:	20000250 	.word	0x20000250
 800ed28:	20000254 	.word	0x20000254

0800ed2c <_puts_r>:
 800ed2c:	b570      	push	{r4, r5, r6, lr}
 800ed2e:	460e      	mov	r6, r1
 800ed30:	4605      	mov	r5, r0
 800ed32:	b118      	cbz	r0, 800ed3c <_puts_r+0x10>
 800ed34:	6983      	ldr	r3, [r0, #24]
 800ed36:	b90b      	cbnz	r3, 800ed3c <_puts_r+0x10>
 800ed38:	f000 fa1c 	bl	800f174 <__sinit>
 800ed3c:	69ab      	ldr	r3, [r5, #24]
 800ed3e:	68ac      	ldr	r4, [r5, #8]
 800ed40:	b913      	cbnz	r3, 800ed48 <_puts_r+0x1c>
 800ed42:	4628      	mov	r0, r5
 800ed44:	f000 fa16 	bl	800f174 <__sinit>
 800ed48:	4b23      	ldr	r3, [pc, #140]	; (800edd8 <_puts_r+0xac>)
 800ed4a:	429c      	cmp	r4, r3
 800ed4c:	d117      	bne.n	800ed7e <_puts_r+0x52>
 800ed4e:	686c      	ldr	r4, [r5, #4]
 800ed50:	89a3      	ldrh	r3, [r4, #12]
 800ed52:	071b      	lsls	r3, r3, #28
 800ed54:	d51d      	bpl.n	800ed92 <_puts_r+0x66>
 800ed56:	6923      	ldr	r3, [r4, #16]
 800ed58:	b1db      	cbz	r3, 800ed92 <_puts_r+0x66>
 800ed5a:	3e01      	subs	r6, #1
 800ed5c:	68a3      	ldr	r3, [r4, #8]
 800ed5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ed62:	3b01      	subs	r3, #1
 800ed64:	60a3      	str	r3, [r4, #8]
 800ed66:	b9e9      	cbnz	r1, 800eda4 <_puts_r+0x78>
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	da2e      	bge.n	800edca <_puts_r+0x9e>
 800ed6c:	4622      	mov	r2, r4
 800ed6e:	210a      	movs	r1, #10
 800ed70:	4628      	mov	r0, r5
 800ed72:	f000 f84f 	bl	800ee14 <__swbuf_r>
 800ed76:	3001      	adds	r0, #1
 800ed78:	d011      	beq.n	800ed9e <_puts_r+0x72>
 800ed7a:	200a      	movs	r0, #10
 800ed7c:	e011      	b.n	800eda2 <_puts_r+0x76>
 800ed7e:	4b17      	ldr	r3, [pc, #92]	; (800eddc <_puts_r+0xb0>)
 800ed80:	429c      	cmp	r4, r3
 800ed82:	d101      	bne.n	800ed88 <_puts_r+0x5c>
 800ed84:	68ac      	ldr	r4, [r5, #8]
 800ed86:	e7e3      	b.n	800ed50 <_puts_r+0x24>
 800ed88:	4b15      	ldr	r3, [pc, #84]	; (800ede0 <_puts_r+0xb4>)
 800ed8a:	429c      	cmp	r4, r3
 800ed8c:	bf08      	it	eq
 800ed8e:	68ec      	ldreq	r4, [r5, #12]
 800ed90:	e7de      	b.n	800ed50 <_puts_r+0x24>
 800ed92:	4621      	mov	r1, r4
 800ed94:	4628      	mov	r0, r5
 800ed96:	f000 f88f 	bl	800eeb8 <__swsetup_r>
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	d0dd      	beq.n	800ed5a <_puts_r+0x2e>
 800ed9e:	f04f 30ff 	mov.w	r0, #4294967295
 800eda2:	bd70      	pop	{r4, r5, r6, pc}
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	da04      	bge.n	800edb2 <_puts_r+0x86>
 800eda8:	69a2      	ldr	r2, [r4, #24]
 800edaa:	429a      	cmp	r2, r3
 800edac:	dc06      	bgt.n	800edbc <_puts_r+0x90>
 800edae:	290a      	cmp	r1, #10
 800edb0:	d004      	beq.n	800edbc <_puts_r+0x90>
 800edb2:	6823      	ldr	r3, [r4, #0]
 800edb4:	1c5a      	adds	r2, r3, #1
 800edb6:	6022      	str	r2, [r4, #0]
 800edb8:	7019      	strb	r1, [r3, #0]
 800edba:	e7cf      	b.n	800ed5c <_puts_r+0x30>
 800edbc:	4622      	mov	r2, r4
 800edbe:	4628      	mov	r0, r5
 800edc0:	f000 f828 	bl	800ee14 <__swbuf_r>
 800edc4:	3001      	adds	r0, #1
 800edc6:	d1c9      	bne.n	800ed5c <_puts_r+0x30>
 800edc8:	e7e9      	b.n	800ed9e <_puts_r+0x72>
 800edca:	6823      	ldr	r3, [r4, #0]
 800edcc:	200a      	movs	r0, #10
 800edce:	1c5a      	adds	r2, r3, #1
 800edd0:	6022      	str	r2, [r4, #0]
 800edd2:	7018      	strb	r0, [r3, #0]
 800edd4:	e7e5      	b.n	800eda2 <_puts_r+0x76>
 800edd6:	bf00      	nop
 800edd8:	0800f564 	.word	0x0800f564
 800eddc:	0800f584 	.word	0x0800f584
 800ede0:	0800f544 	.word	0x0800f544

0800ede4 <puts>:
 800ede4:	4b02      	ldr	r3, [pc, #8]	; (800edf0 <puts+0xc>)
 800ede6:	4601      	mov	r1, r0
 800ede8:	6818      	ldr	r0, [r3, #0]
 800edea:	f7ff bf9f 	b.w	800ed2c <_puts_r>
 800edee:	bf00      	nop
 800edf0:	20000198 	.word	0x20000198

0800edf4 <_sbrk_r>:
 800edf4:	b538      	push	{r3, r4, r5, lr}
 800edf6:	4c06      	ldr	r4, [pc, #24]	; (800ee10 <_sbrk_r+0x1c>)
 800edf8:	2300      	movs	r3, #0
 800edfa:	4605      	mov	r5, r0
 800edfc:	4608      	mov	r0, r1
 800edfe:	6023      	str	r3, [r4, #0]
 800ee00:	f7ff f870 	bl	800dee4 <_sbrk>
 800ee04:	1c43      	adds	r3, r0, #1
 800ee06:	d102      	bne.n	800ee0e <_sbrk_r+0x1a>
 800ee08:	6823      	ldr	r3, [r4, #0]
 800ee0a:	b103      	cbz	r3, 800ee0e <_sbrk_r+0x1a>
 800ee0c:	602b      	str	r3, [r5, #0]
 800ee0e:	bd38      	pop	{r3, r4, r5, pc}
 800ee10:	20001178 	.word	0x20001178

0800ee14 <__swbuf_r>:
 800ee14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee16:	460e      	mov	r6, r1
 800ee18:	4614      	mov	r4, r2
 800ee1a:	4605      	mov	r5, r0
 800ee1c:	b118      	cbz	r0, 800ee26 <__swbuf_r+0x12>
 800ee1e:	6983      	ldr	r3, [r0, #24]
 800ee20:	b90b      	cbnz	r3, 800ee26 <__swbuf_r+0x12>
 800ee22:	f000 f9a7 	bl	800f174 <__sinit>
 800ee26:	4b21      	ldr	r3, [pc, #132]	; (800eeac <__swbuf_r+0x98>)
 800ee28:	429c      	cmp	r4, r3
 800ee2a:	d12a      	bne.n	800ee82 <__swbuf_r+0x6e>
 800ee2c:	686c      	ldr	r4, [r5, #4]
 800ee2e:	69a3      	ldr	r3, [r4, #24]
 800ee30:	60a3      	str	r3, [r4, #8]
 800ee32:	89a3      	ldrh	r3, [r4, #12]
 800ee34:	071a      	lsls	r2, r3, #28
 800ee36:	d52e      	bpl.n	800ee96 <__swbuf_r+0x82>
 800ee38:	6923      	ldr	r3, [r4, #16]
 800ee3a:	b363      	cbz	r3, 800ee96 <__swbuf_r+0x82>
 800ee3c:	6923      	ldr	r3, [r4, #16]
 800ee3e:	6820      	ldr	r0, [r4, #0]
 800ee40:	1ac0      	subs	r0, r0, r3
 800ee42:	6963      	ldr	r3, [r4, #20]
 800ee44:	b2f6      	uxtb	r6, r6
 800ee46:	4283      	cmp	r3, r0
 800ee48:	4637      	mov	r7, r6
 800ee4a:	dc04      	bgt.n	800ee56 <__swbuf_r+0x42>
 800ee4c:	4621      	mov	r1, r4
 800ee4e:	4628      	mov	r0, r5
 800ee50:	f000 f926 	bl	800f0a0 <_fflush_r>
 800ee54:	bb28      	cbnz	r0, 800eea2 <__swbuf_r+0x8e>
 800ee56:	68a3      	ldr	r3, [r4, #8]
 800ee58:	3b01      	subs	r3, #1
 800ee5a:	60a3      	str	r3, [r4, #8]
 800ee5c:	6823      	ldr	r3, [r4, #0]
 800ee5e:	1c5a      	adds	r2, r3, #1
 800ee60:	6022      	str	r2, [r4, #0]
 800ee62:	701e      	strb	r6, [r3, #0]
 800ee64:	6963      	ldr	r3, [r4, #20]
 800ee66:	3001      	adds	r0, #1
 800ee68:	4283      	cmp	r3, r0
 800ee6a:	d004      	beq.n	800ee76 <__swbuf_r+0x62>
 800ee6c:	89a3      	ldrh	r3, [r4, #12]
 800ee6e:	07db      	lsls	r3, r3, #31
 800ee70:	d519      	bpl.n	800eea6 <__swbuf_r+0x92>
 800ee72:	2e0a      	cmp	r6, #10
 800ee74:	d117      	bne.n	800eea6 <__swbuf_r+0x92>
 800ee76:	4621      	mov	r1, r4
 800ee78:	4628      	mov	r0, r5
 800ee7a:	f000 f911 	bl	800f0a0 <_fflush_r>
 800ee7e:	b190      	cbz	r0, 800eea6 <__swbuf_r+0x92>
 800ee80:	e00f      	b.n	800eea2 <__swbuf_r+0x8e>
 800ee82:	4b0b      	ldr	r3, [pc, #44]	; (800eeb0 <__swbuf_r+0x9c>)
 800ee84:	429c      	cmp	r4, r3
 800ee86:	d101      	bne.n	800ee8c <__swbuf_r+0x78>
 800ee88:	68ac      	ldr	r4, [r5, #8]
 800ee8a:	e7d0      	b.n	800ee2e <__swbuf_r+0x1a>
 800ee8c:	4b09      	ldr	r3, [pc, #36]	; (800eeb4 <__swbuf_r+0xa0>)
 800ee8e:	429c      	cmp	r4, r3
 800ee90:	bf08      	it	eq
 800ee92:	68ec      	ldreq	r4, [r5, #12]
 800ee94:	e7cb      	b.n	800ee2e <__swbuf_r+0x1a>
 800ee96:	4621      	mov	r1, r4
 800ee98:	4628      	mov	r0, r5
 800ee9a:	f000 f80d 	bl	800eeb8 <__swsetup_r>
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	d0cc      	beq.n	800ee3c <__swbuf_r+0x28>
 800eea2:	f04f 37ff 	mov.w	r7, #4294967295
 800eea6:	4638      	mov	r0, r7
 800eea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eeaa:	bf00      	nop
 800eeac:	0800f564 	.word	0x0800f564
 800eeb0:	0800f584 	.word	0x0800f584
 800eeb4:	0800f544 	.word	0x0800f544

0800eeb8 <__swsetup_r>:
 800eeb8:	4b32      	ldr	r3, [pc, #200]	; (800ef84 <__swsetup_r+0xcc>)
 800eeba:	b570      	push	{r4, r5, r6, lr}
 800eebc:	681d      	ldr	r5, [r3, #0]
 800eebe:	4606      	mov	r6, r0
 800eec0:	460c      	mov	r4, r1
 800eec2:	b125      	cbz	r5, 800eece <__swsetup_r+0x16>
 800eec4:	69ab      	ldr	r3, [r5, #24]
 800eec6:	b913      	cbnz	r3, 800eece <__swsetup_r+0x16>
 800eec8:	4628      	mov	r0, r5
 800eeca:	f000 f953 	bl	800f174 <__sinit>
 800eece:	4b2e      	ldr	r3, [pc, #184]	; (800ef88 <__swsetup_r+0xd0>)
 800eed0:	429c      	cmp	r4, r3
 800eed2:	d10f      	bne.n	800eef4 <__swsetup_r+0x3c>
 800eed4:	686c      	ldr	r4, [r5, #4]
 800eed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eeda:	b29a      	uxth	r2, r3
 800eedc:	0715      	lsls	r5, r2, #28
 800eede:	d42c      	bmi.n	800ef3a <__swsetup_r+0x82>
 800eee0:	06d0      	lsls	r0, r2, #27
 800eee2:	d411      	bmi.n	800ef08 <__swsetup_r+0x50>
 800eee4:	2209      	movs	r2, #9
 800eee6:	6032      	str	r2, [r6, #0]
 800eee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eeec:	81a3      	strh	r3, [r4, #12]
 800eeee:	f04f 30ff 	mov.w	r0, #4294967295
 800eef2:	e03e      	b.n	800ef72 <__swsetup_r+0xba>
 800eef4:	4b25      	ldr	r3, [pc, #148]	; (800ef8c <__swsetup_r+0xd4>)
 800eef6:	429c      	cmp	r4, r3
 800eef8:	d101      	bne.n	800eefe <__swsetup_r+0x46>
 800eefa:	68ac      	ldr	r4, [r5, #8]
 800eefc:	e7eb      	b.n	800eed6 <__swsetup_r+0x1e>
 800eefe:	4b24      	ldr	r3, [pc, #144]	; (800ef90 <__swsetup_r+0xd8>)
 800ef00:	429c      	cmp	r4, r3
 800ef02:	bf08      	it	eq
 800ef04:	68ec      	ldreq	r4, [r5, #12]
 800ef06:	e7e6      	b.n	800eed6 <__swsetup_r+0x1e>
 800ef08:	0751      	lsls	r1, r2, #29
 800ef0a:	d512      	bpl.n	800ef32 <__swsetup_r+0x7a>
 800ef0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef0e:	b141      	cbz	r1, 800ef22 <__swsetup_r+0x6a>
 800ef10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef14:	4299      	cmp	r1, r3
 800ef16:	d002      	beq.n	800ef1e <__swsetup_r+0x66>
 800ef18:	4630      	mov	r0, r6
 800ef1a:	f7ff fe5f 	bl	800ebdc <_free_r>
 800ef1e:	2300      	movs	r3, #0
 800ef20:	6363      	str	r3, [r4, #52]	; 0x34
 800ef22:	89a3      	ldrh	r3, [r4, #12]
 800ef24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef28:	81a3      	strh	r3, [r4, #12]
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	6063      	str	r3, [r4, #4]
 800ef2e:	6923      	ldr	r3, [r4, #16]
 800ef30:	6023      	str	r3, [r4, #0]
 800ef32:	89a3      	ldrh	r3, [r4, #12]
 800ef34:	f043 0308 	orr.w	r3, r3, #8
 800ef38:	81a3      	strh	r3, [r4, #12]
 800ef3a:	6923      	ldr	r3, [r4, #16]
 800ef3c:	b94b      	cbnz	r3, 800ef52 <__swsetup_r+0x9a>
 800ef3e:	89a3      	ldrh	r3, [r4, #12]
 800ef40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef48:	d003      	beq.n	800ef52 <__swsetup_r+0x9a>
 800ef4a:	4621      	mov	r1, r4
 800ef4c:	4630      	mov	r0, r6
 800ef4e:	f000 f9bf 	bl	800f2d0 <__smakebuf_r>
 800ef52:	89a2      	ldrh	r2, [r4, #12]
 800ef54:	f012 0301 	ands.w	r3, r2, #1
 800ef58:	d00c      	beq.n	800ef74 <__swsetup_r+0xbc>
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	60a3      	str	r3, [r4, #8]
 800ef5e:	6963      	ldr	r3, [r4, #20]
 800ef60:	425b      	negs	r3, r3
 800ef62:	61a3      	str	r3, [r4, #24]
 800ef64:	6923      	ldr	r3, [r4, #16]
 800ef66:	b953      	cbnz	r3, 800ef7e <__swsetup_r+0xc6>
 800ef68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ef70:	d1ba      	bne.n	800eee8 <__swsetup_r+0x30>
 800ef72:	bd70      	pop	{r4, r5, r6, pc}
 800ef74:	0792      	lsls	r2, r2, #30
 800ef76:	bf58      	it	pl
 800ef78:	6963      	ldrpl	r3, [r4, #20]
 800ef7a:	60a3      	str	r3, [r4, #8]
 800ef7c:	e7f2      	b.n	800ef64 <__swsetup_r+0xac>
 800ef7e:	2000      	movs	r0, #0
 800ef80:	e7f7      	b.n	800ef72 <__swsetup_r+0xba>
 800ef82:	bf00      	nop
 800ef84:	20000198 	.word	0x20000198
 800ef88:	0800f564 	.word	0x0800f564
 800ef8c:	0800f584 	.word	0x0800f584
 800ef90:	0800f544 	.word	0x0800f544

0800ef94 <__sflush_r>:
 800ef94:	898a      	ldrh	r2, [r1, #12]
 800ef96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef9a:	4605      	mov	r5, r0
 800ef9c:	0710      	lsls	r0, r2, #28
 800ef9e:	460c      	mov	r4, r1
 800efa0:	d458      	bmi.n	800f054 <__sflush_r+0xc0>
 800efa2:	684b      	ldr	r3, [r1, #4]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	dc05      	bgt.n	800efb4 <__sflush_r+0x20>
 800efa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800efaa:	2b00      	cmp	r3, #0
 800efac:	dc02      	bgt.n	800efb4 <__sflush_r+0x20>
 800efae:	2000      	movs	r0, #0
 800efb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efb6:	2e00      	cmp	r6, #0
 800efb8:	d0f9      	beq.n	800efae <__sflush_r+0x1a>
 800efba:	2300      	movs	r3, #0
 800efbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800efc0:	682f      	ldr	r7, [r5, #0]
 800efc2:	6a21      	ldr	r1, [r4, #32]
 800efc4:	602b      	str	r3, [r5, #0]
 800efc6:	d032      	beq.n	800f02e <__sflush_r+0x9a>
 800efc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800efca:	89a3      	ldrh	r3, [r4, #12]
 800efcc:	075a      	lsls	r2, r3, #29
 800efce:	d505      	bpl.n	800efdc <__sflush_r+0x48>
 800efd0:	6863      	ldr	r3, [r4, #4]
 800efd2:	1ac0      	subs	r0, r0, r3
 800efd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800efd6:	b10b      	cbz	r3, 800efdc <__sflush_r+0x48>
 800efd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800efda:	1ac0      	subs	r0, r0, r3
 800efdc:	2300      	movs	r3, #0
 800efde:	4602      	mov	r2, r0
 800efe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efe2:	6a21      	ldr	r1, [r4, #32]
 800efe4:	4628      	mov	r0, r5
 800efe6:	47b0      	blx	r6
 800efe8:	1c43      	adds	r3, r0, #1
 800efea:	89a3      	ldrh	r3, [r4, #12]
 800efec:	d106      	bne.n	800effc <__sflush_r+0x68>
 800efee:	6829      	ldr	r1, [r5, #0]
 800eff0:	291d      	cmp	r1, #29
 800eff2:	d848      	bhi.n	800f086 <__sflush_r+0xf2>
 800eff4:	4a29      	ldr	r2, [pc, #164]	; (800f09c <__sflush_r+0x108>)
 800eff6:	40ca      	lsrs	r2, r1
 800eff8:	07d6      	lsls	r6, r2, #31
 800effa:	d544      	bpl.n	800f086 <__sflush_r+0xf2>
 800effc:	2200      	movs	r2, #0
 800effe:	6062      	str	r2, [r4, #4]
 800f000:	04d9      	lsls	r1, r3, #19
 800f002:	6922      	ldr	r2, [r4, #16]
 800f004:	6022      	str	r2, [r4, #0]
 800f006:	d504      	bpl.n	800f012 <__sflush_r+0x7e>
 800f008:	1c42      	adds	r2, r0, #1
 800f00a:	d101      	bne.n	800f010 <__sflush_r+0x7c>
 800f00c:	682b      	ldr	r3, [r5, #0]
 800f00e:	b903      	cbnz	r3, 800f012 <__sflush_r+0x7e>
 800f010:	6560      	str	r0, [r4, #84]	; 0x54
 800f012:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f014:	602f      	str	r7, [r5, #0]
 800f016:	2900      	cmp	r1, #0
 800f018:	d0c9      	beq.n	800efae <__sflush_r+0x1a>
 800f01a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f01e:	4299      	cmp	r1, r3
 800f020:	d002      	beq.n	800f028 <__sflush_r+0x94>
 800f022:	4628      	mov	r0, r5
 800f024:	f7ff fdda 	bl	800ebdc <_free_r>
 800f028:	2000      	movs	r0, #0
 800f02a:	6360      	str	r0, [r4, #52]	; 0x34
 800f02c:	e7c0      	b.n	800efb0 <__sflush_r+0x1c>
 800f02e:	2301      	movs	r3, #1
 800f030:	4628      	mov	r0, r5
 800f032:	47b0      	blx	r6
 800f034:	1c41      	adds	r1, r0, #1
 800f036:	d1c8      	bne.n	800efca <__sflush_r+0x36>
 800f038:	682b      	ldr	r3, [r5, #0]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d0c5      	beq.n	800efca <__sflush_r+0x36>
 800f03e:	2b1d      	cmp	r3, #29
 800f040:	d001      	beq.n	800f046 <__sflush_r+0xb2>
 800f042:	2b16      	cmp	r3, #22
 800f044:	d101      	bne.n	800f04a <__sflush_r+0xb6>
 800f046:	602f      	str	r7, [r5, #0]
 800f048:	e7b1      	b.n	800efae <__sflush_r+0x1a>
 800f04a:	89a3      	ldrh	r3, [r4, #12]
 800f04c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f050:	81a3      	strh	r3, [r4, #12]
 800f052:	e7ad      	b.n	800efb0 <__sflush_r+0x1c>
 800f054:	690f      	ldr	r7, [r1, #16]
 800f056:	2f00      	cmp	r7, #0
 800f058:	d0a9      	beq.n	800efae <__sflush_r+0x1a>
 800f05a:	0793      	lsls	r3, r2, #30
 800f05c:	680e      	ldr	r6, [r1, #0]
 800f05e:	bf08      	it	eq
 800f060:	694b      	ldreq	r3, [r1, #20]
 800f062:	600f      	str	r7, [r1, #0]
 800f064:	bf18      	it	ne
 800f066:	2300      	movne	r3, #0
 800f068:	eba6 0807 	sub.w	r8, r6, r7
 800f06c:	608b      	str	r3, [r1, #8]
 800f06e:	f1b8 0f00 	cmp.w	r8, #0
 800f072:	dd9c      	ble.n	800efae <__sflush_r+0x1a>
 800f074:	4643      	mov	r3, r8
 800f076:	463a      	mov	r2, r7
 800f078:	6a21      	ldr	r1, [r4, #32]
 800f07a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f07c:	4628      	mov	r0, r5
 800f07e:	47b0      	blx	r6
 800f080:	2800      	cmp	r0, #0
 800f082:	dc06      	bgt.n	800f092 <__sflush_r+0xfe>
 800f084:	89a3      	ldrh	r3, [r4, #12]
 800f086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f08a:	81a3      	strh	r3, [r4, #12]
 800f08c:	f04f 30ff 	mov.w	r0, #4294967295
 800f090:	e78e      	b.n	800efb0 <__sflush_r+0x1c>
 800f092:	4407      	add	r7, r0
 800f094:	eba8 0800 	sub.w	r8, r8, r0
 800f098:	e7e9      	b.n	800f06e <__sflush_r+0xda>
 800f09a:	bf00      	nop
 800f09c:	20400001 	.word	0x20400001

0800f0a0 <_fflush_r>:
 800f0a0:	b538      	push	{r3, r4, r5, lr}
 800f0a2:	690b      	ldr	r3, [r1, #16]
 800f0a4:	4605      	mov	r5, r0
 800f0a6:	460c      	mov	r4, r1
 800f0a8:	b1db      	cbz	r3, 800f0e2 <_fflush_r+0x42>
 800f0aa:	b118      	cbz	r0, 800f0b4 <_fflush_r+0x14>
 800f0ac:	6983      	ldr	r3, [r0, #24]
 800f0ae:	b90b      	cbnz	r3, 800f0b4 <_fflush_r+0x14>
 800f0b0:	f000 f860 	bl	800f174 <__sinit>
 800f0b4:	4b0c      	ldr	r3, [pc, #48]	; (800f0e8 <_fflush_r+0x48>)
 800f0b6:	429c      	cmp	r4, r3
 800f0b8:	d109      	bne.n	800f0ce <_fflush_r+0x2e>
 800f0ba:	686c      	ldr	r4, [r5, #4]
 800f0bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0c0:	b17b      	cbz	r3, 800f0e2 <_fflush_r+0x42>
 800f0c2:	4621      	mov	r1, r4
 800f0c4:	4628      	mov	r0, r5
 800f0c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0ca:	f7ff bf63 	b.w	800ef94 <__sflush_r>
 800f0ce:	4b07      	ldr	r3, [pc, #28]	; (800f0ec <_fflush_r+0x4c>)
 800f0d0:	429c      	cmp	r4, r3
 800f0d2:	d101      	bne.n	800f0d8 <_fflush_r+0x38>
 800f0d4:	68ac      	ldr	r4, [r5, #8]
 800f0d6:	e7f1      	b.n	800f0bc <_fflush_r+0x1c>
 800f0d8:	4b05      	ldr	r3, [pc, #20]	; (800f0f0 <_fflush_r+0x50>)
 800f0da:	429c      	cmp	r4, r3
 800f0dc:	bf08      	it	eq
 800f0de:	68ec      	ldreq	r4, [r5, #12]
 800f0e0:	e7ec      	b.n	800f0bc <_fflush_r+0x1c>
 800f0e2:	2000      	movs	r0, #0
 800f0e4:	bd38      	pop	{r3, r4, r5, pc}
 800f0e6:	bf00      	nop
 800f0e8:	0800f564 	.word	0x0800f564
 800f0ec:	0800f584 	.word	0x0800f584
 800f0f0:	0800f544 	.word	0x0800f544

0800f0f4 <std>:
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	b510      	push	{r4, lr}
 800f0f8:	4604      	mov	r4, r0
 800f0fa:	e9c0 3300 	strd	r3, r3, [r0]
 800f0fe:	6083      	str	r3, [r0, #8]
 800f100:	8181      	strh	r1, [r0, #12]
 800f102:	6643      	str	r3, [r0, #100]	; 0x64
 800f104:	81c2      	strh	r2, [r0, #14]
 800f106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f10a:	6183      	str	r3, [r0, #24]
 800f10c:	4619      	mov	r1, r3
 800f10e:	2208      	movs	r2, #8
 800f110:	305c      	adds	r0, #92	; 0x5c
 800f112:	f7ff fd5b 	bl	800ebcc <memset>
 800f116:	4b05      	ldr	r3, [pc, #20]	; (800f12c <std+0x38>)
 800f118:	6263      	str	r3, [r4, #36]	; 0x24
 800f11a:	4b05      	ldr	r3, [pc, #20]	; (800f130 <std+0x3c>)
 800f11c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f11e:	4b05      	ldr	r3, [pc, #20]	; (800f134 <std+0x40>)
 800f120:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f122:	4b05      	ldr	r3, [pc, #20]	; (800f138 <std+0x44>)
 800f124:	6224      	str	r4, [r4, #32]
 800f126:	6323      	str	r3, [r4, #48]	; 0x30
 800f128:	bd10      	pop	{r4, pc}
 800f12a:	bf00      	nop
 800f12c:	0800f355 	.word	0x0800f355
 800f130:	0800f377 	.word	0x0800f377
 800f134:	0800f3af 	.word	0x0800f3af
 800f138:	0800f3d3 	.word	0x0800f3d3

0800f13c <_cleanup_r>:
 800f13c:	4901      	ldr	r1, [pc, #4]	; (800f144 <_cleanup_r+0x8>)
 800f13e:	f000 b885 	b.w	800f24c <_fwalk_reent>
 800f142:	bf00      	nop
 800f144:	0800f0a1 	.word	0x0800f0a1

0800f148 <__sfmoreglue>:
 800f148:	b570      	push	{r4, r5, r6, lr}
 800f14a:	1e4a      	subs	r2, r1, #1
 800f14c:	2568      	movs	r5, #104	; 0x68
 800f14e:	4355      	muls	r5, r2
 800f150:	460e      	mov	r6, r1
 800f152:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f156:	f7ff fd8f 	bl	800ec78 <_malloc_r>
 800f15a:	4604      	mov	r4, r0
 800f15c:	b140      	cbz	r0, 800f170 <__sfmoreglue+0x28>
 800f15e:	2100      	movs	r1, #0
 800f160:	e9c0 1600 	strd	r1, r6, [r0]
 800f164:	300c      	adds	r0, #12
 800f166:	60a0      	str	r0, [r4, #8]
 800f168:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f16c:	f7ff fd2e 	bl	800ebcc <memset>
 800f170:	4620      	mov	r0, r4
 800f172:	bd70      	pop	{r4, r5, r6, pc}

0800f174 <__sinit>:
 800f174:	6983      	ldr	r3, [r0, #24]
 800f176:	b510      	push	{r4, lr}
 800f178:	4604      	mov	r4, r0
 800f17a:	bb33      	cbnz	r3, 800f1ca <__sinit+0x56>
 800f17c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f180:	6503      	str	r3, [r0, #80]	; 0x50
 800f182:	4b12      	ldr	r3, [pc, #72]	; (800f1cc <__sinit+0x58>)
 800f184:	4a12      	ldr	r2, [pc, #72]	; (800f1d0 <__sinit+0x5c>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	6282      	str	r2, [r0, #40]	; 0x28
 800f18a:	4298      	cmp	r0, r3
 800f18c:	bf04      	itt	eq
 800f18e:	2301      	moveq	r3, #1
 800f190:	6183      	streq	r3, [r0, #24]
 800f192:	f000 f81f 	bl	800f1d4 <__sfp>
 800f196:	6060      	str	r0, [r4, #4]
 800f198:	4620      	mov	r0, r4
 800f19a:	f000 f81b 	bl	800f1d4 <__sfp>
 800f19e:	60a0      	str	r0, [r4, #8]
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	f000 f817 	bl	800f1d4 <__sfp>
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	60e0      	str	r0, [r4, #12]
 800f1aa:	2104      	movs	r1, #4
 800f1ac:	6860      	ldr	r0, [r4, #4]
 800f1ae:	f7ff ffa1 	bl	800f0f4 <std>
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	2109      	movs	r1, #9
 800f1b6:	68a0      	ldr	r0, [r4, #8]
 800f1b8:	f7ff ff9c 	bl	800f0f4 <std>
 800f1bc:	2202      	movs	r2, #2
 800f1be:	2112      	movs	r1, #18
 800f1c0:	68e0      	ldr	r0, [r4, #12]
 800f1c2:	f7ff ff97 	bl	800f0f4 <std>
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	61a3      	str	r3, [r4, #24]
 800f1ca:	bd10      	pop	{r4, pc}
 800f1cc:	0800f540 	.word	0x0800f540
 800f1d0:	0800f13d 	.word	0x0800f13d

0800f1d4 <__sfp>:
 800f1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1d6:	4b1b      	ldr	r3, [pc, #108]	; (800f244 <__sfp+0x70>)
 800f1d8:	681e      	ldr	r6, [r3, #0]
 800f1da:	69b3      	ldr	r3, [r6, #24]
 800f1dc:	4607      	mov	r7, r0
 800f1de:	b913      	cbnz	r3, 800f1e6 <__sfp+0x12>
 800f1e0:	4630      	mov	r0, r6
 800f1e2:	f7ff ffc7 	bl	800f174 <__sinit>
 800f1e6:	3648      	adds	r6, #72	; 0x48
 800f1e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f1ec:	3b01      	subs	r3, #1
 800f1ee:	d503      	bpl.n	800f1f8 <__sfp+0x24>
 800f1f0:	6833      	ldr	r3, [r6, #0]
 800f1f2:	b133      	cbz	r3, 800f202 <__sfp+0x2e>
 800f1f4:	6836      	ldr	r6, [r6, #0]
 800f1f6:	e7f7      	b.n	800f1e8 <__sfp+0x14>
 800f1f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f1fc:	b16d      	cbz	r5, 800f21a <__sfp+0x46>
 800f1fe:	3468      	adds	r4, #104	; 0x68
 800f200:	e7f4      	b.n	800f1ec <__sfp+0x18>
 800f202:	2104      	movs	r1, #4
 800f204:	4638      	mov	r0, r7
 800f206:	f7ff ff9f 	bl	800f148 <__sfmoreglue>
 800f20a:	6030      	str	r0, [r6, #0]
 800f20c:	2800      	cmp	r0, #0
 800f20e:	d1f1      	bne.n	800f1f4 <__sfp+0x20>
 800f210:	230c      	movs	r3, #12
 800f212:	603b      	str	r3, [r7, #0]
 800f214:	4604      	mov	r4, r0
 800f216:	4620      	mov	r0, r4
 800f218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f21a:	4b0b      	ldr	r3, [pc, #44]	; (800f248 <__sfp+0x74>)
 800f21c:	6665      	str	r5, [r4, #100]	; 0x64
 800f21e:	e9c4 5500 	strd	r5, r5, [r4]
 800f222:	60a5      	str	r5, [r4, #8]
 800f224:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f228:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f22c:	2208      	movs	r2, #8
 800f22e:	4629      	mov	r1, r5
 800f230:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f234:	f7ff fcca 	bl	800ebcc <memset>
 800f238:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f23c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f240:	e7e9      	b.n	800f216 <__sfp+0x42>
 800f242:	bf00      	nop
 800f244:	0800f540 	.word	0x0800f540
 800f248:	ffff0001 	.word	0xffff0001

0800f24c <_fwalk_reent>:
 800f24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f250:	4680      	mov	r8, r0
 800f252:	4689      	mov	r9, r1
 800f254:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f258:	2600      	movs	r6, #0
 800f25a:	b914      	cbnz	r4, 800f262 <_fwalk_reent+0x16>
 800f25c:	4630      	mov	r0, r6
 800f25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f262:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f266:	3f01      	subs	r7, #1
 800f268:	d501      	bpl.n	800f26e <_fwalk_reent+0x22>
 800f26a:	6824      	ldr	r4, [r4, #0]
 800f26c:	e7f5      	b.n	800f25a <_fwalk_reent+0xe>
 800f26e:	89ab      	ldrh	r3, [r5, #12]
 800f270:	2b01      	cmp	r3, #1
 800f272:	d907      	bls.n	800f284 <_fwalk_reent+0x38>
 800f274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f278:	3301      	adds	r3, #1
 800f27a:	d003      	beq.n	800f284 <_fwalk_reent+0x38>
 800f27c:	4629      	mov	r1, r5
 800f27e:	4640      	mov	r0, r8
 800f280:	47c8      	blx	r9
 800f282:	4306      	orrs	r6, r0
 800f284:	3568      	adds	r5, #104	; 0x68
 800f286:	e7ee      	b.n	800f266 <_fwalk_reent+0x1a>

0800f288 <__swhatbuf_r>:
 800f288:	b570      	push	{r4, r5, r6, lr}
 800f28a:	460e      	mov	r6, r1
 800f28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f290:	2900      	cmp	r1, #0
 800f292:	b096      	sub	sp, #88	; 0x58
 800f294:	4614      	mov	r4, r2
 800f296:	461d      	mov	r5, r3
 800f298:	da07      	bge.n	800f2aa <__swhatbuf_r+0x22>
 800f29a:	2300      	movs	r3, #0
 800f29c:	602b      	str	r3, [r5, #0]
 800f29e:	89b3      	ldrh	r3, [r6, #12]
 800f2a0:	061a      	lsls	r2, r3, #24
 800f2a2:	d410      	bmi.n	800f2c6 <__swhatbuf_r+0x3e>
 800f2a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2a8:	e00e      	b.n	800f2c8 <__swhatbuf_r+0x40>
 800f2aa:	466a      	mov	r2, sp
 800f2ac:	f000 f8b8 	bl	800f420 <_fstat_r>
 800f2b0:	2800      	cmp	r0, #0
 800f2b2:	dbf2      	blt.n	800f29a <__swhatbuf_r+0x12>
 800f2b4:	9a01      	ldr	r2, [sp, #4]
 800f2b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f2ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f2be:	425a      	negs	r2, r3
 800f2c0:	415a      	adcs	r2, r3
 800f2c2:	602a      	str	r2, [r5, #0]
 800f2c4:	e7ee      	b.n	800f2a4 <__swhatbuf_r+0x1c>
 800f2c6:	2340      	movs	r3, #64	; 0x40
 800f2c8:	2000      	movs	r0, #0
 800f2ca:	6023      	str	r3, [r4, #0]
 800f2cc:	b016      	add	sp, #88	; 0x58
 800f2ce:	bd70      	pop	{r4, r5, r6, pc}

0800f2d0 <__smakebuf_r>:
 800f2d0:	898b      	ldrh	r3, [r1, #12]
 800f2d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f2d4:	079d      	lsls	r5, r3, #30
 800f2d6:	4606      	mov	r6, r0
 800f2d8:	460c      	mov	r4, r1
 800f2da:	d507      	bpl.n	800f2ec <__smakebuf_r+0x1c>
 800f2dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f2e0:	6023      	str	r3, [r4, #0]
 800f2e2:	6123      	str	r3, [r4, #16]
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	6163      	str	r3, [r4, #20]
 800f2e8:	b002      	add	sp, #8
 800f2ea:	bd70      	pop	{r4, r5, r6, pc}
 800f2ec:	ab01      	add	r3, sp, #4
 800f2ee:	466a      	mov	r2, sp
 800f2f0:	f7ff ffca 	bl	800f288 <__swhatbuf_r>
 800f2f4:	9900      	ldr	r1, [sp, #0]
 800f2f6:	4605      	mov	r5, r0
 800f2f8:	4630      	mov	r0, r6
 800f2fa:	f7ff fcbd 	bl	800ec78 <_malloc_r>
 800f2fe:	b948      	cbnz	r0, 800f314 <__smakebuf_r+0x44>
 800f300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f304:	059a      	lsls	r2, r3, #22
 800f306:	d4ef      	bmi.n	800f2e8 <__smakebuf_r+0x18>
 800f308:	f023 0303 	bic.w	r3, r3, #3
 800f30c:	f043 0302 	orr.w	r3, r3, #2
 800f310:	81a3      	strh	r3, [r4, #12]
 800f312:	e7e3      	b.n	800f2dc <__smakebuf_r+0xc>
 800f314:	4b0d      	ldr	r3, [pc, #52]	; (800f34c <__smakebuf_r+0x7c>)
 800f316:	62b3      	str	r3, [r6, #40]	; 0x28
 800f318:	89a3      	ldrh	r3, [r4, #12]
 800f31a:	6020      	str	r0, [r4, #0]
 800f31c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f320:	81a3      	strh	r3, [r4, #12]
 800f322:	9b00      	ldr	r3, [sp, #0]
 800f324:	6163      	str	r3, [r4, #20]
 800f326:	9b01      	ldr	r3, [sp, #4]
 800f328:	6120      	str	r0, [r4, #16]
 800f32a:	b15b      	cbz	r3, 800f344 <__smakebuf_r+0x74>
 800f32c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f330:	4630      	mov	r0, r6
 800f332:	f000 f887 	bl	800f444 <_isatty_r>
 800f336:	b128      	cbz	r0, 800f344 <__smakebuf_r+0x74>
 800f338:	89a3      	ldrh	r3, [r4, #12]
 800f33a:	f023 0303 	bic.w	r3, r3, #3
 800f33e:	f043 0301 	orr.w	r3, r3, #1
 800f342:	81a3      	strh	r3, [r4, #12]
 800f344:	89a3      	ldrh	r3, [r4, #12]
 800f346:	431d      	orrs	r5, r3
 800f348:	81a5      	strh	r5, [r4, #12]
 800f34a:	e7cd      	b.n	800f2e8 <__smakebuf_r+0x18>
 800f34c:	0800f13d 	.word	0x0800f13d

0800f350 <__malloc_lock>:
 800f350:	4770      	bx	lr

0800f352 <__malloc_unlock>:
 800f352:	4770      	bx	lr

0800f354 <__sread>:
 800f354:	b510      	push	{r4, lr}
 800f356:	460c      	mov	r4, r1
 800f358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f35c:	f000 f894 	bl	800f488 <_read_r>
 800f360:	2800      	cmp	r0, #0
 800f362:	bfab      	itete	ge
 800f364:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f366:	89a3      	ldrhlt	r3, [r4, #12]
 800f368:	181b      	addge	r3, r3, r0
 800f36a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f36e:	bfac      	ite	ge
 800f370:	6563      	strge	r3, [r4, #84]	; 0x54
 800f372:	81a3      	strhlt	r3, [r4, #12]
 800f374:	bd10      	pop	{r4, pc}

0800f376 <__swrite>:
 800f376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f37a:	461f      	mov	r7, r3
 800f37c:	898b      	ldrh	r3, [r1, #12]
 800f37e:	05db      	lsls	r3, r3, #23
 800f380:	4605      	mov	r5, r0
 800f382:	460c      	mov	r4, r1
 800f384:	4616      	mov	r6, r2
 800f386:	d505      	bpl.n	800f394 <__swrite+0x1e>
 800f388:	2302      	movs	r3, #2
 800f38a:	2200      	movs	r2, #0
 800f38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f390:	f000 f868 	bl	800f464 <_lseek_r>
 800f394:	89a3      	ldrh	r3, [r4, #12]
 800f396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f39a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f39e:	81a3      	strh	r3, [r4, #12]
 800f3a0:	4632      	mov	r2, r6
 800f3a2:	463b      	mov	r3, r7
 800f3a4:	4628      	mov	r0, r5
 800f3a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3aa:	f000 b817 	b.w	800f3dc <_write_r>

0800f3ae <__sseek>:
 800f3ae:	b510      	push	{r4, lr}
 800f3b0:	460c      	mov	r4, r1
 800f3b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3b6:	f000 f855 	bl	800f464 <_lseek_r>
 800f3ba:	1c43      	adds	r3, r0, #1
 800f3bc:	89a3      	ldrh	r3, [r4, #12]
 800f3be:	bf15      	itete	ne
 800f3c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f3c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f3c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f3ca:	81a3      	strheq	r3, [r4, #12]
 800f3cc:	bf18      	it	ne
 800f3ce:	81a3      	strhne	r3, [r4, #12]
 800f3d0:	bd10      	pop	{r4, pc}

0800f3d2 <__sclose>:
 800f3d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3d6:	f000 b813 	b.w	800f400 <_close_r>
	...

0800f3dc <_write_r>:
 800f3dc:	b538      	push	{r3, r4, r5, lr}
 800f3de:	4c07      	ldr	r4, [pc, #28]	; (800f3fc <_write_r+0x20>)
 800f3e0:	4605      	mov	r5, r0
 800f3e2:	4608      	mov	r0, r1
 800f3e4:	4611      	mov	r1, r2
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	6022      	str	r2, [r4, #0]
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	f7fe fd28 	bl	800de40 <_write>
 800f3f0:	1c43      	adds	r3, r0, #1
 800f3f2:	d102      	bne.n	800f3fa <_write_r+0x1e>
 800f3f4:	6823      	ldr	r3, [r4, #0]
 800f3f6:	b103      	cbz	r3, 800f3fa <_write_r+0x1e>
 800f3f8:	602b      	str	r3, [r5, #0]
 800f3fa:	bd38      	pop	{r3, r4, r5, pc}
 800f3fc:	20001178 	.word	0x20001178

0800f400 <_close_r>:
 800f400:	b538      	push	{r3, r4, r5, lr}
 800f402:	4c06      	ldr	r4, [pc, #24]	; (800f41c <_close_r+0x1c>)
 800f404:	2300      	movs	r3, #0
 800f406:	4605      	mov	r5, r0
 800f408:	4608      	mov	r0, r1
 800f40a:	6023      	str	r3, [r4, #0]
 800f40c:	f7fe fd36 	bl	800de7c <_close>
 800f410:	1c43      	adds	r3, r0, #1
 800f412:	d102      	bne.n	800f41a <_close_r+0x1a>
 800f414:	6823      	ldr	r3, [r4, #0]
 800f416:	b103      	cbz	r3, 800f41a <_close_r+0x1a>
 800f418:	602b      	str	r3, [r5, #0]
 800f41a:	bd38      	pop	{r3, r4, r5, pc}
 800f41c:	20001178 	.word	0x20001178

0800f420 <_fstat_r>:
 800f420:	b538      	push	{r3, r4, r5, lr}
 800f422:	4c07      	ldr	r4, [pc, #28]	; (800f440 <_fstat_r+0x20>)
 800f424:	2300      	movs	r3, #0
 800f426:	4605      	mov	r5, r0
 800f428:	4608      	mov	r0, r1
 800f42a:	4611      	mov	r1, r2
 800f42c:	6023      	str	r3, [r4, #0]
 800f42e:	f7fe fd31 	bl	800de94 <_fstat>
 800f432:	1c43      	adds	r3, r0, #1
 800f434:	d102      	bne.n	800f43c <_fstat_r+0x1c>
 800f436:	6823      	ldr	r3, [r4, #0]
 800f438:	b103      	cbz	r3, 800f43c <_fstat_r+0x1c>
 800f43a:	602b      	str	r3, [r5, #0]
 800f43c:	bd38      	pop	{r3, r4, r5, pc}
 800f43e:	bf00      	nop
 800f440:	20001178 	.word	0x20001178

0800f444 <_isatty_r>:
 800f444:	b538      	push	{r3, r4, r5, lr}
 800f446:	4c06      	ldr	r4, [pc, #24]	; (800f460 <_isatty_r+0x1c>)
 800f448:	2300      	movs	r3, #0
 800f44a:	4605      	mov	r5, r0
 800f44c:	4608      	mov	r0, r1
 800f44e:	6023      	str	r3, [r4, #0]
 800f450:	f7fe fd30 	bl	800deb4 <_isatty>
 800f454:	1c43      	adds	r3, r0, #1
 800f456:	d102      	bne.n	800f45e <_isatty_r+0x1a>
 800f458:	6823      	ldr	r3, [r4, #0]
 800f45a:	b103      	cbz	r3, 800f45e <_isatty_r+0x1a>
 800f45c:	602b      	str	r3, [r5, #0]
 800f45e:	bd38      	pop	{r3, r4, r5, pc}
 800f460:	20001178 	.word	0x20001178

0800f464 <_lseek_r>:
 800f464:	b538      	push	{r3, r4, r5, lr}
 800f466:	4c07      	ldr	r4, [pc, #28]	; (800f484 <_lseek_r+0x20>)
 800f468:	4605      	mov	r5, r0
 800f46a:	4608      	mov	r0, r1
 800f46c:	4611      	mov	r1, r2
 800f46e:	2200      	movs	r2, #0
 800f470:	6022      	str	r2, [r4, #0]
 800f472:	461a      	mov	r2, r3
 800f474:	f7fe fd29 	bl	800deca <_lseek>
 800f478:	1c43      	adds	r3, r0, #1
 800f47a:	d102      	bne.n	800f482 <_lseek_r+0x1e>
 800f47c:	6823      	ldr	r3, [r4, #0]
 800f47e:	b103      	cbz	r3, 800f482 <_lseek_r+0x1e>
 800f480:	602b      	str	r3, [r5, #0]
 800f482:	bd38      	pop	{r3, r4, r5, pc}
 800f484:	20001178 	.word	0x20001178

0800f488 <_read_r>:
 800f488:	b538      	push	{r3, r4, r5, lr}
 800f48a:	4c07      	ldr	r4, [pc, #28]	; (800f4a8 <_read_r+0x20>)
 800f48c:	4605      	mov	r5, r0
 800f48e:	4608      	mov	r0, r1
 800f490:	4611      	mov	r1, r2
 800f492:	2200      	movs	r2, #0
 800f494:	6022      	str	r2, [r4, #0]
 800f496:	461a      	mov	r2, r3
 800f498:	f7fe fcb5 	bl	800de06 <_read>
 800f49c:	1c43      	adds	r3, r0, #1
 800f49e:	d102      	bne.n	800f4a6 <_read_r+0x1e>
 800f4a0:	6823      	ldr	r3, [r4, #0]
 800f4a2:	b103      	cbz	r3, 800f4a6 <_read_r+0x1e>
 800f4a4:	602b      	str	r3, [r5, #0]
 800f4a6:	bd38      	pop	{r3, r4, r5, pc}
 800f4a8:	20001178 	.word	0x20001178

0800f4ac <_init>:
 800f4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ae:	bf00      	nop
 800f4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4b2:	bc08      	pop	{r3}
 800f4b4:	469e      	mov	lr, r3
 800f4b6:	4770      	bx	lr

0800f4b8 <_fini>:
 800f4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ba:	bf00      	nop
 800f4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4be:	bc08      	pop	{r3}
 800f4c0:	469e      	mov	lr, r3
 800f4c2:	4770      	bx	lr
